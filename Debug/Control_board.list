
Control_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cfc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  08009e0c  08009e0c  00019e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a054  0800a054  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800a054  0800a054  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a054  0800a054  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a054  0800a054  0001a054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a058  0800a058  0001a058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800a05c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c2c  20000014  0800a070  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c40  0800a070  00022c40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfe7  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044b3  00000000  00000000  0003d024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  000414d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  00042bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4bb  00000000  00000000  000440f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac64  00000000  00000000  0005f5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098587  00000000  00000000  0007a20f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00112796  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e10  00000000  00000000  001127ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08009df4 	.word	0x08009df4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08009df4 	.word	0x08009df4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000030 	.word	0x20000030
 800018c:	20000084 	.word	0x20000084

08000190 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000190:	b480      	push	{r7}
 8000192:	b085      	sub	sp, #20
 8000194:	af00      	add	r7, sp, #0
 8000196:	60f8      	str	r0, [r7, #12]
 8000198:	60b9      	str	r1, [r7, #8]
 800019a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4a07      	ldr	r2, [pc, #28]	; (80001bc <vApplicationGetTimerTaskMemory+0x2c>)
 80001a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	4a06      	ldr	r2, [pc, #24]	; (80001c0 <vApplicationGetTimerTaskMemory+0x30>)
 80001a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001b0:	bf00      	nop
 80001b2:	3714      	adds	r7, #20
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	20000284 	.word	0x20000284
 80001c0:	200002d8 	.word	0x200002d8

080001c4 <HAL_UART_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart2, read_buf, 11);
	LED8_ON;
 80001cc:	2201      	movs	r2, #1
 80001ce:	2180      	movs	r1, #128	; 0x80
 80001d0:	4803      	ldr	r0, [pc, #12]	; (80001e0 <HAL_UART_TxCpltCallback+0x1c>)
 80001d2:	f001 fb9c 	bl	800190e <HAL_GPIO_WritePin>
}
 80001d6:	bf00      	nop
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	40010800 	.word	0x40010800

080001e4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	osThreadResume(WifiTaskHandle);
 80001ec:	4b06      	ldr	r3, [pc, #24]	; (8000208 <HAL_UART_RxCpltCallback+0x24>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f004 fc1d 	bl	8004a30 <osThreadResume>
	//HAL_UART_Receive_DMA(&huart2, buf1, 1);

	LED8_ON;
 80001f6:	2201      	movs	r2, #1
 80001f8:	2180      	movs	r1, #128	; 0x80
 80001fa:	4804      	ldr	r0, [pc, #16]	; (800020c <HAL_UART_RxCpltCallback+0x28>)
 80001fc:	f001 fb87 	bl	800190e <HAL_GPIO_WritePin>
}
 8000200:	bf00      	nop
 8000202:	3708      	adds	r7, #8
 8000204:	46bd      	mov	sp, r7
 8000206:	bd80      	pop	{r7, pc}
 8000208:	200029b4 	.word	0x200029b4
 800020c:	40010800 	.word	0x40010800

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b5b0      	push	{r4, r5, r7, lr}
 8000212:	b0cc      	sub	sp, #304	; 0x130
 8000214:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000216:	f000 fd49 	bl	8000cac <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021a:	f000 f93f 	bl	800049c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021e:	f000 fa6b 	bl	80006f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000222:	f000 fa43 	bl	80006ac <MX_DMA_Init>
  MX_RTC_Init();
 8000226:	f000 f9cd 	bl	80005c4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800022a:	f000 fa15 	bl	8000658 <MX_USART2_UART_Init>
  MX_CAN_Init();
 800022e:	f000 f993 	bl	8000558 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  wh0802_init(); //инициализируем дисплей
 8000232:	f004 f8b9 	bl	80043a8 <wh0802_init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000236:	2201      	movs	r2, #1
 8000238:	2110      	movs	r1, #16
 800023a:	487e      	ldr	r0, [pc, #504]	; (8000434 <main+0x224>)
 800023c:	f001 fb67 	bl	800190e <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 8000240:	2300      	movs	r3, #0
 8000242:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000246:	2300      	movs	r3, #0
 8000248:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800024c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000250:	4618      	mov	r0, r3
 8000252:	f004 faad 	bl	80047b0 <osMutexCreate>
 8000256:	4603      	mov	r3, r0
 8000258:	4a77      	ldr	r2, [pc, #476]	; (8000438 <main+0x228>)
 800025a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800025c:	2300      	movs	r3, #0
 800025e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000262:	2300      	movs	r3, #0
 8000264:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000268:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800026c:	2101      	movs	r1, #1
 800026e:	4618      	mov	r0, r3
 8000270:	f004 fab6 	bl	80047e0 <osSemaphoreCreate>
 8000274:	4603      	mov	r3, r0
 8000276:	4a71      	ldr	r2, [pc, #452]	; (800043c <main+0x22c>)
 8000278:	6013      	str	r3, [r2, #0]

  /* definition and creation of myCountingSem01 */
  osSemaphoreDef(myCountingSem01);
 800027a:	2300      	movs	r3, #0
 800027c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000280:	2300      	movs	r3, #0
 8000282:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  myCountingSem01Handle = osSemaphoreCreate(osSemaphore(myCountingSem01), 5);
 8000286:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800028a:	2105      	movs	r1, #5
 800028c:	4618      	mov	r0, r3
 800028e:	f004 faa7 	bl	80047e0 <osSemaphoreCreate>
 8000292:	4603      	mov	r3, r0
 8000294:	4a6a      	ldr	r2, [pc, #424]	; (8000440 <main+0x230>)
 8000296:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  osTimerDef(DispTimer, DisplayTimer);
 8000298:	4b6a      	ldr	r3, [pc, #424]	; (8000444 <main+0x234>)
 800029a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800029e:	2300      	movs	r3, #0
 80002a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  DisplayTimerHandle = osTimerCreate(osTimer(DispTimer), osTimerOnce, NULL);
 80002a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80002a8:	2200      	movs	r2, #0
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f004 f9cb 	bl	8004648 <osTimerCreate>
 80002b2:	4603      	mov	r3, r0
 80002b4:	4a64      	ldr	r2, [pc, #400]	; (8000448 <main+0x238>)
 80002b6:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMessageQDef(pos_Queue, 1, uint8_t);
 80002b8:	4b64      	ldr	r3, [pc, #400]	; (800044c <main+0x23c>)
 80002ba:	f507 7480 	add.w	r4, r7, #256	; 0x100
 80002be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pos_Queue = osMessageCreate(osMessageQ(pos_Queue), NULL);
 80002c4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80002c8:	2100      	movs	r1, #0
 80002ca:	4618      	mov	r0, r3
 80002cc:	f004 fac7 	bl	800485e <osMessageCreate>
 80002d0:	4603      	mov	r3, r0
 80002d2:	4a5f      	ldr	r2, [pc, #380]	; (8000450 <main+0x240>)
 80002d4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002d6:	4b5f      	ldr	r3, [pc, #380]	; (8000454 <main+0x244>)
 80002d8:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 80002dc:	461d      	mov	r5, r3
 80002de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80002ee:	2100      	movs	r1, #0
 80002f0:	4618      	mov	r0, r3
 80002f2:	f004 f941 	bl	8004578 <osThreadCreate>
 80002f6:	4603      	mov	r3, r0
 80002f8:	4a57      	ldr	r2, [pc, #348]	; (8000458 <main+0x248>)
 80002fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(Keys, Keyboard, osPriorityNormal, 0, 128);
 80002fc:	4b57      	ldr	r3, [pc, #348]	; (800045c <main+0x24c>)
 80002fe:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000302:	461d      	mov	r5, r3
 8000304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000308:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800030c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  KeysHandle = osThreadCreate(osThread(Keys), NULL); // Создаем задачу для обработки клавиатуры
 8000310:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f004 f92e 	bl	8004578 <osThreadCreate>
 800031c:	4603      	mov	r3, r0
 800031e:	4a50      	ldr	r2, [pc, #320]	; (8000460 <main+0x250>)
 8000320:	6013      	str	r3, [r2, #0]

  osThreadDef(wh0802, Display, osPriorityNormal, 0, 128);
 8000322:	4b50      	ldr	r3, [pc, #320]	; (8000464 <main+0x254>)
 8000324:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8000328:	461d      	mov	r5, r3
 800032a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800032c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800032e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000332:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayHandle = osThreadCreate(osThread(wh0802), NULL); // Создаем задачу для обработки дисплея
 8000336:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800033a:	2100      	movs	r1, #0
 800033c:	4618      	mov	r0, r3
 800033e:	f004 f91b 	bl	8004578 <osThreadCreate>
 8000342:	4603      	mov	r3, r0
 8000344:	4a48      	ldr	r2, [pc, #288]	; (8000468 <main+0x258>)
 8000346:	6013      	str	r3, [r2, #0]

  osThreadDef(TimeDisplay, TimeMenu, osPriorityNormal, 0, 128);
 8000348:	4b48      	ldr	r3, [pc, #288]	; (800046c <main+0x25c>)
 800034a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800034e:	461d      	mov	r5, r3
 8000350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000354:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000358:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TimeMenuHandle = osThreadCreate(osThread(TimeDisplay), NULL); // Создаем задачу для обработки времени на рабочем столе
 800035c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f004 f908 	bl	8004578 <osThreadCreate>
 8000368:	4603      	mov	r3, r0
 800036a:	4a41      	ldr	r2, [pc, #260]	; (8000470 <main+0x260>)
 800036c:	6013      	str	r3, [r2, #0]

  osThreadDef(time, TimeTask, osPriorityNormal, 0, 128);
 800036e:	4b41      	ldr	r3, [pc, #260]	; (8000474 <main+0x264>)
 8000370:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000374:	461d      	mov	r5, r3
 8000376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800037a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800037e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TimeTaskHandle = osThreadCreate(osThread(time), NULL); // Создаем задачу для установки времени
 8000382:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000386:	2100      	movs	r1, #0
 8000388:	4618      	mov	r0, r3
 800038a:	f004 f8f5 	bl	8004578 <osThreadCreate>
 800038e:	4603      	mov	r3, r0
 8000390:	4a39      	ldr	r2, [pc, #228]	; (8000478 <main+0x268>)
 8000392:	6013      	str	r3, [r2, #0]

  osThreadDef(date, DateTask, osPriorityNormal, 0, 128);
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <main+0x26c>)
 8000396:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800039a:	461d      	mov	r5, r3
 800039c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800039e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DateTaskHandle = osThreadCreate(osThread(date), NULL); // Создаем задачу для установки даты
 80003a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f004 f8e2 	bl	8004578 <osThreadCreate>
 80003b4:	4603      	mov	r3, r0
 80003b6:	4a32      	ldr	r2, [pc, #200]	; (8000480 <main+0x270>)
 80003b8:	6013      	str	r3, [r2, #0]

  osThreadDef(time_display, TimeDisplayTask, osPriorityNormal, 0, 128);
 80003ba:	4b32      	ldr	r3, [pc, #200]	; (8000484 <main+0x274>)
 80003bc:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80003c0:	461d      	mov	r5, r3
 80003c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TimeDisplayTaskHandle = osThreadCreate(osThread(time_display), NULL); // Создаем задачу для установки даты
 80003ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003d2:	2100      	movs	r1, #0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f004 f8cf 	bl	8004578 <osThreadCreate>
 80003da:	4603      	mov	r3, r0
 80003dc:	4a2a      	ldr	r2, [pc, #168]	; (8000488 <main+0x278>)
 80003de:	6013      	str	r3, [r2, #0]

  osThreadDef(date_display, DateDisplayTask, osPriorityNormal, 0, 128);
 80003e0:	f107 0320 	add.w	r3, r7, #32
 80003e4:	4a29      	ldr	r2, [pc, #164]	; (800048c <main+0x27c>)
 80003e6:	461c      	mov	r4, r3
 80003e8:	4615      	mov	r5, r2
 80003ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DateDisplayTaskHandle = osThreadCreate(osThread(date_display), NULL); // Создаем задачу для установки даты
 80003f6:	f107 0320 	add.w	r3, r7, #32
 80003fa:	2100      	movs	r1, #0
 80003fc:	4618      	mov	r0, r3
 80003fe:	f004 f8bb 	bl	8004578 <osThreadCreate>
 8000402:	4603      	mov	r3, r0
 8000404:	4a22      	ldr	r2, [pc, #136]	; (8000490 <main+0x280>)
 8000406:	6013      	str	r3, [r2, #0]

  osThreadDef(wifi, WifiTask, osPriorityNormal, 0, 128);
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	4a22      	ldr	r2, [pc, #136]	; (8000494 <main+0x284>)
 800040c:	461c      	mov	r4, r3
 800040e:	4615      	mov	r5, r2
 8000410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000414:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000418:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WifiTaskHandle = osThreadCreate(osThread(wifi), NULL); // Создаем задачу для установки даты
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2100      	movs	r1, #0
 8000420:	4618      	mov	r0, r3
 8000422:	f004 f8a9 	bl	8004578 <osThreadCreate>
 8000426:	4603      	mov	r3, r0
 8000428:	4a1b      	ldr	r2, [pc, #108]	; (8000498 <main+0x288>)
 800042a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800042c:	f004 f891 	bl	8004552 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000430:	e7fe      	b.n	8000430 <main+0x220>
 8000432:	bf00      	nop
 8000434:	40010800 	.word	0x40010800
 8000438:	200029a8 	.word	0x200029a8
 800043c:	20002954 	.word	0x20002954
 8000440:	20002950 	.word	0x20002950
 8000444:	08009981 	.word	0x08009981
 8000448:	200028b0 	.word	0x200028b0
 800044c:	08009e6c 	.word	0x08009e6c
 8000450:	200028b4 	.word	0x200028b4
 8000454:	08009e7c 	.word	0x08009e7c
 8000458:	20002868 	.word	0x20002868
 800045c:	08009e98 	.word	0x08009e98
 8000460:	200029ac 	.word	0x200029ac
 8000464:	08009eb4 	.word	0x08009eb4
 8000468:	2000295c 	.word	0x2000295c
 800046c:	08009ed0 	.word	0x08009ed0
 8000470:	20002964 	.word	0x20002964
 8000474:	08009eec 	.word	0x08009eec
 8000478:	200029b0 	.word	0x200029b0
 800047c:	08009f08 	.word	0x08009f08
 8000480:	20002938 	.word	0x20002938
 8000484:	08009f24 	.word	0x08009f24
 8000488:	20002958 	.word	0x20002958
 800048c:	08009f40 	.word	0x08009f40
 8000490:	20002960 	.word	0x20002960
 8000494:	08009f5c 	.word	0x08009f5c
 8000498:	200029b4 	.word	0x200029b4

0800049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b094      	sub	sp, #80	; 0x50
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a6:	2228      	movs	r2, #40	; 0x28
 80004a8:	2100      	movs	r1, #0
 80004aa:	4618      	mov	r0, r3
 80004ac:	f009 fc9a 	bl	8009de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b0:	f107 0314 	add.w	r3, r7, #20
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80004cc:	2305      	movs	r3, #5
 80004ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004d6:	2300      	movs	r3, #0
 80004d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80004da:	2301      	movs	r3, #1
 80004dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004de:	2301      	movs	r3, #1
 80004e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e2:	2302      	movs	r3, #2
 80004e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004ec:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 fa2e 	bl	8001958 <HAL_RCC_OscConfig>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000502:	f000 f9a9 	bl	8000858 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000506:	230f      	movs	r3, #15
 8000508:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050a:	2302      	movs	r3, #2
 800050c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000516:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	2102      	movs	r1, #2
 8000522:	4618      	mov	r0, r3
 8000524:	f001 fc98 	bl	8001e58 <HAL_RCC_ClockConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800052e:	f000 f993 	bl	8000858 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000532:	2301      	movs	r3, #1
 8000534:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800053a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fe54 	bl	80021ec <HAL_RCCEx_PeriphCLKConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800054a:	f000 f985 	bl	8000858 <Error_Handler>
  }
}
 800054e:	bf00      	nop
 8000550:	3750      	adds	r7, #80	; 0x50
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <MX_CAN_Init+0x64>)
 800055e:	4a18      	ldr	r2, [pc, #96]	; (80005c0 <MX_CAN_Init+0x68>)
 8000560:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000562:	4b16      	ldr	r3, [pc, #88]	; (80005bc <MX_CAN_Init+0x64>)
 8000564:	2210      	movs	r2, #16
 8000566:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_SILENT_LOOPBACK;
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_CAN_Init+0x64>)
 800056a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800056e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <MX_CAN_Init+0x64>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_CAN_Init+0x64>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_CAN_Init+0x64>)
 800057e:	2200      	movs	r2, #0
 8000580:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_CAN_Init+0x64>)
 8000584:	2200      	movs	r2, #0
 8000586:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <MX_CAN_Init+0x64>)
 800058a:	2200      	movs	r2, #0
 800058c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <MX_CAN_Init+0x64>)
 8000590:	2200      	movs	r2, #0
 8000592:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000594:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_CAN_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <MX_CAN_Init+0x64>)
 800059c:	2200      	movs	r2, #0
 800059e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MX_CAN_Init+0x64>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_CAN_Init+0x64>)
 80005a8:	f000 fbd6 	bl	8000d58 <HAL_CAN_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80005b2:	f000 f951 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200028b8 	.word	0x200028b8
 80005c0:	40006400 	.word	0x40006400

080005c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2100      	movs	r1, #0
 80005ce:	460a      	mov	r2, r1
 80005d0:	801a      	strh	r2, [r3, #0]
 80005d2:	460a      	mov	r2, r1
 80005d4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80005d6:	2300      	movs	r3, #0
 80005d8:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <MX_RTC_Init+0x8c>)
 80005dc:	4a1d      	ldr	r2, [pc, #116]	; (8000654 <MX_RTC_Init+0x90>)
 80005de:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80005e0:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <MX_RTC_Init+0x8c>)
 80005e2:	f04f 32ff 	mov.w	r2, #4294967295
 80005e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_RTC_Init+0x8c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80005ee:	4818      	ldr	r0, [pc, #96]	; (8000650 <MX_RTC_Init+0x8c>)
 80005f0:	f001 ff76 	bl	80024e0 <HAL_RTC_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80005fa:	f000 f92d 	bl	8000858 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80005fe:	2300      	movs	r3, #0
 8000600:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000602:	2300      	movs	r3, #0
 8000604:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000606:	2300      	movs	r3, #0
 8000608:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2201      	movs	r2, #1
 800060e:	4619      	mov	r1, r3
 8000610:	480f      	ldr	r0, [pc, #60]	; (8000650 <MX_RTC_Init+0x8c>)
 8000612:	f001 fffb 	bl	800260c <HAL_RTC_SetTime>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 800061c:	f000 f91c 	bl	8000858 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000620:	2301      	movs	r3, #1
 8000622:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000624:	2301      	movs	r3, #1
 8000626:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000628:	2301      	movs	r3, #1
 800062a:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800062c:	2300      	movs	r3, #0
 800062e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	2201      	movs	r2, #1
 8000634:	4619      	mov	r1, r3
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <MX_RTC_Init+0x8c>)
 8000638:	f002 f958 	bl	80028ec <HAL_RTC_SetDate>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000642:	f000 f909 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000293c 	.word	0x2000293c
 8000654:	40002800 	.word	0x40002800

08000658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800065c:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_USART2_UART_Init+0x50>)
 8000660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000662:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_USART2_UART_Init+0x4c>)
 8000690:	f002 ff22 	bl	80034d8 <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800069a:	f000 f8dd 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20002968 	.word	0x20002968
 80006a8:	40004400 	.word	0x40004400

080006ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_DMA_Init+0x48>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <MX_DMA_Init+0x48>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_DMA_Init+0x48>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2105      	movs	r1, #5
 80006ce:	2010      	movs	r0, #16
 80006d0:	f000 fcf3 	bl	80010ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80006d4:	2010      	movs	r0, #16
 80006d6:	f000 fd0c 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2105      	movs	r1, #5
 80006de:	2011      	movs	r0, #17
 80006e0:	f000 fceb 	bl	80010ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80006e4:	2011      	movs	r0, #17
 80006e6:	f000 fd04 	bl	80010f2 <HAL_NVIC_EnableIRQ>

}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40021000 	.word	0x40021000

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070c:	4b41      	ldr	r3, [pc, #260]	; (8000814 <MX_GPIO_Init+0x11c>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a40      	ldr	r2, [pc, #256]	; (8000814 <MX_GPIO_Init+0x11c>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <MX_GPIO_Init+0x11c>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000724:	4b3b      	ldr	r3, [pc, #236]	; (8000814 <MX_GPIO_Init+0x11c>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	4a3a      	ldr	r2, [pc, #232]	; (8000814 <MX_GPIO_Init+0x11c>)
 800072a:	f043 0320 	orr.w	r3, r3, #32
 800072e:	6193      	str	r3, [r2, #24]
 8000730:	4b38      	ldr	r3, [pc, #224]	; (8000814 <MX_GPIO_Init+0x11c>)
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f003 0320 	and.w	r3, r3, #32
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b35      	ldr	r3, [pc, #212]	; (8000814 <MX_GPIO_Init+0x11c>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a34      	ldr	r2, [pc, #208]	; (8000814 <MX_GPIO_Init+0x11c>)
 8000742:	f043 0304 	orr.w	r3, r3, #4
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b32      	ldr	r3, [pc, #200]	; (8000814 <MX_GPIO_Init+0x11c>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0304 	and.w	r3, r3, #4
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_GPIO_Init+0x11c>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a2e      	ldr	r2, [pc, #184]	; (8000814 <MX_GPIO_Init+0x11c>)
 800075a:	f043 0308 	orr.w	r3, r3, #8
 800075e:	6193      	str	r3, [r2, #24]
 8000760:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <MX_GPIO_Init+0x11c>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	f003 0308 	and.w	r3, r3, #8
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8000772:	4829      	ldr	r0, [pc, #164]	; (8000818 <MX_GPIO_Init+0x120>)
 8000774:	f001 f8cb 	bl	800190e <HAL_GPIO_WritePin>
                          |GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8000778:	2200      	movs	r2, #0
 800077a:	f64f 4106 	movw	r1, #64518	; 0xfc06
 800077e:	4827      	ldr	r0, [pc, #156]	; (800081c <MX_GPIO_Init+0x124>)
 8000780:	f001 f8c5 	bl	800190e <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	4821      	ldr	r0, [pc, #132]	; (8000820 <MX_GPIO_Init+0x128>)
 800079a:	f000 ff1d 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 PA8 PA9
                           PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800079e:	f44f 63f2 	mov.w	r3, #1936	; 0x790
 80007a2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	4818      	ldr	r0, [pc, #96]	; (8000818 <MX_GPIO_Init+0x120>)
 80007b8:	f000 ff0e 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80007bc:	2311      	movs	r3, #17
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	4619      	mov	r1, r3
 80007ce:	4813      	ldr	r0, [pc, #76]	; (800081c <MX_GPIO_Init+0x124>)
 80007d0:	f000 ff02 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 80007d4:	f64f 4306 	movw	r3, #64518	; 0xfc06
 80007d8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2302      	movs	r3, #2
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	4619      	mov	r1, r3
 80007ec:	480b      	ldr	r0, [pc, #44]	; (800081c <MX_GPIO_Init+0x124>)
 80007ee:	f000 fef3 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80007f2:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 80007f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_GPIO_Init+0x120>)
 8000808:	f000 fee6 	bl	80015d8 <HAL_GPIO_Init>

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000
 8000818:	40010800 	.word	0x40010800
 800081c:	40010c00 	.word	0x40010c00
 8000820:	40011000 	.word	0x40011000

08000824 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f003 fef6 	bl	800461e <osDelay>
 8000832:	e7fb      	b.n	800082c <StartDefaultTask+0x8>

08000834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d101      	bne.n	800084a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000846:	f000 fa47 	bl	8000cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40012c00 	.word	0x40012c00

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <HAL_MspInit+0x68>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <HAL_MspInit+0x68>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <HAL_MspInit+0x68>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_MspInit+0x68>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	4a11      	ldr	r2, [pc, #68]	; (80008cc <HAL_MspInit+0x68>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	61d3      	str	r3, [r2, #28]
 800088e:	4b0f      	ldr	r3, [pc, #60]	; (80008cc <HAL_MspInit+0x68>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	210f      	movs	r1, #15
 800089e:	f06f 0001 	mvn.w	r0, #1
 80008a2:	f000 fc0a 	bl	80010ba <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_MspInit+0x6c>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <HAL_MspInit+0x6c>)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40010000 	.word	0x40010000

080008d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a25      	ldr	r2, [pc, #148]	; (8000984 <HAL_CAN_MspInit+0xb0>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d143      	bne.n	800097c <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008f4:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_CAN_MspInit+0xb4>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	4a23      	ldr	r2, [pc, #140]	; (8000988 <HAL_CAN_MspInit+0xb4>)
 80008fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008fe:	61d3      	str	r3, [r2, #28]
 8000900:	4b21      	ldr	r3, [pc, #132]	; (8000988 <HAL_CAN_MspInit+0xb4>)
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <HAL_CAN_MspInit+0xb4>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a1d      	ldr	r2, [pc, #116]	; (8000988 <HAL_CAN_MspInit+0xb4>)
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <HAL_CAN_MspInit+0xb4>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0308 	and.w	r3, r3, #8
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	4814      	ldr	r0, [pc, #80]	; (800098c <HAL_CAN_MspInit+0xb8>)
 800093a:	f000 fe4d 	bl	80015d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800093e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	4619      	mov	r1, r3
 8000952:	480e      	ldr	r0, [pc, #56]	; (800098c <HAL_CAN_MspInit+0xb8>)
 8000954:	f000 fe40 	bl	80015d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_CAN_MspInit+0xbc>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
 800095e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000960:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
 8000966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000968:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
 8000976:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_CAN_MspInit+0xbc>)
 8000978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40006400 	.word	0x40006400
 8000988:	40021000 	.word	0x40021000
 800098c:	40010c00 	.word	0x40010c00
 8000990:	40010000 	.word	0x40010000

08000994 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0b      	ldr	r2, [pc, #44]	; (80009d0 <HAL_RTC_MspInit+0x3c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d110      	bne.n	80009c8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80009a6:	f000 ffcb 	bl	8001940 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80009aa:	4b0a      	ldr	r3, [pc, #40]	; (80009d4 <HAL_RTC_MspInit+0x40>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <HAL_RTC_MspInit+0x40>)
 80009b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <HAL_RTC_MspInit+0x40>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_RTC_MspInit+0x44>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40002800 	.word	0x40002800
 80009d4:	40021000 	.word	0x40021000
 80009d8:	4242043c 	.word	0x4242043c

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a46      	ldr	r2, [pc, #280]	; (8000b10 <HAL_UART_MspInit+0x134>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	f040 8084 	bne.w	8000b06 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009fe:	4b45      	ldr	r3, [pc, #276]	; (8000b14 <HAL_UART_MspInit+0x138>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	4a44      	ldr	r2, [pc, #272]	; (8000b14 <HAL_UART_MspInit+0x138>)
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a08:	61d3      	str	r3, [r2, #28]
 8000a0a:	4b42      	ldr	r3, [pc, #264]	; (8000b14 <HAL_UART_MspInit+0x138>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <HAL_UART_MspInit+0x138>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a3e      	ldr	r2, [pc, #248]	; (8000b14 <HAL_UART_MspInit+0x138>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b3c      	ldr	r3, [pc, #240]	; (8000b14 <HAL_UART_MspInit+0x138>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4835      	ldr	r0, [pc, #212]	; (8000b18 <HAL_UART_MspInit+0x13c>)
 8000a42:	f000 fdc9 	bl	80015d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a46:	2308      	movs	r3, #8
 8000a48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	4619      	mov	r1, r3
 8000a58:	482f      	ldr	r0, [pc, #188]	; (8000b18 <HAL_UART_MspInit+0x13c>)
 8000a5a:	f000 fdbd 	bl	80015d8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <HAL_UART_MspInit+0x140>)
 8000a60:	4a2f      	ldr	r2, [pc, #188]	; (8000b20 <HAL_UART_MspInit+0x144>)
 8000a62:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <HAL_UART_MspInit+0x140>)
 8000a66:	2210      	movs	r2, #16
 8000a68:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <HAL_UART_MspInit+0x140>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <HAL_UART_MspInit+0x140>)
 8000a72:	2280      	movs	r2, #128	; 0x80
 8000a74:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <HAL_UART_MspInit+0x140>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a7c:	4b27      	ldr	r3, [pc, #156]	; (8000b1c <HAL_UART_MspInit+0x140>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a82:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <HAL_UART_MspInit+0x140>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a88:	4b24      	ldr	r3, [pc, #144]	; (8000b1c <HAL_UART_MspInit+0x140>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a8e:	4823      	ldr	r0, [pc, #140]	; (8000b1c <HAL_UART_MspInit+0x140>)
 8000a90:	f000 fb3e 	bl	8001110 <HAL_DMA_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8000a9a:	f7ff fedd 	bl	8000858 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a1e      	ldr	r2, [pc, #120]	; (8000b1c <HAL_UART_MspInit+0x140>)
 8000aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8000aa4:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <HAL_UART_MspInit+0x140>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000aac:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <HAL_UART_MspInit+0x14c>)
 8000aae:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000abe:	2280      	movs	r2, #128	; 0x80
 8000ac0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ada:	4812      	ldr	r0, [pc, #72]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000adc:	f000 fb18 	bl	8001110 <HAL_DMA_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000ae6:	f7ff feb7 	bl	8000858 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000aee:	635a      	str	r2, [r3, #52]	; 0x34
 8000af0:	4a0c      	ldr	r2, [pc, #48]	; (8000b24 <HAL_UART_MspInit+0x148>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2105      	movs	r1, #5
 8000afa:	2026      	movs	r0, #38	; 0x26
 8000afc:	f000 fadd 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b00:	2026      	movs	r0, #38	; 0x26
 8000b02:	f000 faf6 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b06:	bf00      	nop
 8000b08:	3720      	adds	r7, #32
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40004400 	.word	0x40004400
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	200028f4 	.word	0x200028f4
 8000b20:	40020080 	.word	0x40020080
 8000b24:	2000286c 	.word	0x2000286c
 8000b28:	4002006c 	.word	0x4002006c

08000b2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	; 0x30
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2019      	movs	r0, #25
 8000b42:	f000 faba 	bl	80010ba <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000b46:	2019      	movs	r0, #25
 8000b48:	f000 fad3 	bl	80010f2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <HAL_InitTick+0x9c>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <HAL_InitTick+0x9c>)
 8000b52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <HAL_InitTick+0x9c>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b64:	f107 0210 	add.w	r2, r7, #16
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 faee 	bl	8002150 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b74:	f001 fad8 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 8000b78:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7c:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <HAL_InitTick+0xa0>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	0c9b      	lsrs	r3, r3, #18
 8000b84:	3b01      	subs	r3, #1
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <HAL_InitTick+0xa8>)
 8000b8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000b90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b94:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b96:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b9a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ba8:	4809      	ldr	r0, [pc, #36]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000baa:	f002 fa4b 	bl	8003044 <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d104      	bne.n	8000bbe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000bb6:	f002 fa9d 	bl	80030f4 <HAL_TIM_Base_Start_IT>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	e000      	b.n	8000bc0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3730      	adds	r7, #48	; 0x30
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	431bde83 	.word	0x431bde83
 8000bd0:	200029b8 	.word	0x200029b8
 8000bd4:	40012c00 	.word	0x40012c00

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <NMI_Handler+0x4>

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
	...

08000c04 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <DMA1_Channel6_IRQHandler+0x10>)
 8000c0a:	f000 fbb1 	bl	8001370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000286c 	.word	0x2000286c

08000c18 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <DMA1_Channel7_IRQHandler+0x10>)
 8000c1e:	f000 fba7 	bl	8001370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200028f4 	.word	0x200028f4

08000c2c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <TIM1_UP_IRQHandler+0x10>)
 8000c32:	f002 fab1 	bl	8003198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200029b8 	.word	0x200029b8

08000c40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <USART2_IRQHandler+0x10>)
 8000c46:	f002 fd81 	bl	800374c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20002968 	.word	0x20002968

08000c54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c62:	e003      	b.n	8000c6c <LoopCopyDataInit>

08000c64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000c66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c6a:	3104      	adds	r1, #4

08000c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c6c:	480a      	ldr	r0, [pc, #40]	; (8000c98 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c74:	d3f6      	bcc.n	8000c64 <CopyDataInit>
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c78:	e002      	b.n	8000c80 <LoopFillZerobss>

08000c7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c7c:	f842 3b04 	str.w	r3, [r2], #4

08000c80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c84:	d3f9      	bcc.n	8000c7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c86:	f7ff ffe5 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8a:	f009 f879 	bl	8009d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8e:	f7ff fabf 	bl	8000210 <main>
  bx lr
 8000c92:	4770      	bx	lr
  ldr r3, =_sidata
 8000c94:	0800a05c 	.word	0x0800a05c
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c9c:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000ca0:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000ca4:	20002c40 	.word	0x20002c40

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_Init+0x28>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_Init+0x28>)
 8000cb6:	f043 0310 	orr.w	r3, r3, #16
 8000cba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f9f1 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff ff32 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fdcc 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40022000 	.word	0x40022000

08000cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_IncTick+0x1c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x20>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a03      	ldr	r2, [pc, #12]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20002a00 	.word	0x20002a00

08000cfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b02      	ldr	r3, [pc, #8]	; (8000d0c <HAL_GetTick+0x10>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	20002a00 	.word	0x20002a00

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff fff0 	bl	8000cfc <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffe0 	bl	8000cfc <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008

08000d58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d101      	bne.n	8000d6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e0ed      	b.n	8000f46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d102      	bne.n	8000d7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fdac 	bl	80008d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0202 	bic.w	r2, r2, #2
 8000d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d8c:	f7ff ffb6 	bl	8000cfc <HAL_GetTick>
 8000d90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d92:	e012      	b.n	8000dba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d94:	f7ff ffb2 	bl	8000cfc <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b0a      	cmp	r3, #10
 8000da0:	d90b      	bls.n	8000dba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2205      	movs	r2, #5
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e0c5      	b.n	8000f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1e5      	bne.n	8000d94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0201 	orr.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dd8:	f7ff ff90 	bl	8000cfc <HAL_GetTick>
 8000ddc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dde:	e012      	b.n	8000e06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000de0:	f7ff ff8c 	bl	8000cfc <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b0a      	cmp	r3, #10
 8000dec:	d90b      	bls.n	8000e06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2205      	movs	r2, #5
 8000dfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e09f      	b.n	8000f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0e5      	beq.n	8000de0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7e1b      	ldrb	r3, [r3, #24]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d108      	bne.n	8000e2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e007      	b.n	8000e3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7e5b      	ldrb	r3, [r3, #25]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d108      	bne.n	8000e58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e007      	b.n	8000e68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7e9b      	ldrb	r3, [r3, #26]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d108      	bne.n	8000e82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0220 	orr.w	r2, r2, #32
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e007      	b.n	8000e92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0220 	bic.w	r2, r2, #32
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7edb      	ldrb	r3, [r3, #27]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d108      	bne.n	8000eac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0210 	bic.w	r2, r2, #16
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e007      	b.n	8000ebc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0210 	orr.w	r2, r2, #16
 8000eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7f1b      	ldrb	r3, [r3, #28]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d108      	bne.n	8000ed6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0208 	orr.w	r2, r2, #8
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	e007      	b.n	8000ee6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f022 0208 	bic.w	r2, r2, #8
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	7f5b      	ldrb	r3, [r3, #29]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d108      	bne.n	8000f00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f042 0204 	orr.w	r2, r2, #4
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	e007      	b.n	8000f10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0204 	bic.w	r2, r2, #4
 8000f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	431a      	orrs	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	695b      	ldr	r3, [r3, #20]
 8000f24:	ea42 0103 	orr.w	r1, r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	1e5a      	subs	r2, r3, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f82:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <__NVIC_SetPriorityGrouping+0x44>)
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	60d3      	str	r3, [r2, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	0a1b      	lsrs	r3, r3, #8
 8000fa2:	f003 0307 	and.w	r3, r3, #7
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	db0b      	blt.n	8000fde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	f003 021f 	and.w	r2, r3, #31
 8000fcc:	4906      	ldr	r1, [pc, #24]	; (8000fe8 <__NVIC_EnableIRQ+0x34>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	095b      	lsrs	r3, r3, #5
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fde:	bf00      	nop
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	; (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	; 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff4f 	bl	8000f50 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff64 	bl	8000f98 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ffb2 	bl	8001040 <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff81 	bl	8000fec <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff57 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e043      	b.n	80011ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_DMA_Init+0xa8>)
 800112e:	4413      	add	r3, r2
 8001130:	4a22      	ldr	r2, [pc, #136]	; (80011bc <HAL_DMA_Init+0xac>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	009a      	lsls	r2, r3, #2
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1f      	ldr	r2, [pc, #124]	; (80011c0 <HAL_DMA_Init+0xb0>)
 8001142:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2202      	movs	r2, #2
 8001148:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800115a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800115e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001168:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001174:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001180:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2200      	movs	r2, #0
 80011a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr
 80011b8:	bffdfff8 	.word	0xbffdfff8
 80011bc:	cccccccd 	.word	0xcccccccd
 80011c0:	40020000 	.word	0x40020000

080011c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <HAL_DMA_Start_IT+0x20>
 80011e0:	2302      	movs	r3, #2
 80011e2:	e04a      	b.n	800127a <HAL_DMA_Start_IT+0xb6>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2201      	movs	r2, #1
 80011e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d13a      	bne.n	800126c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2202      	movs	r2, #2
 80011fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2200      	movs	r2, #0
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0201 	bic.w	r2, r2, #1
 8001212:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f000 f9ae 	bl	800157c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 020e 	orr.w	r2, r2, #14
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e00f      	b.n	800125a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0204 	bic.w	r2, r2, #4
 8001248:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 020a 	orr.w	r2, r2, #10
 8001258:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f042 0201 	orr.w	r2, r2, #1
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e005      	b.n	8001278 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001274:	2302      	movs	r3, #2
 8001276:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001278:	7dfb      	ldrb	r3, [r7, #23]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001296:	2b02      	cmp	r3, #2
 8001298:	d005      	beq.n	80012a6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2204      	movs	r2, #4
 800129e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	e051      	b.n	800134a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 020e 	bic.w	r2, r2, #14
 80012b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0201 	bic.w	r2, r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a22      	ldr	r2, [pc, #136]	; (8001354 <HAL_DMA_Abort_IT+0xd0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d029      	beq.n	8001324 <HAL_DMA_Abort_IT+0xa0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a20      	ldr	r2, [pc, #128]	; (8001358 <HAL_DMA_Abort_IT+0xd4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d022      	beq.n	8001320 <HAL_DMA_Abort_IT+0x9c>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a1f      	ldr	r2, [pc, #124]	; (800135c <HAL_DMA_Abort_IT+0xd8>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d01a      	beq.n	800131a <HAL_DMA_Abort_IT+0x96>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <HAL_DMA_Abort_IT+0xdc>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d012      	beq.n	8001314 <HAL_DMA_Abort_IT+0x90>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <HAL_DMA_Abort_IT+0xe0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d00a      	beq.n	800130e <HAL_DMA_Abort_IT+0x8a>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1a      	ldr	r2, [pc, #104]	; (8001368 <HAL_DMA_Abort_IT+0xe4>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d102      	bne.n	8001308 <HAL_DMA_Abort_IT+0x84>
 8001302:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001306:	e00e      	b.n	8001326 <HAL_DMA_Abort_IT+0xa2>
 8001308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800130c:	e00b      	b.n	8001326 <HAL_DMA_Abort_IT+0xa2>
 800130e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001312:	e008      	b.n	8001326 <HAL_DMA_Abort_IT+0xa2>
 8001314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001318:	e005      	b.n	8001326 <HAL_DMA_Abort_IT+0xa2>
 800131a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131e:	e002      	b.n	8001326 <HAL_DMA_Abort_IT+0xa2>
 8001320:	2310      	movs	r3, #16
 8001322:	e000      	b.n	8001326 <HAL_DMA_Abort_IT+0xa2>
 8001324:	2301      	movs	r3, #1
 8001326:	4a11      	ldr	r2, [pc, #68]	; (800136c <HAL_DMA_Abort_IT+0xe8>)
 8001328:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	4798      	blx	r3
    } 
  }
  return status;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40020008 	.word	0x40020008
 8001358:	4002001c 	.word	0x4002001c
 800135c:	40020030 	.word	0x40020030
 8001360:	40020044 	.word	0x40020044
 8001364:	40020058 	.word	0x40020058
 8001368:	4002006c 	.word	0x4002006c
 800136c:	40020000 	.word	0x40020000

08001370 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	2204      	movs	r2, #4
 800138e:	409a      	lsls	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4013      	ands	r3, r2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d04f      	beq.n	8001438 <HAL_DMA_IRQHandler+0xc8>
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d04a      	beq.n	8001438 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0320 	and.w	r3, r3, #32
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d107      	bne.n	80013c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0204 	bic.w	r2, r2, #4
 80013be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a66      	ldr	r2, [pc, #408]	; (8001560 <HAL_DMA_IRQHandler+0x1f0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d029      	beq.n	800141e <HAL_DMA_IRQHandler+0xae>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a65      	ldr	r2, [pc, #404]	; (8001564 <HAL_DMA_IRQHandler+0x1f4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d022      	beq.n	800141a <HAL_DMA_IRQHandler+0xaa>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a63      	ldr	r2, [pc, #396]	; (8001568 <HAL_DMA_IRQHandler+0x1f8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d01a      	beq.n	8001414 <HAL_DMA_IRQHandler+0xa4>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a62      	ldr	r2, [pc, #392]	; (800156c <HAL_DMA_IRQHandler+0x1fc>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d012      	beq.n	800140e <HAL_DMA_IRQHandler+0x9e>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a60      	ldr	r2, [pc, #384]	; (8001570 <HAL_DMA_IRQHandler+0x200>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00a      	beq.n	8001408 <HAL_DMA_IRQHandler+0x98>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a5f      	ldr	r2, [pc, #380]	; (8001574 <HAL_DMA_IRQHandler+0x204>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d102      	bne.n	8001402 <HAL_DMA_IRQHandler+0x92>
 80013fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001400:	e00e      	b.n	8001420 <HAL_DMA_IRQHandler+0xb0>
 8001402:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001406:	e00b      	b.n	8001420 <HAL_DMA_IRQHandler+0xb0>
 8001408:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800140c:	e008      	b.n	8001420 <HAL_DMA_IRQHandler+0xb0>
 800140e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001412:	e005      	b.n	8001420 <HAL_DMA_IRQHandler+0xb0>
 8001414:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001418:	e002      	b.n	8001420 <HAL_DMA_IRQHandler+0xb0>
 800141a:	2340      	movs	r3, #64	; 0x40
 800141c:	e000      	b.n	8001420 <HAL_DMA_IRQHandler+0xb0>
 800141e:	2304      	movs	r3, #4
 8001420:	4a55      	ldr	r2, [pc, #340]	; (8001578 <HAL_DMA_IRQHandler+0x208>)
 8001422:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 8094 	beq.w	8001556 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001436:	e08e      	b.n	8001556 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	2202      	movs	r2, #2
 800143e:	409a      	lsls	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d056      	beq.n	80014f6 <HAL_DMA_IRQHandler+0x186>
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d051      	beq.n	80014f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0320 	and.w	r3, r3, #32
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10b      	bne.n	8001478 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 020a 	bic.w	r2, r2, #10
 800146e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a38      	ldr	r2, [pc, #224]	; (8001560 <HAL_DMA_IRQHandler+0x1f0>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d029      	beq.n	80014d6 <HAL_DMA_IRQHandler+0x166>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a37      	ldr	r2, [pc, #220]	; (8001564 <HAL_DMA_IRQHandler+0x1f4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d022      	beq.n	80014d2 <HAL_DMA_IRQHandler+0x162>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a35      	ldr	r2, [pc, #212]	; (8001568 <HAL_DMA_IRQHandler+0x1f8>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d01a      	beq.n	80014cc <HAL_DMA_IRQHandler+0x15c>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a34      	ldr	r2, [pc, #208]	; (800156c <HAL_DMA_IRQHandler+0x1fc>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d012      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x156>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a32      	ldr	r2, [pc, #200]	; (8001570 <HAL_DMA_IRQHandler+0x200>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d00a      	beq.n	80014c0 <HAL_DMA_IRQHandler+0x150>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a31      	ldr	r2, [pc, #196]	; (8001574 <HAL_DMA_IRQHandler+0x204>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d102      	bne.n	80014ba <HAL_DMA_IRQHandler+0x14a>
 80014b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014b8:	e00e      	b.n	80014d8 <HAL_DMA_IRQHandler+0x168>
 80014ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014be:	e00b      	b.n	80014d8 <HAL_DMA_IRQHandler+0x168>
 80014c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c4:	e008      	b.n	80014d8 <HAL_DMA_IRQHandler+0x168>
 80014c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ca:	e005      	b.n	80014d8 <HAL_DMA_IRQHandler+0x168>
 80014cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d0:	e002      	b.n	80014d8 <HAL_DMA_IRQHandler+0x168>
 80014d2:	2320      	movs	r3, #32
 80014d4:	e000      	b.n	80014d8 <HAL_DMA_IRQHandler+0x168>
 80014d6:	2302      	movs	r3, #2
 80014d8:	4a27      	ldr	r2, [pc, #156]	; (8001578 <HAL_DMA_IRQHandler+0x208>)
 80014da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d034      	beq.n	8001556 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014f4:	e02f      	b.n	8001556 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	2208      	movs	r2, #8
 80014fc:	409a      	lsls	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4013      	ands	r3, r2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d028      	beq.n	8001558 <HAL_DMA_IRQHandler+0x1e8>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d023      	beq.n	8001558 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 020e 	bic.w	r2, r2, #14
 800151e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001528:	2101      	movs	r1, #1
 800152a:	fa01 f202 	lsl.w	r2, r1, r2
 800152e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	2b00      	cmp	r3, #0
 800154c:	d004      	beq.n	8001558 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	4798      	blx	r3
    }
  }
  return;
 8001556:	bf00      	nop
 8001558:	bf00      	nop
}
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40020008 	.word	0x40020008
 8001564:	4002001c 	.word	0x4002001c
 8001568:	40020030 	.word	0x40020030
 800156c:	40020044 	.word	0x40020044
 8001570:	40020058 	.word	0x40020058
 8001574:	4002006c 	.word	0x4002006c
 8001578:	40020000 	.word	0x40020000

0800157c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001592:	2101      	movs	r1, #1
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d108      	bne.n	80015bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015ba:	e007      	b.n	80015cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	60da      	str	r2, [r3, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
	...

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b480      	push	{r7}
 80015da:	b08b      	sub	sp, #44	; 0x2c
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ea:	e169      	b.n	80018c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015ec:	2201      	movs	r2, #1
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	429a      	cmp	r2, r3
 8001606:	f040 8158 	bne.w	80018ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	4a9a      	ldr	r2, [pc, #616]	; (8001878 <HAL_GPIO_Init+0x2a0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d05e      	beq.n	80016d2 <HAL_GPIO_Init+0xfa>
 8001614:	4a98      	ldr	r2, [pc, #608]	; (8001878 <HAL_GPIO_Init+0x2a0>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d875      	bhi.n	8001706 <HAL_GPIO_Init+0x12e>
 800161a:	4a98      	ldr	r2, [pc, #608]	; (800187c <HAL_GPIO_Init+0x2a4>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d058      	beq.n	80016d2 <HAL_GPIO_Init+0xfa>
 8001620:	4a96      	ldr	r2, [pc, #600]	; (800187c <HAL_GPIO_Init+0x2a4>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d86f      	bhi.n	8001706 <HAL_GPIO_Init+0x12e>
 8001626:	4a96      	ldr	r2, [pc, #600]	; (8001880 <HAL_GPIO_Init+0x2a8>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d052      	beq.n	80016d2 <HAL_GPIO_Init+0xfa>
 800162c:	4a94      	ldr	r2, [pc, #592]	; (8001880 <HAL_GPIO_Init+0x2a8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d869      	bhi.n	8001706 <HAL_GPIO_Init+0x12e>
 8001632:	4a94      	ldr	r2, [pc, #592]	; (8001884 <HAL_GPIO_Init+0x2ac>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d04c      	beq.n	80016d2 <HAL_GPIO_Init+0xfa>
 8001638:	4a92      	ldr	r2, [pc, #584]	; (8001884 <HAL_GPIO_Init+0x2ac>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d863      	bhi.n	8001706 <HAL_GPIO_Init+0x12e>
 800163e:	4a92      	ldr	r2, [pc, #584]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d046      	beq.n	80016d2 <HAL_GPIO_Init+0xfa>
 8001644:	4a90      	ldr	r2, [pc, #576]	; (8001888 <HAL_GPIO_Init+0x2b0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d85d      	bhi.n	8001706 <HAL_GPIO_Init+0x12e>
 800164a:	2b12      	cmp	r3, #18
 800164c:	d82a      	bhi.n	80016a4 <HAL_GPIO_Init+0xcc>
 800164e:	2b12      	cmp	r3, #18
 8001650:	d859      	bhi.n	8001706 <HAL_GPIO_Init+0x12e>
 8001652:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <HAL_GPIO_Init+0x80>)
 8001654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001658:	080016d3 	.word	0x080016d3
 800165c:	080016ad 	.word	0x080016ad
 8001660:	080016bf 	.word	0x080016bf
 8001664:	08001701 	.word	0x08001701
 8001668:	08001707 	.word	0x08001707
 800166c:	08001707 	.word	0x08001707
 8001670:	08001707 	.word	0x08001707
 8001674:	08001707 	.word	0x08001707
 8001678:	08001707 	.word	0x08001707
 800167c:	08001707 	.word	0x08001707
 8001680:	08001707 	.word	0x08001707
 8001684:	08001707 	.word	0x08001707
 8001688:	08001707 	.word	0x08001707
 800168c:	08001707 	.word	0x08001707
 8001690:	08001707 	.word	0x08001707
 8001694:	08001707 	.word	0x08001707
 8001698:	08001707 	.word	0x08001707
 800169c:	080016b5 	.word	0x080016b5
 80016a0:	080016c9 	.word	0x080016c9
 80016a4:	4a79      	ldr	r2, [pc, #484]	; (800188c <HAL_GPIO_Init+0x2b4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d013      	beq.n	80016d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016aa:	e02c      	b.n	8001706 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	623b      	str	r3, [r7, #32]
          break;
 80016b2:	e029      	b.n	8001708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	3304      	adds	r3, #4
 80016ba:	623b      	str	r3, [r7, #32]
          break;
 80016bc:	e024      	b.n	8001708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	3308      	adds	r3, #8
 80016c4:	623b      	str	r3, [r7, #32]
          break;
 80016c6:	e01f      	b.n	8001708 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	330c      	adds	r3, #12
 80016ce:	623b      	str	r3, [r7, #32]
          break;
 80016d0:	e01a      	b.n	8001708 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016da:	2304      	movs	r3, #4
 80016dc:	623b      	str	r3, [r7, #32]
          break;
 80016de:	e013      	b.n	8001708 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d105      	bne.n	80016f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e8:	2308      	movs	r3, #8
 80016ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	611a      	str	r2, [r3, #16]
          break;
 80016f2:	e009      	b.n	8001708 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016f4:	2308      	movs	r3, #8
 80016f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	615a      	str	r2, [r3, #20]
          break;
 80016fe:	e003      	b.n	8001708 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
          break;
 8001704:	e000      	b.n	8001708 <HAL_GPIO_Init+0x130>
          break;
 8001706:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2bff      	cmp	r3, #255	; 0xff
 800170c:	d801      	bhi.n	8001712 <HAL_GPIO_Init+0x13a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	e001      	b.n	8001716 <HAL_GPIO_Init+0x13e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3304      	adds	r3, #4
 8001716:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	2bff      	cmp	r3, #255	; 0xff
 800171c:	d802      	bhi.n	8001724 <HAL_GPIO_Init+0x14c>
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	e002      	b.n	800172a <HAL_GPIO_Init+0x152>
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	3b08      	subs	r3, #8
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	210f      	movs	r1, #15
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	fa01 f303 	lsl.w	r3, r1, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	401a      	ands	r2, r3
 800173c:	6a39      	ldr	r1, [r7, #32]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	431a      	orrs	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 80b1 	beq.w	80018ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001758:	4b4d      	ldr	r3, [pc, #308]	; (8001890 <HAL_GPIO_Init+0x2b8>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a4c      	ldr	r2, [pc, #304]	; (8001890 <HAL_GPIO_Init+0x2b8>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b4a      	ldr	r3, [pc, #296]	; (8001890 <HAL_GPIO_Init+0x2b8>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001770:	4a48      	ldr	r2, [pc, #288]	; (8001894 <HAL_GPIO_Init+0x2bc>)
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	3302      	adds	r3, #2
 8001778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800177c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	220f      	movs	r2, #15
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	4013      	ands	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a40      	ldr	r2, [pc, #256]	; (8001898 <HAL_GPIO_Init+0x2c0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d013      	beq.n	80017c4 <HAL_GPIO_Init+0x1ec>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a3f      	ldr	r2, [pc, #252]	; (800189c <HAL_GPIO_Init+0x2c4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d00d      	beq.n	80017c0 <HAL_GPIO_Init+0x1e8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a3e      	ldr	r2, [pc, #248]	; (80018a0 <HAL_GPIO_Init+0x2c8>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d007      	beq.n	80017bc <HAL_GPIO_Init+0x1e4>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a3d      	ldr	r2, [pc, #244]	; (80018a4 <HAL_GPIO_Init+0x2cc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d101      	bne.n	80017b8 <HAL_GPIO_Init+0x1e0>
 80017b4:	2303      	movs	r3, #3
 80017b6:	e006      	b.n	80017c6 <HAL_GPIO_Init+0x1ee>
 80017b8:	2304      	movs	r3, #4
 80017ba:	e004      	b.n	80017c6 <HAL_GPIO_Init+0x1ee>
 80017bc:	2302      	movs	r3, #2
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0x1ee>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <HAL_GPIO_Init+0x1ee>
 80017c4:	2300      	movs	r3, #0
 80017c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c8:	f002 0203 	and.w	r2, r2, #3
 80017cc:	0092      	lsls	r2, r2, #2
 80017ce:	4093      	lsls	r3, r2
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017d6:	492f      	ldr	r1, [pc, #188]	; (8001894 <HAL_GPIO_Init+0x2bc>)
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	089b      	lsrs	r3, r3, #2
 80017dc:	3302      	adds	r3, #2
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017f0:	4b2d      	ldr	r3, [pc, #180]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	492c      	ldr	r1, [pc, #176]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017fe:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	43db      	mvns	r3, r3
 8001806:	4928      	ldr	r1, [pc, #160]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001808:	4013      	ands	r3, r2
 800180a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d006      	beq.n	8001826 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001818:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	4922      	ldr	r1, [pc, #136]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
 8001824:	e006      	b.n	8001834 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001826:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	43db      	mvns	r3, r3
 800182e:	491e      	ldr	r1, [pc, #120]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001830:	4013      	ands	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	4918      	ldr	r1, [pc, #96]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]
 800184c:	e006      	b.n	800185c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	43db      	mvns	r3, r3
 8001856:	4914      	ldr	r1, [pc, #80]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001858:	4013      	ands	r3, r2
 800185a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d021      	beq.n	80018ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	490e      	ldr	r1, [pc, #56]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	60cb      	str	r3, [r1, #12]
 8001874:	e021      	b.n	80018ba <HAL_GPIO_Init+0x2e2>
 8001876:	bf00      	nop
 8001878:	10320000 	.word	0x10320000
 800187c:	10310000 	.word	0x10310000
 8001880:	10220000 	.word	0x10220000
 8001884:	10210000 	.word	0x10210000
 8001888:	10120000 	.word	0x10120000
 800188c:	10110000 	.word	0x10110000
 8001890:	40021000 	.word	0x40021000
 8001894:	40010000 	.word	0x40010000
 8001898:	40010800 	.word	0x40010800
 800189c:	40010c00 	.word	0x40010c00
 80018a0:	40011000 	.word	0x40011000
 80018a4:	40011400 	.word	0x40011400
 80018a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_GPIO_Init+0x304>)
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	4909      	ldr	r1, [pc, #36]	; (80018dc <HAL_GPIO_Init+0x304>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	3301      	adds	r3, #1
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f47f ae8e 	bne.w	80015ec <HAL_GPIO_Init+0x14>
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	372c      	adds	r7, #44	; 0x2c
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	460b      	mov	r3, r1
 80018ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	887b      	ldrh	r3, [r7, #2]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e001      	b.n	8001902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001902:	7bfb      	ldrb	r3, [r7, #15]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	807b      	strh	r3, [r7, #2]
 800191a:	4613      	mov	r3, r2
 800191c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800191e:	787b      	ldrb	r3, [r7, #1]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001924:	887a      	ldrh	r2, [r7, #2]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800192a:	e003      	b.n	8001934 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	041a      	lsls	r2, r3, #16
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	611a      	str	r2, [r3, #16]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
	...

08001940 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	420e0020 	.word	0x420e0020

08001958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e26c      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 8087 	beq.w	8001a86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001978:	4b92      	ldr	r3, [pc, #584]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b04      	cmp	r3, #4
 8001982:	d00c      	beq.n	800199e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001984:	4b8f      	ldr	r3, [pc, #572]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b08      	cmp	r3, #8
 800198e:	d112      	bne.n	80019b6 <HAL_RCC_OscConfig+0x5e>
 8001990:	4b8c      	ldr	r3, [pc, #560]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199c:	d10b      	bne.n	80019b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199e:	4b89      	ldr	r3, [pc, #548]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d06c      	beq.n	8001a84 <HAL_RCC_OscConfig+0x12c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d168      	bne.n	8001a84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e246      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019be:	d106      	bne.n	80019ce <HAL_RCC_OscConfig+0x76>
 80019c0:	4b80      	ldr	r3, [pc, #512]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a7f      	ldr	r2, [pc, #508]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	e02e      	b.n	8001a2c <HAL_RCC_OscConfig+0xd4>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x98>
 80019d6:	4b7b      	ldr	r3, [pc, #492]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a7a      	ldr	r2, [pc, #488]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	4b78      	ldr	r3, [pc, #480]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a77      	ldr	r2, [pc, #476]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019ec:	6013      	str	r3, [r2, #0]
 80019ee:	e01d      	b.n	8001a2c <HAL_RCC_OscConfig+0xd4>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f8:	d10c      	bne.n	8001a14 <HAL_RCC_OscConfig+0xbc>
 80019fa:	4b72      	ldr	r3, [pc, #456]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a71      	ldr	r2, [pc, #452]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	4b6f      	ldr	r3, [pc, #444]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a6e      	ldr	r2, [pc, #440]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a10:	6013      	str	r3, [r2, #0]
 8001a12:	e00b      	b.n	8001a2c <HAL_RCC_OscConfig+0xd4>
 8001a14:	4b6b      	ldr	r3, [pc, #428]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a6a      	ldr	r2, [pc, #424]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	4b68      	ldr	r3, [pc, #416]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a67      	ldr	r2, [pc, #412]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d013      	beq.n	8001a5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff f962 	bl	8000cfc <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff f95e 	bl	8000cfc <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1fa      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4b5d      	ldr	r3, [pc, #372]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0xe4>
 8001a5a:	e014      	b.n	8001a86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f94e 	bl	8000cfc <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff f94a 	bl	8000cfc <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1e6      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a76:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x10c>
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d063      	beq.n	8001b5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a92:	4b4c      	ldr	r3, [pc, #304]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00b      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a9e:	4b49      	ldr	r3, [pc, #292]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d11c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x18c>
 8001aaa:	4b46      	ldr	r3, [pc, #280]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d116      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab6:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d005      	beq.n	8001ace <HAL_RCC_OscConfig+0x176>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d001      	beq.n	8001ace <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e1ba      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4939      	ldr	r1, [pc, #228]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae2:	e03a      	b.n	8001b5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d020      	beq.n	8001b2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aec:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af2:	f7ff f903 	bl	8000cfc <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afa:	f7ff f8ff 	bl	8000cfc <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e19b      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0c:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0f0      	beq.n	8001afa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b18:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4927      	ldr	r1, [pc, #156]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	600b      	str	r3, [r1, #0]
 8001b2c:	e015      	b.n	8001b5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b2e:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <HAL_RCC_OscConfig+0x270>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff f8e2 	bl	8000cfc <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3c:	f7ff f8de 	bl	8000cfc <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e17a      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d03a      	beq.n	8001bdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d019      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6e:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b74:	f7ff f8c2 	bl	8000cfc <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7c:	f7ff f8be 	bl	8000cfc <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e15a      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f000 fb08 	bl	80021b0 <RCC_Delay>
 8001ba0:	e01c      	b.n	8001bdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_RCC_OscConfig+0x274>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba8:	f7ff f8a8 	bl	8000cfc <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bae:	e00f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb0:	f7ff f8a4 	bl	8000cfc <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d908      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e140      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	42420000 	.word	0x42420000
 8001bcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd0:	4b9e      	ldr	r3, [pc, #632]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1e9      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80a6 	beq.w	8001d36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bee:	4b97      	ldr	r3, [pc, #604]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10d      	bne.n	8001c16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	4b94      	ldr	r3, [pc, #592]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	4a93      	ldr	r2, [pc, #588]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	61d3      	str	r3, [r2, #28]
 8001c06:	4b91      	ldr	r3, [pc, #580]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	4b8e      	ldr	r3, [pc, #568]	; (8001e50 <HAL_RCC_OscConfig+0x4f8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c22:	4b8b      	ldr	r3, [pc, #556]	; (8001e50 <HAL_RCC_OscConfig+0x4f8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a8a      	ldr	r2, [pc, #552]	; (8001e50 <HAL_RCC_OscConfig+0x4f8>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f865 	bl	8000cfc <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7ff f861 	bl	8000cfc <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b64      	cmp	r3, #100	; 0x64
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0fd      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4b81      	ldr	r3, [pc, #516]	; (8001e50 <HAL_RCC_OscConfig+0x4f8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x312>
 8001c5c:	4b7b      	ldr	r3, [pc, #492]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	4a7a      	ldr	r2, [pc, #488]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6213      	str	r3, [r2, #32]
 8001c68:	e02d      	b.n	8001cc6 <HAL_RCC_OscConfig+0x36e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x334>
 8001c72:	4b76      	ldr	r3, [pc, #472]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4a75      	ldr	r2, [pc, #468]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	6213      	str	r3, [r2, #32]
 8001c7e:	4b73      	ldr	r3, [pc, #460]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4a72      	ldr	r2, [pc, #456]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	f023 0304 	bic.w	r3, r3, #4
 8001c88:	6213      	str	r3, [r2, #32]
 8001c8a:	e01c      	b.n	8001cc6 <HAL_RCC_OscConfig+0x36e>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b05      	cmp	r3, #5
 8001c92:	d10c      	bne.n	8001cae <HAL_RCC_OscConfig+0x356>
 8001c94:	4b6d      	ldr	r3, [pc, #436]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c96:	6a1b      	ldr	r3, [r3, #32]
 8001c98:	4a6c      	ldr	r2, [pc, #432]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001c9a:	f043 0304 	orr.w	r3, r3, #4
 8001c9e:	6213      	str	r3, [r2, #32]
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a69      	ldr	r2, [pc, #420]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6213      	str	r3, [r2, #32]
 8001cac:	e00b      	b.n	8001cc6 <HAL_RCC_OscConfig+0x36e>
 8001cae:	4b67      	ldr	r3, [pc, #412]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4a66      	ldr	r2, [pc, #408]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	6213      	str	r3, [r2, #32]
 8001cba:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a63      	ldr	r2, [pc, #396]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	f023 0304 	bic.w	r3, r3, #4
 8001cc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d015      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cce:	f7ff f815 	bl	8000cfc <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd4:	e00a      	b.n	8001cec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd6:	f7ff f811 	bl	8000cfc <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e0ab      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cec:	4b57      	ldr	r3, [pc, #348]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ee      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x37e>
 8001cf8:	e014      	b.n	8001d24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfa:	f7fe ffff 	bl	8000cfc <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7fe fffb 	bl	8000cfc <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e095      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d18:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ee      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d24:	7dfb      	ldrb	r3, [r7, #23]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d105      	bne.n	8001d36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2a:	4b48      	ldr	r3, [pc, #288]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	4a47      	ldr	r2, [pc, #284]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8081 	beq.w	8001e42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d40:	4b42      	ldr	r3, [pc, #264]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d061      	beq.n	8001e10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d146      	bne.n	8001de2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d54:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <HAL_RCC_OscConfig+0x4fc>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7fe ffcf 	bl	8000cfc <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d62:	f7fe ffcb 	bl	8000cfc <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e067      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d74:	4b35      	ldr	r3, [pc, #212]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f0      	bne.n	8001d62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d88:	d108      	bne.n	8001d9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d8a:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	492d      	ldr	r1, [pc, #180]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a19      	ldr	r1, [r3, #32]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	430b      	orrs	r3, r1
 8001dae:	4927      	ldr	r1, [pc, #156]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db4:	4b27      	ldr	r3, [pc, #156]	; (8001e54 <HAL_RCC_OscConfig+0x4fc>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7fe ff9f 	bl	8000cfc <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc2:	f7fe ff9b 	bl	8000cfc <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e037      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x46a>
 8001de0:	e02f      	b.n	8001e42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de2:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_RCC_OscConfig+0x4fc>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7fe ff88 	bl	8000cfc <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df0:	f7fe ff84 	bl	8000cfc <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e020      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0x498>
 8001e0e:	e018      	b.n	8001e42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e013      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40007000 	.word	0x40007000
 8001e54:	42420060 	.word	0x42420060

08001e58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0d0      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b6a      	ldr	r3, [pc, #424]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d910      	bls.n	8001e9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b67      	ldr	r3, [pc, #412]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 0207 	bic.w	r2, r3, #7
 8001e82:	4965      	ldr	r1, [pc, #404]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8a:	4b63      	ldr	r3, [pc, #396]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d001      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0b8      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d020      	beq.n	8001eea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb4:	4b59      	ldr	r3, [pc, #356]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4a58      	ldr	r2, [pc, #352]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ebe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ecc:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ed6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed8:	4b50      	ldr	r3, [pc, #320]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	494d      	ldr	r1, [pc, #308]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d040      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	4b47      	ldr	r3, [pc, #284]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d115      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e07f      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b41      	ldr	r3, [pc, #260]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e073      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e06b      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b39      	ldr	r3, [pc, #228]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4936      	ldr	r1, [pc, #216]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f48:	f7fe fed8 	bl	8000cfc <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7fe fed4 	bl	8000cfc <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e053      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f78:	4b27      	ldr	r3, [pc, #156]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d210      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4922      	ldr	r1, [pc, #136]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e032      	b.n	800200e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb4:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	4916      	ldr	r1, [pc, #88]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fd2:	4b12      	ldr	r3, [pc, #72]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	490e      	ldr	r1, [pc, #56]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fe6:	f000 f821 	bl	800202c <HAL_RCC_GetSysClockFreq>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	091b      	lsrs	r3, r3, #4
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	490a      	ldr	r1, [pc, #40]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff8:	5ccb      	ldrb	r3, [r1, r3]
 8001ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffe:	4a09      	ldr	r2, [pc, #36]	; (8002024 <HAL_RCC_ClockConfig+0x1cc>)
 8002000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_RCC_ClockConfig+0x1d0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fd90 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40022000 	.word	0x40022000
 800201c:	40021000 	.word	0x40021000
 8002020:	0800a03c 	.word	0x0800a03c
 8002024:	20000000 	.word	0x20000000
 8002028:	20000004 	.word	0x20000004

0800202c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800202c:	b490      	push	{r4, r7}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002034:	1d3c      	adds	r4, r7, #4
 8002036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800203c:	f240 2301 	movw	r3, #513	; 0x201
 8002040:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	2300      	movs	r3, #0
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002056:	4b22      	ldr	r3, [pc, #136]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b04      	cmp	r3, #4
 8002064:	d002      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x40>
 8002066:	2b08      	cmp	r3, #8
 8002068:	d003      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x46>
 800206a:	e02d      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800206c:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800206e:	623b      	str	r3, [r7, #32]
      break;
 8002070:	e02d      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	0c9b      	lsrs	r3, r3, #18
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800207e:	4413      	add	r3, r2
 8002080:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002084:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d013      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002090:	4b13      	ldr	r3, [pc, #76]	; (80020e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	0c5b      	lsrs	r3, r3, #17
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800209e:	4413      	add	r3, r2
 80020a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020aa:	fb02 f203 	mul.w	r2, r2, r3
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
 80020b6:	e004      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020bc:	fb02 f303 	mul.w	r3, r2, r3
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	623b      	str	r3, [r7, #32]
      break;
 80020c6:	e002      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ca:	623b      	str	r3, [r7, #32]
      break;
 80020cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ce:	6a3b      	ldr	r3, [r7, #32]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3728      	adds	r7, #40	; 0x28
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc90      	pop	{r4, r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	08009f78 	.word	0x08009f78
 80020e0:	40021000 	.word	0x40021000
 80020e4:	007a1200 	.word	0x007a1200
 80020e8:	003d0900 	.word	0x003d0900

080020ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f0:	4b02      	ldr	r3, [pc, #8]	; (80020fc <HAL_RCC_GetHCLKFreq+0x10>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr
 80020fc:	20000000 	.word	0x20000000

08002100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002104:	f7ff fff2 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	0a1b      	lsrs	r3, r3, #8
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	4903      	ldr	r1, [pc, #12]	; (8002124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002116:	5ccb      	ldrb	r3, [r1, r3]
 8002118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800211c:	4618      	mov	r0, r3
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40021000 	.word	0x40021000
 8002124:	0800a04c 	.word	0x0800a04c

08002128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800212c:	f7ff ffde 	bl	80020ec <HAL_RCC_GetHCLKFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	0adb      	lsrs	r3, r3, #11
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4903      	ldr	r1, [pc, #12]	; (800214c <HAL_RCC_GetPCLK2Freq+0x24>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000
 800214c:	0800a04c 	.word	0x0800a04c

08002150 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	220f      	movs	r2, #15
 800215e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_RCC_GetClockConfig+0x58>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0203 	and.w	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <HAL_RCC_GetClockConfig+0x58>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_GetClockConfig+0x58>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_RCC_GetClockConfig+0x58>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	08db      	lsrs	r3, r3, #3
 800218a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_RCC_GetClockConfig+0x5c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0207 	and.w	r2, r3, #7
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40022000 	.word	0x40022000

080021b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <RCC_Delay+0x34>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0a      	ldr	r2, [pc, #40]	; (80021e8 <RCC_Delay+0x38>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0a5b      	lsrs	r3, r3, #9
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	fb02 f303 	mul.w	r3, r2, r3
 80021ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021cc:	bf00      	nop
  }
  while (Delay --);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1e5a      	subs	r2, r3, #1
 80021d2:	60fa      	str	r2, [r7, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f9      	bne.n	80021cc <RCC_Delay+0x1c>
}
 80021d8:	bf00      	nop
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	20000000 	.word	0x20000000
 80021e8:	10624dd3 	.word	0x10624dd3

080021ec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d07d      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220c:	4b4f      	ldr	r3, [pc, #316]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220e:	69db      	ldr	r3, [r3, #28]
 8002210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10d      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002218:	4b4c      	ldr	r3, [pc, #304]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	4a4b      	ldr	r2, [pc, #300]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002222:	61d3      	str	r3, [r2, #28]
 8002224:	4b49      	ldr	r3, [pc, #292]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002226:	69db      	ldr	r3, [r3, #28]
 8002228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002230:	2301      	movs	r3, #1
 8002232:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	4b46      	ldr	r3, [pc, #280]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223c:	2b00      	cmp	r3, #0
 800223e:	d118      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002240:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a42      	ldr	r2, [pc, #264]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224c:	f7fe fd56 	bl	8000cfc <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	e008      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002254:	f7fe fd52 	bl	8000cfc <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e06d      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002266:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002272:	4b36      	ldr	r3, [pc, #216]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d02e      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	d027      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002290:	4b2e      	ldr	r3, [pc, #184]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002298:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800229a:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800229c:	2201      	movs	r2, #1
 800229e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022a0:	4b2c      	ldr	r3, [pc, #176]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022a6:	4a29      	ldr	r2, [pc, #164]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d014      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b6:	f7fe fd21 	bl	8000cfc <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7fe fd1d 	bl	8000cfc <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e036      	b.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ee      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022e0:	4b1a      	ldr	r3, [pc, #104]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4917      	ldr	r1, [pc, #92]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d105      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	4a13      	ldr	r2, [pc, #76]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002302:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	490b      	ldr	r1, [pc, #44]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800232e:	4b07      	ldr	r3, [pc, #28]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4904      	ldr	r1, [pc, #16]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	40007000 	.word	0x40007000
 8002354:	42420440 	.word	0x42420440

08002358 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b08d      	sub	sp, #52	; 0x34
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002360:	4b5a      	ldr	r3, [pc, #360]	; (80024cc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002362:	f107 040c 	add.w	r4, r7, #12
 8002366:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002368:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800236c:	f240 2301 	movw	r3, #513	; 0x201
 8002370:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	2300      	movs	r3, #0
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
 8002382:	2300      	movs	r3, #0
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b10      	cmp	r3, #16
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b10      	cmp	r3, #16
 8002390:	f200 8091 	bhi.w	80024b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d04c      	beq.n	8002434 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d07c      	beq.n	800249a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80023a0:	e089      	b.n	80024b6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80023a2:	4b4b      	ldr	r3, [pc, #300]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80023a8:	4b49      	ldr	r3, [pc, #292]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8082 	beq.w	80024ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	0c9b      	lsrs	r3, r3, #18
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80023c2:	4413      	add	r3, r2
 80023c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023c8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d018      	beq.n	8002406 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023d4:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	0c5b      	lsrs	r3, r3, #17
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80023e2:	4413      	add	r3, r2
 80023e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80023f4:	4a37      	ldr	r2, [pc, #220]	; (80024d4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002404:	e004      	b.n	8002410 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	4a33      	ldr	r2, [pc, #204]	; (80024d8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002410:	4b2f      	ldr	r3, [pc, #188]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800241c:	d102      	bne.n	8002424 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002420:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002422:	e04a      	b.n	80024ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	4a2c      	ldr	r2, [pc, #176]	; (80024dc <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	085b      	lsrs	r3, r3, #1
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002432:	e042      	b.n	80024ba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002434:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002444:	d108      	bne.n	8002458 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8002450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002454:	62bb      	str	r3, [r7, #40]	; 0x28
 8002456:	e01f      	b.n	8002498 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002462:	d109      	bne.n	8002478 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002464:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8002470:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
 8002476:	e00f      	b.n	8002498 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800247e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002482:	d11c      	bne.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d016      	beq.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8002490:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002496:	e012      	b.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002498:	e011      	b.n	80024be <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800249a:	f7ff fe45 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 800249e:	4602      	mov	r2, r0
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	0b9b      	lsrs	r3, r3, #14
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	3301      	adds	r3, #1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024b4:	e004      	b.n	80024c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80024b6:	bf00      	nop
 80024b8:	e002      	b.n	80024c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80024ba:	bf00      	nop
 80024bc:	e000      	b.n	80024c0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80024be:	bf00      	nop
    }
  }
  return (frequency);
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3734      	adds	r7, #52	; 0x34
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	bf00      	nop
 80024cc:	08009f88 	.word	0x08009f88
 80024d0:	40021000 	.word	0x40021000
 80024d4:	007a1200 	.word	0x007a1200
 80024d8:	003d0900 	.word	0x003d0900
 80024dc:	aaaaaaab 	.word	0xaaaaaaab

080024e0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e084      	b.n	8002600 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7c5b      	ldrb	r3, [r3, #17]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7fe fa44 	bl	8000994 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 faf4 	bl	8002b00 <HAL_RTC_WaitForSynchro>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d004      	beq.n	8002528 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2204      	movs	r2, #4
 8002522:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e06b      	b.n	8002600 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fbad 	bl	8002c88 <RTC_EnterInitMode>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2204      	movs	r2, #4
 8002538:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e060      	b.n	8002600 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0207 	bic.w	r2, r2, #7
 800254c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002556:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <HAL_RTC_Init+0x128>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a2b      	ldr	r2, [pc, #172]	; (8002608 <HAL_RTC_Init+0x128>)
 800255c:	f023 0301 	bic.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002562:	4b29      	ldr	r3, [pc, #164]	; (8002608 <HAL_RTC_Init+0x128>)
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	4926      	ldr	r1, [pc, #152]	; (8002608 <HAL_RTC_Init+0x128>)
 8002570:	4313      	orrs	r3, r2
 8002572:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d003      	beq.n	8002586 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	e00e      	b.n	80025a4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002586:	2001      	movs	r0, #1
 8002588:	f7ff fee6 	bl	8002358 <HAL_RCCEx_GetPeriphCLKFreq>
 800258c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d104      	bne.n	800259e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2204      	movs	r2, #4
 8002598:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e030      	b.n	8002600 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 010f 	bic.w	r1, r3, #15
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	0c1a      	lsrs	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0c1b      	lsrs	r3, r3, #16
 80025c2:	041b      	lsls	r3, r3, #16
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	b291      	uxth	r1, r2
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6812      	ldr	r2, [r2, #0]
 80025cc:	430b      	orrs	r3, r1
 80025ce:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 fb81 	bl	8002cd8 <RTC_ExitInitMode>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2204      	movs	r2, #4
 80025e0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00c      	b.n	8002600 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80025fe:	2300      	movs	r3, #0
  }
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40006c00 	.word	0x40006c00

0800260c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	2300      	movs	r3, #0
 800261e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_RTC_SetTime+0x20>
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e080      	b.n	8002732 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	7c1b      	ldrb	r3, [r3, #16]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_RTC_SetTime+0x30>
 8002638:	2302      	movs	r3, #2
 800263a:	e07a      	b.n	8002732 <HAL_RTC_SetTime+0x126>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2202      	movs	r2, #2
 8002646:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d113      	bne.n	8002676 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002658:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	785b      	ldrb	r3, [r3, #1]
 8002660:	4619      	mov	r1, r3
 8002662:	460b      	mov	r3, r1
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a5b      	subs	r3, r3, r1
 8002668:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800266a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002670:	4413      	add	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	e01e      	b.n	80026b4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fb71 	bl	8002d62 <RTC_Bcd2ToByte>
 8002680:	4603      	mov	r3, r0
 8002682:	461a      	mov	r2, r3
 8002684:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002688:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	785b      	ldrb	r3, [r3, #1]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 fb66 	bl	8002d62 <RTC_Bcd2ToByte>
 8002696:	4603      	mov	r3, r0
 8002698:	461a      	mov	r2, r3
 800269a:	4613      	mov	r3, r2
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80026a2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	789b      	ldrb	r3, [r3, #2]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fb5a 	bl	8002d62 <RTC_Bcd2ToByte>
 80026ae:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80026b0:	4423      	add	r3, r4
 80026b2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80026b4:	6979      	ldr	r1, [r7, #20]
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fa7f 	bl	8002bba <RTC_WriteTimeCounter>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d007      	beq.n	80026d2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2204      	movs	r2, #4
 80026c6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e02f      	b.n	8002732 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0205 	bic.w	r2, r2, #5
 80026e0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fa90 	bl	8002c08 <RTC_ReadAlarmCounter>
 80026e8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f0:	d018      	beq.n	8002724 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d214      	bcs.n	8002724 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002700:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002704:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002706:	6939      	ldr	r1, [r7, #16]
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fa96 	bl	8002c3a <RTC_WriteAlarmCounter>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2204      	movs	r2, #4
 8002718:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e006      	b.n	8002732 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2201      	movs	r2, #1
 8002728:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002730:	2300      	movs	r3, #0
  }
}
 8002732:	4618      	mov	r0, r3
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}
	...

0800273c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	2300      	movs	r3, #0
 8002756:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <HAL_RTC_GetTime+0x28>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0b5      	b.n	80028d4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0ac      	b.n	80028d4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f9ed 	bl	8002b5a <RTC_ReadTimeCounter>
 8002780:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	4a55      	ldr	r2, [pc, #340]	; (80028dc <HAL_RTC_GetTime+0x1a0>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	0adb      	lsrs	r3, r3, #11
 800278c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4b52      	ldr	r3, [pc, #328]	; (80028dc <HAL_RTC_GetTime+0x1a0>)
 8002792:	fba3 1302 	umull	r1, r3, r3, r2
 8002796:	0adb      	lsrs	r3, r3, #11
 8002798:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	4a4f      	ldr	r2, [pc, #316]	; (80028e0 <HAL_RTC_GetTime+0x1a4>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4a4a      	ldr	r2, [pc, #296]	; (80028dc <HAL_RTC_GetTime+0x1a0>)
 80027b4:	fba2 1203 	umull	r1, r2, r2, r3
 80027b8:	0ad2      	lsrs	r2, r2, #11
 80027ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80027be:	fb01 f202 	mul.w	r2, r1, r2
 80027c2:	1a9a      	subs	r2, r3, r2
 80027c4:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <HAL_RTC_GetTime+0x1a4>)
 80027c6:	fba3 1302 	umull	r1, r3, r3, r2
 80027ca:	0959      	lsrs	r1, r3, #5
 80027cc:	460b      	mov	r3, r1
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a5b      	subs	r3, r3, r1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	1ad1      	subs	r1, r2, r3
 80027d6:	b2ca      	uxtb	r2, r1
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	2b17      	cmp	r3, #23
 80027e0:	d955      	bls.n	800288e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4a3f      	ldr	r2, [pc, #252]	; (80028e4 <HAL_RTC_GetTime+0x1a8>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80027ee:	6939      	ldr	r1, [r7, #16]
 80027f0:	4b3c      	ldr	r3, [pc, #240]	; (80028e4 <HAL_RTC_GetTime+0x1a8>)
 80027f2:	fba3 2301 	umull	r2, r3, r3, r1
 80027f6:	091a      	lsrs	r2, r3, #4
 80027f8:	4613      	mov	r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	4413      	add	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	1aca      	subs	r2, r1, r3
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 f9fd 	bl	8002c08 <RTC_ReadAlarmCounter>
 800280e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002816:	d008      	beq.n	800282a <HAL_RTC_GetTime+0xee>
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	429a      	cmp	r2, r3
 800281e:	d904      	bls.n	800282a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	e002      	b.n	8002830 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	4a2d      	ldr	r2, [pc, #180]	; (80028e8 <HAL_RTC_GetTime+0x1ac>)
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800283e:	69b9      	ldr	r1, [r7, #24]
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f9ba 	bl	8002bba <RTC_WriteTimeCounter>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e041      	b.n	80028d4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002856:	d00c      	beq.n	8002872 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4413      	add	r3, r2
 800285e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002860:	69f9      	ldr	r1, [r7, #28]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f9e9 	bl	8002c3a <RTC_WriteAlarmCounter>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e030      	b.n	80028d4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002872:	69f9      	ldr	r1, [r7, #28]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 f9e0 	bl	8002c3a <RTC_WriteAlarmCounter>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e027      	b.n	80028d4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002884:	6979      	ldr	r1, [r7, #20]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fa88 	bl	8002d9c <RTC_DateUpdate>
 800288c:	e003      	b.n	8002896 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d01a      	beq.n	80028d2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fa41 	bl	8002d28 <RTC_ByteToBcd2>
 80028a6:	4603      	mov	r3, r0
 80028a8:	461a      	mov	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	785b      	ldrb	r3, [r3, #1]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fa38 	bl	8002d28 <RTC_ByteToBcd2>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	789b      	ldrb	r3, [r3, #2]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fa2f 	bl	8002d28 <RTC_ByteToBcd2>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461a      	mov	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	91a2b3c5 	.word	0x91a2b3c5
 80028e0:	88888889 	.word	0x88888889
 80028e4:	aaaaaaab 	.word	0xaaaaaaab
 80028e8:	00015180 	.word	0x00015180

080028ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	2300      	movs	r3, #0
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	2300      	movs	r3, #0
 8002902:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_RTC_SetDate+0x24>
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e097      	b.n	8002a44 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	7c1b      	ldrb	r3, [r3, #16]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_RTC_SetDate+0x34>
 800291c:	2302      	movs	r3, #2
 800291e:	e091      	b.n	8002a44 <HAL_RTC_SetDate+0x158>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2202      	movs	r2, #2
 800292a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	78da      	ldrb	r2, [r3, #3]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	785a      	ldrb	r2, [r3, #1]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	789a      	ldrb	r2, [r3, #2]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	739a      	strb	r2, [r3, #14]
 800294a:	e01a      	b.n	8002982 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	78db      	ldrb	r3, [r3, #3]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fa06 	bl	8002d62 <RTC_Bcd2ToByte>
 8002956:	4603      	mov	r3, r0
 8002958:	461a      	mov	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	785b      	ldrb	r3, [r3, #1]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f9fd 	bl	8002d62 <RTC_Bcd2ToByte>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	789b      	ldrb	r3, [r3, #2]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 f9f4 	bl	8002d62 <RTC_Bcd2ToByte>
 800297a:	4603      	mov	r3, r0
 800297c:	461a      	mov	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	7bdb      	ldrb	r3, [r3, #15]
 8002986:	4618      	mov	r0, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	7b59      	ldrb	r1, [r3, #13]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	7b9b      	ldrb	r3, [r3, #14]
 8002990:	461a      	mov	r2, r3
 8002992:	f000 fadf 	bl	8002f54 <RTC_WeekDayNum>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	7b1a      	ldrb	r2, [r3, #12]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f8d7 	bl	8002b5a <RTC_ReadTimeCounter>
 80029ac:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	4a26      	ldr	r2, [pc, #152]	; (8002a4c <HAL_RTC_SetDate+0x160>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0adb      	lsrs	r3, r3, #11
 80029b8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b18      	cmp	r3, #24
 80029be:	d93a      	bls.n	8002a36 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	4a23      	ldr	r2, [pc, #140]	; (8002a50 <HAL_RTC_SetDate+0x164>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <HAL_RTC_SetDate+0x168>)
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80029d6:	69f9      	ldr	r1, [r7, #28]
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 f8ee 	bl	8002bba <RTC_WriteTimeCounter>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d007      	beq.n	80029f4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2204      	movs	r2, #4
 80029e8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e027      	b.n	8002a44 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f907 	bl	8002c08 <RTC_ReadAlarmCounter>
 80029fa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a02:	d018      	beq.n	8002a36 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d214      	bcs.n	8002a36 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002a12:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a16:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002a18:	69b9      	ldr	r1, [r7, #24]
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f90d 	bl	8002c3a <RTC_WriteAlarmCounter>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2204      	movs	r2, #4
 8002a2a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e006      	b.n	8002a44 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3720      	adds	r7, #32
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	91a2b3c5 	.word	0x91a2b3c5
 8002a50:	aaaaaaab 	.word	0xaaaaaaab
 8002a54:	00015180 	.word	0x00015180

08002a58 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	2100      	movs	r1, #0
 8002a6a:	460a      	mov	r2, r1
 8002a6c:	801a      	strh	r2, [r3, #0]
 8002a6e:	460a      	mov	r2, r1
 8002a70:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d002      	beq.n	8002a7e <HAL_RTC_GetDate+0x26>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e03a      	b.n	8002af8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	2200      	movs	r2, #0
 8002a88:	4619      	mov	r1, r3
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7ff fe56 	bl	800273c <HAL_RTC_GetTime>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e02e      	b.n	8002af8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	7b1a      	ldrb	r2, [r3, #12]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	7bda      	ldrb	r2, [r3, #15]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	7b5a      	ldrb	r2, [r3, #13]
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	7b9a      	ldrb	r2, [r3, #14]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01a      	beq.n	8002af6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	78db      	ldrb	r3, [r3, #3]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 f92f 	bl	8002d28 <RTC_ByteToBcd2>
 8002aca:	4603      	mov	r3, r0
 8002acc:	461a      	mov	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	785b      	ldrb	r3, [r3, #1]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 f926 	bl	8002d28 <RTC_ByteToBcd2>
 8002adc:	4603      	mov	r3, r0
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	789b      	ldrb	r3, [r3, #2]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 f91d 	bl	8002d28 <RTC_ByteToBcd2>
 8002aee:	4603      	mov	r3, r0
 8002af0:	461a      	mov	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e01d      	b.n	8002b52 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0208 	bic.w	r2, r2, #8
 8002b24:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002b26:	f7fe f8e9 	bl	8000cfc <HAL_GetTick>
 8002b2a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002b2c:	e009      	b.n	8002b42 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b2e:	f7fe f8e5 	bl	8000cfc <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b3c:	d901      	bls.n	8002b42 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e007      	b.n	8002b52 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ee      	beq.n	8002b2e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b087      	sub	sp, #28
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	827b      	strh	r3, [r7, #18]
 8002b66:	2300      	movs	r3, #0
 8002b68:	823b      	strh	r3, [r7, #16]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002b8a:	8a7a      	ldrh	r2, [r7, #18]
 8002b8c:	8a3b      	ldrh	r3, [r7, #16]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d008      	beq.n	8002ba4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002b92:	8a3b      	ldrh	r3, [r7, #16]
 8002b94:	041a      	lsls	r2, r3, #16
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	e004      	b.n	8002bae <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002ba4:	8a7b      	ldrh	r3, [r7, #18]
 8002ba6:	041a      	lsls	r2, r3, #16
 8002ba8:	89fb      	ldrh	r3, [r7, #14]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002bae:	697b      	ldr	r3, [r7, #20]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bc80      	pop	{r7}
 8002bb8:	4770      	bx	lr

08002bba <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f85d 	bl	8002c88 <RTC_EnterInitMode>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
 8002bd8:	e011      	b.n	8002bfe <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	0c12      	lsrs	r2, r2, #16
 8002be2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	b292      	uxth	r2, r2
 8002bec:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f872 	bl	8002cd8 <RTC_ExitInitMode>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3710      	adds	r7, #16
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	81fb      	strh	r3, [r7, #14]
 8002c14:	2300      	movs	r3, #0
 8002c16:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6a1b      	ldr	r3, [r3, #32]
 8002c1e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002c28:	89fb      	ldrh	r3, [r7, #14]
 8002c2a:	041a      	lsls	r2, r3, #16
 8002c2c:	89bb      	ldrh	r3, [r7, #12]
 8002c2e:	4313      	orrs	r3, r2
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr

08002c3a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f81d 	bl	8002c88 <RTC_EnterInitMode>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	e011      	b.n	8002c7e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	0c12      	lsrs	r2, r2, #16
 8002c62:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f832 	bl	8002cd8 <RTC_ExitInitMode>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002c94:	f7fe f832 	bl	8000cfc <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002c9a:	e009      	b.n	8002cb0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002c9c:	f7fe f82e 	bl	8000cfc <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002caa:	d901      	bls.n	8002cb0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e00f      	b.n	8002cd0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0ee      	beq.n	8002c9c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685a      	ldr	r2, [r3, #4]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0210 	orr.w	r2, r2, #16
 8002ccc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0210 	bic.w	r2, r2, #16
 8002cf2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002cf4:	f7fe f802 	bl	8000cfc <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002cfa:	e009      	b.n	8002d10 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002cfc:	f7fd fffe 	bl	8000cfc <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d0a:	d901      	bls.n	8002d10 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e007      	b.n	8002d20 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0ee      	beq.n	8002cfc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002d36:	e005      	b.n	8002d44 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	3b0a      	subs	r3, #10
 8002d42:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	2b09      	cmp	r3, #9
 8002d48:	d8f6      	bhi.n	8002d38 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	b2db      	uxtb	r3, r3
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr

08002d62 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b085      	sub	sp, #20
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	4603      	mov	r3, r0
 8002d6a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	b2db      	uxtb	r3, r3
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr

08002d9c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7bdb      	ldrb	r3, [r3, #15]
 8002dba:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	7b5b      	ldrb	r3, [r3, #13]
 8002dc0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7b9b      	ldrb	r3, [r3, #14]
 8002dc6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	e06f      	b.n	8002eae <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d011      	beq.n	8002df8 <RTC_DateUpdate+0x5c>
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b03      	cmp	r3, #3
 8002dd8:	d00e      	beq.n	8002df8 <RTC_DateUpdate+0x5c>
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d00b      	beq.n	8002df8 <RTC_DateUpdate+0x5c>
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b07      	cmp	r3, #7
 8002de4:	d008      	beq.n	8002df8 <RTC_DateUpdate+0x5c>
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d005      	beq.n	8002df8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	2b0a      	cmp	r3, #10
 8002df0:	d002      	beq.n	8002df8 <RTC_DateUpdate+0x5c>
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	2b0c      	cmp	r3, #12
 8002df6:	d117      	bne.n	8002e28 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b1e      	cmp	r3, #30
 8002dfc:	d803      	bhi.n	8002e06 <RTC_DateUpdate+0x6a>
      {
        day++;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3301      	adds	r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002e04:	e050      	b.n	8002ea8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	d005      	beq.n	8002e18 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002e12:	2301      	movs	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002e16:	e047      	b.n	8002ea8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
          year++;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3301      	adds	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002e26:	e03f      	b.n	8002ea8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d008      	beq.n	8002e40 <RTC_DateUpdate+0xa4>
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b06      	cmp	r3, #6
 8002e32:	d005      	beq.n	8002e40 <RTC_DateUpdate+0xa4>
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	2b09      	cmp	r3, #9
 8002e38:	d002      	beq.n	8002e40 <RTC_DateUpdate+0xa4>
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b0b      	cmp	r3, #11
 8002e3e:	d10c      	bne.n	8002e5a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2b1d      	cmp	r3, #29
 8002e44:	d803      	bhi.n	8002e4e <RTC_DateUpdate+0xb2>
      {
        day++;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002e4c:	e02c      	b.n	8002ea8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	3301      	adds	r3, #1
 8002e52:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002e54:	2301      	movs	r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002e58:	e026      	b.n	8002ea8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d123      	bne.n	8002ea8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b1b      	cmp	r3, #27
 8002e64:	d803      	bhi.n	8002e6e <RTC_DateUpdate+0xd2>
      {
        day++;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e01c      	b.n	8002ea8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2b1c      	cmp	r3, #28
 8002e72:	d111      	bne.n	8002e98 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 f839 	bl	8002ef0 <RTC_IsLeapYear>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <RTC_DateUpdate+0xf0>
        {
          day++;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3301      	adds	r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	e00d      	b.n	8002ea8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002e92:	2301      	movs	r3, #1
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	e007      	b.n	8002ea8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b1d      	cmp	r3, #29
 8002e9c:	d104      	bne.n	8002ea8 <RTC_DateUpdate+0x10c>
      {
        month++;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	60bb      	str	r3, [r7, #8]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d38b      	bcc.n	8002dce <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6978      	ldr	r0, [r7, #20]
 8002eda:	f000 f83b 	bl	8002f54 <RTC_WeekDayNum>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	731a      	strb	r2, [r3, #12]
}
 8002ee6:	bf00      	nop
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002efa:	88fb      	ldrh	r3, [r7, #6]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e01d      	b.n	8002f46 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <RTC_IsLeapYear+0x60>)
 8002f0e:	fba2 1203 	umull	r1, r2, r2, r3
 8002f12:	0952      	lsrs	r2, r2, #5
 8002f14:	2164      	movs	r1, #100	; 0x64
 8002f16:	fb01 f202 	mul.w	r2, r1, r2
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e00f      	b.n	8002f46 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	4a09      	ldr	r2, [pc, #36]	; (8002f50 <RTC_IsLeapYear+0x60>)
 8002f2a:	fba2 1203 	umull	r1, r2, r2, r3
 8002f2e:	09d2      	lsrs	r2, r2, #7
 8002f30:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002f34:	fb01 f202 	mul.w	r2, r1, r2
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002f44:	2300      	movs	r3, #0
  }
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	51eb851f 	.word	0x51eb851f

08002f54 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
 8002f60:	4613      	mov	r3, r2
 8002f62:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002f72:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d82d      	bhi.n	8002fd6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	4a2c      	ldr	r2, [pc, #176]	; (8003038 <RTC_WeekDayNum+0xe4>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	085a      	lsrs	r2, r3, #1
 8002f8e:	78bb      	ldrb	r3, [r7, #2]
 8002f90:	441a      	add	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	441a      	add	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	441a      	add	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	4926      	ldr	r1, [pc, #152]	; (800303c <RTC_WeekDayNum+0xe8>)
 8002fa4:	fba1 1303 	umull	r1, r3, r1, r3
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	1ad2      	subs	r2, r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	4922      	ldr	r1, [pc, #136]	; (800303c <RTC_WeekDayNum+0xe8>)
 8002fb2:	fba1 1303 	umull	r1, r3, r1, r3
 8002fb6:	09db      	lsrs	r3, r3, #7
 8002fb8:	4413      	add	r3, r2
 8002fba:	1d1a      	adds	r2, r3, #4
 8002fbc:	4b20      	ldr	r3, [pc, #128]	; (8003040 <RTC_WeekDayNum+0xec>)
 8002fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc2:	1ad1      	subs	r1, r2, r3
 8002fc4:	0849      	lsrs	r1, r1, #1
 8002fc6:	440b      	add	r3, r1
 8002fc8:	0899      	lsrs	r1, r3, #2
 8002fca:	460b      	mov	r3, r1
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	1a5b      	subs	r3, r3, r1
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	e029      	b.n	800302a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	4a15      	ldr	r2, [pc, #84]	; (8003038 <RTC_WeekDayNum+0xe4>)
 8002fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe8:	085a      	lsrs	r2, r3, #1
 8002fea:	78bb      	ldrb	r3, [r7, #2]
 8002fec:	441a      	add	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	441a      	add	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	089b      	lsrs	r3, r3, #2
 8002ff6:	441a      	add	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	4910      	ldr	r1, [pc, #64]	; (800303c <RTC_WeekDayNum+0xe8>)
 8002ffc:	fba1 1303 	umull	r1, r3, r1, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	1ad2      	subs	r2, r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	490d      	ldr	r1, [pc, #52]	; (800303c <RTC_WeekDayNum+0xe8>)
 8003008:	fba1 1303 	umull	r1, r3, r1, r3
 800300c:	09db      	lsrs	r3, r3, #7
 800300e:	4413      	add	r3, r2
 8003010:	1c9a      	adds	r2, r3, #2
 8003012:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <RTC_WeekDayNum+0xec>)
 8003014:	fba3 1302 	umull	r1, r3, r3, r2
 8003018:	1ad1      	subs	r1, r2, r3
 800301a:	0849      	lsrs	r1, r1, #1
 800301c:	440b      	add	r3, r1
 800301e:	0899      	lsrs	r1, r3, #2
 8003020:	460b      	mov	r3, r1
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	1a5b      	subs	r3, r3, r1
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	b2db      	uxtb	r3, r3
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	38e38e39 	.word	0x38e38e39
 800303c:	51eb851f 	.word	0x51eb851f
 8003040:	24924925 	.word	0x24924925

08003044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e041      	b.n	80030da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f839 	bl	80030e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	4619      	mov	r1, r3
 8003082:	4610      	mov	r0, r2
 8003084:	f000 f9b4 	bl	80033f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d001      	beq.n	800310c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e03a      	b.n	8003182 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68da      	ldr	r2, [r3, #12]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_TIM_Base_Start_IT+0x98>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00e      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x58>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003136:	d009      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x58>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_TIM_Base_Start_IT+0x9c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d004      	beq.n	800314c <HAL_TIM_Base_Start_IT+0x58>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a13      	ldr	r2, [pc, #76]	; (8003194 <HAL_TIM_Base_Start_IT+0xa0>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d111      	bne.n	8003170 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2b06      	cmp	r3, #6
 800315c:	d010      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f042 0201 	orr.w	r2, r2, #1
 800316c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316e:	e007      	b.n	8003180 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800

08003198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d122      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d11b      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0202 	mvn.w	r2, #2
 80031c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f8ed 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 80031e0:	e005      	b.n	80031ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f8e0 	bl	80033a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f8ef 	bl	80033cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d122      	bne.n	8003248 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d11b      	bne.n	8003248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0204 	mvn.w	r2, #4
 8003218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f8c3 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 8003234:	e005      	b.n	8003242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f8b6 	bl	80033a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f8c5 	bl	80033cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b08      	cmp	r3, #8
 8003254:	d122      	bne.n	800329c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f003 0308 	and.w	r3, r3, #8
 8003260:	2b08      	cmp	r3, #8
 8003262:	d11b      	bne.n	800329c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f06f 0208 	mvn.w	r2, #8
 800326c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2204      	movs	r2, #4
 8003272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f899 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 8003288:	e005      	b.n	8003296 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f88c 	bl	80033a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f89b 	bl	80033cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d122      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d11b      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0210 	mvn.w	r2, #16
 80032c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2208      	movs	r2, #8
 80032c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f86f 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
 80032dc:	e005      	b.n	80032ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f862 	bl	80033a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f871 	bl	80033cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d10e      	bne.n	800331c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0201 	mvn.w	r2, #1
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fd fa8c 	bl	8000834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003326:	2b80      	cmp	r3, #128	; 0x80
 8003328:	d10e      	bne.n	8003348 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	2b80      	cmp	r3, #128	; 0x80
 8003336:	d107      	bne.n	8003348 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 f8bf 	bl	80034c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	2b40      	cmp	r3, #64	; 0x40
 8003354:	d10e      	bne.n	8003374 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b40      	cmp	r3, #64	; 0x40
 8003362:	d107      	bne.n	8003374 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800336c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f835 	bl	80033de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b20      	cmp	r3, #32
 8003380:	d10e      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f003 0320 	and.w	r3, r3, #32
 800338c:	2b20      	cmp	r3, #32
 800338e:	d107      	bne.n	80033a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f06f 0220 	mvn.w	r2, #32
 8003398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f88a 	bl	80034b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033a0:	bf00      	nop
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr

080033cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr

080033de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a29      	ldr	r2, [pc, #164]	; (80034a8 <TIM_Base_SetConfig+0xb8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d00b      	beq.n	8003420 <TIM_Base_SetConfig+0x30>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340e:	d007      	beq.n	8003420 <TIM_Base_SetConfig+0x30>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a26      	ldr	r2, [pc, #152]	; (80034ac <TIM_Base_SetConfig+0xbc>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_Base_SetConfig+0x30>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <TIM_Base_SetConfig+0xc0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d108      	bne.n	8003432 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a1c      	ldr	r2, [pc, #112]	; (80034a8 <TIM_Base_SetConfig+0xb8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00b      	beq.n	8003452 <TIM_Base_SetConfig+0x62>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003440:	d007      	beq.n	8003452 <TIM_Base_SetConfig+0x62>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a19      	ldr	r2, [pc, #100]	; (80034ac <TIM_Base_SetConfig+0xbc>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d003      	beq.n	8003452 <TIM_Base_SetConfig+0x62>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <TIM_Base_SetConfig+0xc0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d108      	bne.n	8003464 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a07      	ldr	r2, [pc, #28]	; (80034a8 <TIM_Base_SetConfig+0xb8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d103      	bne.n	8003498 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	615a      	str	r2, [r3, #20]
}
 800349e:	bf00      	nop
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800

080034b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e03f      	b.n	800356a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fd fa6c 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2224      	movs	r2, #36	; 0x24
 8003508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800351a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fc21 	bl	8003d64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003540:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003550:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b20      	cmp	r3, #32
 800358c:	d153      	bne.n	8003636 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_UART_Transmit_DMA+0x26>
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e04c      	b.n	8003638 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_UART_Transmit_DMA+0x38>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e045      	b.n	8003638 <HAL_UART_Transmit_DMA+0xc4>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	88fa      	ldrh	r2, [r7, #6]
 80035c4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2221      	movs	r2, #33	; 0x21
 80035d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	4a19      	ldr	r2, [pc, #100]	; (8003640 <HAL_UART_Transmit_DMA+0xcc>)
 80035da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	4a18      	ldr	r2, [pc, #96]	; (8003644 <HAL_UART_Transmit_DMA+0xd0>)
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	4a17      	ldr	r2, [pc, #92]	; (8003648 <HAL_UART_Transmit_DMA+0xd4>)
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	2200      	movs	r2, #0
 80035f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80035f4:	f107 0308 	add.w	r3, r7, #8
 80035f8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	6819      	ldr	r1, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3304      	adds	r3, #4
 8003608:	461a      	mov	r2, r3
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	f7fd fdda 	bl	80011c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003618:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003630:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	08003983 	.word	0x08003983
 8003644:	080039d5 	.word	0x080039d5
 8003648:	08003a75 	.word	0x08003a75

0800364c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	4613      	mov	r3, r2
 8003658:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b20      	cmp	r3, #32
 8003664:	d166      	bne.n	8003734 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <HAL_UART_Receive_DMA+0x26>
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e05f      	b.n	8003736 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_UART_Receive_DMA+0x38>
 8003680:	2302      	movs	r3, #2
 8003682:	e058      	b.n	8003736 <HAL_UART_Receive_DMA+0xea>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	88fa      	ldrh	r2, [r7, #6]
 8003696:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2222      	movs	r2, #34	; 0x22
 80036a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036aa:	4a25      	ldr	r2, [pc, #148]	; (8003740 <HAL_UART_Receive_DMA+0xf4>)
 80036ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b2:	4a24      	ldr	r2, [pc, #144]	; (8003744 <HAL_UART_Receive_DMA+0xf8>)
 80036b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ba:	4a23      	ldr	r2, [pc, #140]	; (8003748 <HAL_UART_Receive_DMA+0xfc>)
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c2:	2200      	movs	r2, #0
 80036c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80036c6:	f107 0308 	add.w	r3, r7, #8
 80036ca:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3304      	adds	r3, #4
 80036d6:	4619      	mov	r1, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	f7fd fd71 	bl	80011c4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80036e2:	2300      	movs	r3, #0
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	e000      	b.n	8003736 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003734:	2302      	movs	r3, #2
  }
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	080039f1 	.word	0x080039f1
 8003744:	08003a59 	.word	0x08003a59
 8003748:	08003a75 	.word	0x08003a75

0800374c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800376c:	2300      	movs	r3, #0
 800376e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10d      	bne.n	800379e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_UART_IRQHandler+0x52>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fa63 	bl	8003c62 <UART_Receive_IT>
      return;
 800379c:	e0d0      	b.n	8003940 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80b0 	beq.w	8003906 <HAL_UART_IRQHandler+0x1ba>
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <HAL_UART_IRQHandler+0x70>
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80a5 	beq.w	8003906 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00a      	beq.n	80037dc <HAL_UART_IRQHandler+0x90>
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d4:	f043 0201 	orr.w	r2, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_UART_IRQHandler+0xb0>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f4:	f043 0202 	orr.w	r2, r3, #2
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_UART_IRQHandler+0xd0>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003814:	f043 0204 	orr.w	r2, r3, #4
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00f      	beq.n	8003846 <HAL_UART_IRQHandler+0xfa>
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <HAL_UART_IRQHandler+0xee>
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	f043 0208 	orr.w	r2, r3, #8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d077      	beq.n	800393e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d007      	beq.n	8003868 <HAL_UART_IRQHandler+0x11c>
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f9fd 	bl	8003c62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf14      	ite	ne
 8003876:	2301      	movne	r3, #1
 8003878:	2300      	moveq	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_UART_IRQHandler+0x144>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d031      	beq.n	80038f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f94e 	bl	8003b32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d023      	beq.n	80038ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d013      	beq.n	80038e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c0:	4a21      	ldr	r2, [pc, #132]	; (8003948 <HAL_UART_IRQHandler+0x1fc>)
 80038c2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd fcdb 	bl	8001284 <HAL_DMA_Abort_IT>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d016      	beq.n	8003902 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038de:	4610      	mov	r0, r2
 80038e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e2:	e00e      	b.n	8003902 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f843 	bl	8003970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ea:	e00a      	b.n	8003902 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f83f 	bl	8003970 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f2:	e006      	b.n	8003902 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f83b 	bl	8003970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003900:	e01d      	b.n	800393e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003902:	bf00      	nop
    return;
 8003904:	e01b      	b.n	800393e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_UART_IRQHandler+0x1d6>
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f93a 	bl	8003b94 <UART_Transmit_IT>
    return;
 8003920:	e00e      	b.n	8003940 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d009      	beq.n	8003940 <HAL_UART_IRQHandler+0x1f4>
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d004      	beq.n	8003940 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f97b 	bl	8003c32 <UART_EndTransmit_IT>
    return;
 800393c:	e000      	b.n	8003940 <HAL_UART_IRQHandler+0x1f4>
    return;
 800393e:	bf00      	nop
  }
}
 8003940:	3720      	adds	r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	08003b6d 	.word	0x08003b6d

0800394c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d113      	bne.n	80039c6 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039b2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039c2:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039c4:	e002      	b.n	80039cc <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7fc fbfc 	bl	80001c4 <HAL_UART_TxCpltCallback>
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f7ff ffb2 	bl	800394c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d11e      	bne.n	8003a4a <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a20:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695a      	ldr	r2, [r3, #20]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a40:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f7fc fbca 	bl	80001e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a50:	bf00      	nop
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f7ff ff79 	bl	800395e <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a6c:	bf00      	nop
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b21      	cmp	r3, #33	; 0x21
 8003aa6:	d108      	bne.n	8003aba <UART_DMAError+0x46>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003ab4:	68b8      	ldr	r0, [r7, #8]
 8003ab6:	f000 f827 	bl	8003b08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b22      	cmp	r3, #34	; 0x22
 8003ada:	d108      	bne.n	8003aee <UART_DMAError+0x7a>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003ae8:	68b8      	ldr	r0, [r7, #8]
 8003aea:	f000 f822 	bl	8003b32 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	f043 0210 	orr.w	r2, r3, #16
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003afa:	68b8      	ldr	r0, [r7, #8]
 8003afc:	f7ff ff38 	bl	8003970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003b1e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b48:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695a      	ldr	r2, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f7ff fef2 	bl	8003970 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b8c:	bf00      	nop
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b21      	cmp	r3, #33	; 0x21
 8003ba6:	d13e      	bne.n	8003c26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb0:	d114      	bne.n	8003bdc <UART_Transmit_IT+0x48>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d110      	bne.n	8003bdc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	1c9a      	adds	r2, r3, #2
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	621a      	str	r2, [r3, #32]
 8003bda:	e008      	b.n	8003bee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	1c59      	adds	r1, r3, #1
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6211      	str	r1, [r2, #32]
 8003be6:	781a      	ldrb	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10f      	bne.n	8003c22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c22:	2300      	movs	r3, #0
 8003c24:	e000      	b.n	8003c28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
  }
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr

08003c32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b082      	sub	sp, #8
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7fc fab6 	bl	80001c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b22      	cmp	r3, #34	; 0x22
 8003c74:	d170      	bne.n	8003d58 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c7e:	d117      	bne.n	8003cb0 <UART_Receive_IT+0x4e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d113      	bne.n	8003cb0 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	1c9a      	adds	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	629a      	str	r2, [r3, #40]	; 0x28
 8003cae:	e026      	b.n	8003cfe <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc2:	d007      	beq.n	8003cd4 <UART_Receive_IT+0x72>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <UART_Receive_IT+0x80>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d106      	bne.n	8003ce2 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	e008      	b.n	8003cf4 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3b01      	subs	r3, #1
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d120      	bne.n	8003d54 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0220 	bic.w	r2, r2, #32
 8003d20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0201 	bic.w	r2, r2, #1
 8003d40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fc fa4a 	bl	80001e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	e002      	b.n	8003d5a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003d54:	2300      	movs	r3, #0
 8003d56:	e000      	b.n	8003d5a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003d58:	2302      	movs	r3, #2
  }
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d9e:	f023 030c 	bic.w	r3, r3, #12
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	430b      	orrs	r3, r1
 8003daa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699a      	ldr	r2, [r3, #24]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2c      	ldr	r2, [pc, #176]	; (8003e78 <UART_SetConfig+0x114>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d103      	bne.n	8003dd4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003dcc:	f7fe f9ac 	bl	8002128 <HAL_RCC_GetPCLK2Freq>
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	e002      	b.n	8003dda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003dd4:	f7fe f994 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8003dd8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	009a      	lsls	r2, r3, #2
 8003de4:	441a      	add	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	4a22      	ldr	r2, [pc, #136]	; (8003e7c <UART_SetConfig+0x118>)
 8003df2:	fba2 2303 	umull	r2, r3, r2, r3
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	0119      	lsls	r1, r3, #4
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009a      	lsls	r2, r3, #2
 8003e04:	441a      	add	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <UART_SetConfig+0x118>)
 8003e12:	fba3 0302 	umull	r0, r3, r3, r2
 8003e16:	095b      	lsrs	r3, r3, #5
 8003e18:	2064      	movs	r0, #100	; 0x64
 8003e1a:	fb00 f303 	mul.w	r3, r0, r3
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	3332      	adds	r3, #50	; 0x32
 8003e24:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <UART_SetConfig+0x118>)
 8003e26:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e30:	4419      	add	r1, r3
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009a      	lsls	r2, r3, #2
 8003e3c:	441a      	add	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <UART_SetConfig+0x118>)
 8003e4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	2064      	movs	r0, #100	; 0x64
 8003e52:	fb00 f303 	mul.w	r3, r0, r3
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	3332      	adds	r3, #50	; 0x32
 8003e5c:	4a07      	ldr	r2, [pc, #28]	; (8003e7c <UART_SetConfig+0x118>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	f003 020f 	and.w	r2, r3, #15
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40013800 	.word	0x40013800
 8003e7c:	51eb851f 	.word	0x51eb851f

08003e80 <fill_line>:
uint8_t PositionState;
uint8_t Desktop;

// Функция для заполнения строки в массив.
void fill_line (char *line, char *mas)
{
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for(i=0; i<strlen(line); i++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	73fb      	strb	r3, [r7, #15]
 8003e8e:	e00a      	b.n	8003ea6 <fill_line+0x26>
	{
		mas[i]=line[i];
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	441a      	add	r2, r3
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	6839      	ldr	r1, [r7, #0]
 8003e9a:	440b      	add	r3, r1
 8003e9c:	7812      	ldrb	r2, [r2, #0]
 8003e9e:	701a      	strb	r2, [r3, #0]
	for(i=0; i<strlen(line); i++)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
 8003ea6:	7bfc      	ldrb	r4, [r7, #15]
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f7fc f951 	bl	8000150 <strlen>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	429c      	cmp	r4, r3
 8003eb2:	d3ed      	bcc.n	8003e90 <fill_line+0x10>
	}

}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd90      	pop	{r4, r7, pc}
	...

08003ec0 <menu_item_create>:


// Функция создания новой единицы в меню.
void menu_item_create (char *item_name, uint8_t number, uint8_t Up, uint8_t Down, uint8_t Next, uint8_t Previous)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	4608      	mov	r0, r1
 8003eca:	4611      	mov	r1, r2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	4603      	mov	r3, r0
 8003ed0:	70fb      	strb	r3, [r7, #3]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	70bb      	strb	r3, [r7, #2]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	707b      	strb	r3, [r7, #1]
	MenuItem[number].ItemState = STATE_ON;
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	4a21      	ldr	r2, [pc, #132]	; (8003f64 <menu_item_create+0xa4>)
 8003ede:	2116      	movs	r1, #22
 8003ee0:	fb01 f303 	mul.w	r3, r1, r3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	701a      	strb	r2, [r3, #0]
	MenuItem[number].Number = number;
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	4a1d      	ldr	r2, [pc, #116]	; (8003f64 <menu_item_create+0xa4>)
 8003eee:	2116      	movs	r1, #22
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3311      	adds	r3, #17
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	701a      	strb	r2, [r3, #0]
	MenuItem[number].Up = Up;
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	4a19      	ldr	r2, [pc, #100]	; (8003f64 <menu_item_create+0xa4>)
 8003f00:	2116      	movs	r1, #22
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	4413      	add	r3, r2
 8003f08:	3312      	adds	r3, #18
 8003f0a:	78ba      	ldrb	r2, [r7, #2]
 8003f0c:	701a      	strb	r2, [r3, #0]
	MenuItem[number].Down = Down;
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <menu_item_create+0xa4>)
 8003f12:	2116      	movs	r1, #22
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	3313      	adds	r3, #19
 8003f1c:	787a      	ldrb	r2, [r7, #1]
 8003f1e:	701a      	strb	r2, [r3, #0]
	MenuItem[number].Next = Next;
 8003f20:	78fb      	ldrb	r3, [r7, #3]
 8003f22:	4a10      	ldr	r2, [pc, #64]	; (8003f64 <menu_item_create+0xa4>)
 8003f24:	2116      	movs	r1, #22
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3314      	adds	r3, #20
 8003f2e:	7c3a      	ldrb	r2, [r7, #16]
 8003f30:	701a      	strb	r2, [r3, #0]
	MenuItem[number].Previous = Previous;
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <menu_item_create+0xa4>)
 8003f36:	2116      	movs	r1, #22
 8003f38:	fb01 f303 	mul.w	r3, r1, r3
 8003f3c:	4413      	add	r3, r2
 8003f3e:	3315      	adds	r3, #21
 8003f40:	7d3a      	ldrb	r2, [r7, #20]
 8003f42:	701a      	strb	r2, [r3, #0]
	fill_line(item_name, MenuItem[number].NameItem); // заполняем массив с именем строкой.
 8003f44:	78fb      	ldrb	r3, [r7, #3]
 8003f46:	2216      	movs	r2, #22
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	4a05      	ldr	r2, [pc, #20]	; (8003f64 <menu_item_create+0xa4>)
 8003f4e:	4413      	add	r3, r2
 8003f50:	3301      	adds	r3, #1
 8003f52:	4619      	mov	r1, r3
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff93 	bl	8003e80 <fill_line>

}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20002a08 	.word	0x20002a08

08003f68 <menu_ini>:

void menu_ini (void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af02      	add	r7, sp, #8
	menu_item_create("Settings",0, 0,7,1,0); // создаем единицу меню
 8003f6e:	2300      	movs	r3, #0
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	2301      	movs	r3, #1
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	2307      	movs	r3, #7
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	4855      	ldr	r0, [pc, #340]	; (80040d4 <menu_ini+0x16c>)
 8003f7e:	f7ff ff9f 	bl	8003ec0 <menu_item_create>
	menu_item_create("Time and date",1, 1,2,12,0);
 8003f82:	2300      	movs	r3, #0
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	230c      	movs	r3, #12
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	2101      	movs	r1, #1
 8003f90:	4851      	ldr	r0, [pc, #324]	; (80040d8 <menu_ini+0x170>)
 8003f92:	f7ff ff95 	bl	8003ec0 <menu_item_create>
	menu_item_create("Desktop",2, 1,2,3,0);
 8003f96:	2300      	movs	r3, #0
 8003f98:	9301      	str	r3, [sp, #4]
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	484d      	ldr	r0, [pc, #308]	; (80040dc <menu_ini+0x174>)
 8003fa6:	f7ff ff8b 	bl	8003ec0 <menu_item_create>
	menu_item_create("Time",3, 3,4,15,2);
 8003faa:	2302      	movs	r3, #2
 8003fac:	9301      	str	r3, [sp, #4]
 8003fae:	230f      	movs	r3, #15
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	2103      	movs	r1, #3
 8003fb8:	4849      	ldr	r0, [pc, #292]	; (80040e0 <menu_ini+0x178>)
 8003fba:	f7ff ff81 	bl	8003ec0 <menu_item_create>
	menu_item_create("Date",4, 3,5,16,2);
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	2310      	movs	r3, #16
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	2305      	movs	r3, #5
 8003fc8:	2203      	movs	r2, #3
 8003fca:	2104      	movs	r1, #4
 8003fcc:	4845      	ldr	r0, [pc, #276]	; (80040e4 <menu_ini+0x17c>)
 8003fce:	f7ff ff77 	bl	8003ec0 <menu_item_create>
	menu_item_create("Sensor",5, 4,5,5,2);
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	2305      	movs	r3, #5
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2305      	movs	r3, #5
 8003fdc:	2204      	movs	r2, #4
 8003fde:	2105      	movs	r1, #5
 8003fe0:	4841      	ldr	r0, [pc, #260]	; (80040e8 <menu_ini+0x180>)
 8003fe2:	f7ff ff6d 	bl	8003ec0 <menu_item_create>
	menu_item_create("",6, 6,6,6,12);
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	9301      	str	r3, [sp, #4]
 8003fea:	2306      	movs	r3, #6
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	2306      	movs	r3, #6
 8003ff0:	2206      	movs	r2, #6
 8003ff2:	2106      	movs	r1, #6
 8003ff4:	483d      	ldr	r0, [pc, #244]	; (80040ec <menu_ini+0x184>)
 8003ff6:	f7ff ff63 	bl	8003ec0 <menu_item_create>
	menu_item_create("Control",7, 0,7,8,7);
 8003ffa:	2307      	movs	r3, #7
 8003ffc:	9301      	str	r3, [sp, #4]
 8003ffe:	2308      	movs	r3, #8
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	2307      	movs	r3, #7
 8004004:	2200      	movs	r2, #0
 8004006:	2107      	movs	r1, #7
 8004008:	4839      	ldr	r0, [pc, #228]	; (80040f0 <menu_ini+0x188>)
 800400a:	f7ff ff59 	bl	8003ec0 <menu_item_create>
	menu_item_create("Relay1",8, 8,9,8,7);
 800400e:	2307      	movs	r3, #7
 8004010:	9301      	str	r3, [sp, #4]
 8004012:	2308      	movs	r3, #8
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2309      	movs	r3, #9
 8004018:	2208      	movs	r2, #8
 800401a:	2108      	movs	r1, #8
 800401c:	4835      	ldr	r0, [pc, #212]	; (80040f4 <menu_ini+0x18c>)
 800401e:	f7ff ff4f 	bl	8003ec0 <menu_item_create>
	menu_item_create("Relay2",9, 8,10,9,7);
 8004022:	2307      	movs	r3, #7
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	2309      	movs	r3, #9
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	230a      	movs	r3, #10
 800402c:	2208      	movs	r2, #8
 800402e:	2109      	movs	r1, #9
 8004030:	4831      	ldr	r0, [pc, #196]	; (80040f8 <menu_ini+0x190>)
 8004032:	f7ff ff45 	bl	8003ec0 <menu_item_create>
	menu_item_create("Relay3",10, 9,11,10,7);
 8004036:	2307      	movs	r3, #7
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	230a      	movs	r3, #10
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	230b      	movs	r3, #11
 8004040:	2209      	movs	r2, #9
 8004042:	210a      	movs	r1, #10
 8004044:	482d      	ldr	r0, [pc, #180]	; (80040fc <menu_ini+0x194>)
 8004046:	f7ff ff3b 	bl	8003ec0 <menu_item_create>
	menu_item_create("Relay4",11, 10,11,11,7);
 800404a:	2307      	movs	r3, #7
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	230b      	movs	r3, #11
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	230b      	movs	r3, #11
 8004054:	220a      	movs	r2, #10
 8004056:	210b      	movs	r1, #11
 8004058:	4829      	ldr	r0, [pc, #164]	; (8004100 <menu_ini+0x198>)
 800405a:	f7ff ff31 	bl	8003ec0 <menu_item_create>
	menu_item_create("time setting",12, 12,13,6,1);
 800405e:	2301      	movs	r3, #1
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	2306      	movs	r3, #6
 8004064:	9300      	str	r3, [sp, #0]
 8004066:	230d      	movs	r3, #13
 8004068:	220c      	movs	r2, #12
 800406a:	210c      	movs	r1, #12
 800406c:	4825      	ldr	r0, [pc, #148]	; (8004104 <menu_ini+0x19c>)
 800406e:	f7ff ff27 	bl	8003ec0 <menu_item_create>
	menu_item_create("date setting",13, 12,13,14,1);
 8004072:	2301      	movs	r3, #1
 8004074:	9301      	str	r3, [sp, #4]
 8004076:	230e      	movs	r3, #14
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	230d      	movs	r3, #13
 800407c:	220c      	movs	r2, #12
 800407e:	210d      	movs	r1, #13
 8004080:	4821      	ldr	r0, [pc, #132]	; (8004108 <menu_ini+0x1a0>)
 8004082:	f7ff ff1d 	bl	8003ec0 <menu_item_create>
	menu_item_create("",14, 14,14,14,13);
 8004086:	230d      	movs	r3, #13
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	230e      	movs	r3, #14
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	230e      	movs	r3, #14
 8004090:	220e      	movs	r2, #14
 8004092:	210e      	movs	r1, #14
 8004094:	4815      	ldr	r0, [pc, #84]	; (80040ec <menu_ini+0x184>)
 8004096:	f7ff ff13 	bl	8003ec0 <menu_item_create>
	menu_item_create("",15, 15,15,15,3);
 800409a:	2303      	movs	r3, #3
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	230f      	movs	r3, #15
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	230f      	movs	r3, #15
 80040a4:	220f      	movs	r2, #15
 80040a6:	210f      	movs	r1, #15
 80040a8:	4810      	ldr	r0, [pc, #64]	; (80040ec <menu_ini+0x184>)
 80040aa:	f7ff ff09 	bl	8003ec0 <menu_item_create>
	menu_item_create("",16, 16,16,16,4);
 80040ae:	2304      	movs	r3, #4
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	2310      	movs	r3, #16
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	2310      	movs	r3, #16
 80040b8:	2210      	movs	r2, #16
 80040ba:	2110      	movs	r1, #16
 80040bc:	480b      	ldr	r0, [pc, #44]	; (80040ec <menu_ini+0x184>)
 80040be:	f7ff feff 	bl	8003ec0 <menu_item_create>

	PositionState = 0;
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <menu_ini+0x1a4>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
	Desktop = DESKTOP_ON;
 80040c8:	4b11      	ldr	r3, [pc, #68]	; (8004110 <menu_ini+0x1a8>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	701a      	strb	r2, [r3, #0]
}
 80040ce:	bf00      	nop
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	08009f98 	.word	0x08009f98
 80040d8:	08009fa4 	.word	0x08009fa4
 80040dc:	08009fb4 	.word	0x08009fb4
 80040e0:	08009fbc 	.word	0x08009fbc
 80040e4:	08009fc4 	.word	0x08009fc4
 80040e8:	08009fcc 	.word	0x08009fcc
 80040ec:	08009fd4 	.word	0x08009fd4
 80040f0:	08009fd8 	.word	0x08009fd8
 80040f4:	08009fe0 	.word	0x08009fe0
 80040f8:	08009fe8 	.word	0x08009fe8
 80040fc:	08009ff0 	.word	0x08009ff0
 8004100:	08009ff8 	.word	0x08009ff8
 8004104:	0800a000 	.word	0x0800a000
 8004108:	0800a010 	.word	0x0800a010
 800410c:	20002a04 	.word	0x20002a04
 8004110:	20002a05 	.word	0x20002a05

08004114 <write_operation>:




void write_operation (uint8_t rs_bit, uint8_t data)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	460a      	mov	r2, r1
 800411e:	71fb      	strb	r3, [r7, #7]
 8004120:	4613      	mov	r3, r2
 8004122:	71bb      	strb	r3, [r7, #6]
	RW_RESET;
 8004124:	2200      	movs	r2, #0
 8004126:	2104      	movs	r1, #4
 8004128:	4863      	ldr	r0, [pc, #396]	; (80042b8 <write_operation+0x1a4>)
 800412a:	f7fd fbf0 	bl	800190e <HAL_GPIO_WritePin>
	if(rs_bit == INSTRUCTION_BIT) {RS_RESET;}
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <write_operation+0x2c>
 8004134:	2200      	movs	r2, #0
 8004136:	2102      	movs	r1, #2
 8004138:	485f      	ldr	r0, [pc, #380]	; (80042b8 <write_operation+0x1a4>)
 800413a:	f7fd fbe8 	bl	800190e <HAL_GPIO_WritePin>
 800413e:	e004      	b.n	800414a <write_operation+0x36>
	else {RS_SET;}
 8004140:	2201      	movs	r2, #1
 8004142:	2102      	movs	r1, #2
 8004144:	485c      	ldr	r0, [pc, #368]	; (80042b8 <write_operation+0x1a4>)
 8004146:	f7fd fbe2 	bl	800190e <HAL_GPIO_WritePin>
	
	if ( (data & DB0_BIT_MASK)==DB0_BIT_MASK ) {DB0_SET;}
 800414a:	79bb      	ldrb	r3, [r7, #6]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b00      	cmp	r3, #0
 8004152:	d006      	beq.n	8004162 <write_operation+0x4e>
 8004154:	2201      	movs	r2, #1
 8004156:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800415a:	4857      	ldr	r0, [pc, #348]	; (80042b8 <write_operation+0x1a4>)
 800415c:	f7fd fbd7 	bl	800190e <HAL_GPIO_WritePin>
 8004160:	e005      	b.n	800416e <write_operation+0x5a>
	else {DB0_RESET;}
 8004162:	2200      	movs	r2, #0
 8004164:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004168:	4853      	ldr	r0, [pc, #332]	; (80042b8 <write_operation+0x1a4>)
 800416a:	f7fd fbd0 	bl	800190e <HAL_GPIO_WritePin>
	
	if ( (data & DB1_BIT_MASK)==DB1_BIT_MASK ) {DB1_SET;}
 800416e:	79bb      	ldrb	r3, [r7, #6]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <write_operation+0x72>
 8004178:	2201      	movs	r2, #1
 800417a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800417e:	484e      	ldr	r0, [pc, #312]	; (80042b8 <write_operation+0x1a4>)
 8004180:	f7fd fbc5 	bl	800190e <HAL_GPIO_WritePin>
 8004184:	e005      	b.n	8004192 <write_operation+0x7e>
	else {DB1_RESET;}
 8004186:	2200      	movs	r2, #0
 8004188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800418c:	484a      	ldr	r0, [pc, #296]	; (80042b8 <write_operation+0x1a4>)
 800418e:	f7fd fbbe 	bl	800190e <HAL_GPIO_WritePin>
	
	if ( (data & DB2_BIT_MASK)==DB2_BIT_MASK ) {DB2_SET;}
 8004192:	79bb      	ldrb	r3, [r7, #6]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d006      	beq.n	80041aa <write_operation+0x96>
 800419c:	2201      	movs	r2, #1
 800419e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041a2:	4845      	ldr	r0, [pc, #276]	; (80042b8 <write_operation+0x1a4>)
 80041a4:	f7fd fbb3 	bl	800190e <HAL_GPIO_WritePin>
 80041a8:	e005      	b.n	80041b6 <write_operation+0xa2>
	else {DB2_RESET;}
 80041aa:	2200      	movs	r2, #0
 80041ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80041b0:	4841      	ldr	r0, [pc, #260]	; (80042b8 <write_operation+0x1a4>)
 80041b2:	f7fd fbac 	bl	800190e <HAL_GPIO_WritePin>
	
	if ( (data & DB3_BIT_MASK)==DB3_BIT_MASK ) {DB3_SET;}
 80041b6:	79bb      	ldrb	r3, [r7, #6]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d006      	beq.n	80041ce <write_operation+0xba>
 80041c0:	2201      	movs	r2, #1
 80041c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041c6:	483c      	ldr	r0, [pc, #240]	; (80042b8 <write_operation+0x1a4>)
 80041c8:	f7fd fba1 	bl	800190e <HAL_GPIO_WritePin>
 80041cc:	e005      	b.n	80041da <write_operation+0xc6>
	else {DB3_RESET;}
 80041ce:	2200      	movs	r2, #0
 80041d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80041d4:	4838      	ldr	r0, [pc, #224]	; (80042b8 <write_operation+0x1a4>)
 80041d6:	f7fd fb9a 	bl	800190e <HAL_GPIO_WritePin>
	
	if ( (data & DB4_BIT_MASK)==DB4_BIT_MASK ) {DB4_SET;}
 80041da:	79bb      	ldrb	r3, [r7, #6]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d006      	beq.n	80041f2 <write_operation+0xde>
 80041e4:	2201      	movs	r2, #1
 80041e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041ea:	4833      	ldr	r0, [pc, #204]	; (80042b8 <write_operation+0x1a4>)
 80041ec:	f7fd fb8f 	bl	800190e <HAL_GPIO_WritePin>
 80041f0:	e005      	b.n	80041fe <write_operation+0xea>
	else {DB4_RESET;}
 80041f2:	2200      	movs	r2, #0
 80041f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041f8:	482f      	ldr	r0, [pc, #188]	; (80042b8 <write_operation+0x1a4>)
 80041fa:	f7fd fb88 	bl	800190e <HAL_GPIO_WritePin>
	
	if ( (data & DB5_BIT_MASK)==DB5_BIT_MASK ) {DB5_SET;}
 80041fe:	79bb      	ldrb	r3, [r7, #6]
 8004200:	f003 0320 	and.w	r3, r3, #32
 8004204:	2b00      	cmp	r3, #0
 8004206:	d006      	beq.n	8004216 <write_operation+0x102>
 8004208:	2201      	movs	r2, #1
 800420a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800420e:	482b      	ldr	r0, [pc, #172]	; (80042bc <write_operation+0x1a8>)
 8004210:	f7fd fb7d 	bl	800190e <HAL_GPIO_WritePin>
 8004214:	e005      	b.n	8004222 <write_operation+0x10e>
	else {DB5_RESET;}
 8004216:	2200      	movs	r2, #0
 8004218:	f44f 7180 	mov.w	r1, #256	; 0x100
 800421c:	4827      	ldr	r0, [pc, #156]	; (80042bc <write_operation+0x1a8>)
 800421e:	f7fd fb76 	bl	800190e <HAL_GPIO_WritePin>
	
	if ( (data & DB6_BIT_MASK)==DB6_BIT_MASK ) {DB6_SET;}
 8004222:	79bb      	ldrb	r3, [r7, #6]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	d006      	beq.n	800423a <write_operation+0x126>
 800422c:	2201      	movs	r2, #1
 800422e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004232:	4822      	ldr	r0, [pc, #136]	; (80042bc <write_operation+0x1a8>)
 8004234:	f7fd fb6b 	bl	800190e <HAL_GPIO_WritePin>
 8004238:	e005      	b.n	8004246 <write_operation+0x132>
	else {DB6_RESET;}
 800423a:	2200      	movs	r2, #0
 800423c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004240:	481e      	ldr	r0, [pc, #120]	; (80042bc <write_operation+0x1a8>)
 8004242:	f7fd fb64 	bl	800190e <HAL_GPIO_WritePin>
	
	if ( (data & DB7_BIT_MASK)==DB7_BIT_MASK ) {DB7_SET;}
 8004246:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800424a:	2b00      	cmp	r3, #0
 800424c:	da06      	bge.n	800425c <write_operation+0x148>
 800424e:	2201      	movs	r2, #1
 8004250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004254:	4819      	ldr	r0, [pc, #100]	; (80042bc <write_operation+0x1a8>)
 8004256:	f7fd fb5a 	bl	800190e <HAL_GPIO_WritePin>
 800425a:	e005      	b.n	8004268 <write_operation+0x154>
	else {DB7_RESET;}
 800425c:	2200      	movs	r2, #0
 800425e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004262:	4816      	ldr	r0, [pc, #88]	; (80042bc <write_operation+0x1a8>)
 8004264:	f7fd fb53 	bl	800190e <HAL_GPIO_WritePin>

	E_SET;
 8004268:	2201      	movs	r2, #1
 800426a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800426e:	4812      	ldr	r0, [pc, #72]	; (80042b8 <write_operation+0x1a4>)
 8004270:	f7fd fb4d 	bl	800190e <HAL_GPIO_WritePin>
#ifdef CMSIS_OS
	if(osKernelRunning()==1) {osDelay(1);}
 8004274:	f000 f974 	bl	8004560 <osKernelRunning>
 8004278:	4603      	mov	r3, r0
 800427a:	2b01      	cmp	r3, #1
 800427c:	d103      	bne.n	8004286 <write_operation+0x172>
 800427e:	2001      	movs	r0, #1
 8004280:	f000 f9cd 	bl	800461e <osDelay>
 8004284:	e002      	b.n	800428c <write_operation+0x178>
	else {HAL_Delay(1);}
 8004286:	2001      	movs	r0, #1
 8004288:	f7fc fd42 	bl	8000d10 <HAL_Delay>
#else
	HAL_Delay(1);
#endif
	E_RESET;
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004292:	4809      	ldr	r0, [pc, #36]	; (80042b8 <write_operation+0x1a4>)
 8004294:	f7fd fb3b 	bl	800190e <HAL_GPIO_WritePin>
#ifdef CMSIS_OS
	if(osKernelRunning()==1) {osDelay(1);}
 8004298:	f000 f962 	bl	8004560 <osKernelRunning>
 800429c:	4603      	mov	r3, r0
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d103      	bne.n	80042aa <write_operation+0x196>
 80042a2:	2001      	movs	r0, #1
 80042a4:	f000 f9bb 	bl	800461e <osDelay>
	else {HAL_Delay(1);}
#else
	HAL_Delay(1);
#endif
}
 80042a8:	e002      	b.n	80042b0 <write_operation+0x19c>
	else {HAL_Delay(1);}
 80042aa:	2001      	movs	r0, #1
 80042ac:	f7fc fd30 	bl	8000d10 <HAL_Delay>
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40010c00 	.word	0x40010c00
 80042bc:	40010800 	.word	0x40010800

080042c0 <wh0802_clear_display>:


void wh0802_clear_display (void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
	write_operation( INSTRUCTION_BIT, CLEAR_DISPLAY_BIT_MASK);
 80042c4:	2101      	movs	r1, #1
 80042c6:	2000      	movs	r0, #0
 80042c8:	f7ff ff24 	bl	8004114 <write_operation>
}
 80042cc:	bf00      	nop
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <wh0802_entry_mode_set>:
	write_operation( INSTRUCTION_BIT, RETURN_HOME_BIT_MASK);
}


void wh0802_entry_mode_set (uint8_t ID, uint8_t S)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	460a      	mov	r2, r1
 80042da:	71fb      	strb	r3, [r7, #7]
 80042dc:	4613      	mov	r3, r2
 80042de:	71bb      	strb	r3, [r7, #6]
	write_operation( INSTRUCTION_BIT, ENTRY_MODE_BIT_MASK|ID|S);
 80042e0:	79fa      	ldrb	r2, [r7, #7]
 80042e2:	79bb      	ldrb	r3, [r7, #6]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	4619      	mov	r1, r3
 80042f0:	2000      	movs	r0, #0
 80042f2:	f7ff ff0f 	bl	8004114 <write_operation>
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <wh0802_display_control>:


void wh0802_display_control (uint8_t D, uint8_t C, uint8_t B)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	4603      	mov	r3, r0
 8004306:	71fb      	strb	r3, [r7, #7]
 8004308:	460b      	mov	r3, r1
 800430a:	71bb      	strb	r3, [r7, #6]
 800430c:	4613      	mov	r3, r2
 800430e:	717b      	strb	r3, [r7, #5]
	write_operation( INSTRUCTION_BIT, DISPLAY_CONTROL_BIT_MASK|D|C|B);
 8004310:	79fa      	ldrb	r2, [r7, #7]
 8004312:	79bb      	ldrb	r3, [r7, #6]
 8004314:	4313      	orrs	r3, r2
 8004316:	b2da      	uxtb	r2, r3
 8004318:	797b      	ldrb	r3, [r7, #5]
 800431a:	4313      	orrs	r3, r2
 800431c:	b2db      	uxtb	r3, r3
 800431e:	f043 0308 	orr.w	r3, r3, #8
 8004322:	b2db      	uxtb	r3, r3
 8004324:	4619      	mov	r1, r3
 8004326:	2000      	movs	r0, #0
 8004328:	f7ff fef4 	bl	8004114 <write_operation>
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <wh0802_function_set>:
}



void wh0802_function_set (uint8_t DL, uint8_t N, uint8_t F)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	71fb      	strb	r3, [r7, #7]
 800433e:	460b      	mov	r3, r1
 8004340:	71bb      	strb	r3, [r7, #6]
 8004342:	4613      	mov	r3, r2
 8004344:	717b      	strb	r3, [r7, #5]
	write_operation( INSTRUCTION_BIT, FUNCTION_SET_BIT_MASK|DL|N|F);
 8004346:	79fa      	ldrb	r2, [r7, #7]
 8004348:	79bb      	ldrb	r3, [r7, #6]
 800434a:	4313      	orrs	r3, r2
 800434c:	b2da      	uxtb	r2, r3
 800434e:	797b      	ldrb	r3, [r7, #5]
 8004350:	4313      	orrs	r3, r2
 8004352:	b2db      	uxtb	r3, r3
 8004354:	f043 0320 	orr.w	r3, r3, #32
 8004358:	b2db      	uxtb	r3, r3
 800435a:	4619      	mov	r1, r3
 800435c:	2000      	movs	r0, #0
 800435e:	f7ff fed9 	bl	8004114 <write_operation>
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <wh0802_set_ddram_address>:
{
	write_operation( INSTRUCTION_BIT, SET_SGRAM_ADDRESS_BIT_MASK|cgram_address);
}

void wh0802_set_ddram_address (uint8_t ddram_address)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	4603      	mov	r3, r0
 8004372:	71fb      	strb	r3, [r7, #7]
	write_operation( INSTRUCTION_BIT, SET_DDRAM_ADDRESS_BIT_MASK|ddram_address);
 8004374:	79fb      	ldrb	r3, [r7, #7]
 8004376:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800437a:	b2db      	uxtb	r3, r3
 800437c:	4619      	mov	r1, r3
 800437e:	2000      	movs	r0, #0
 8004380:	f7ff fec8 	bl	8004114 <write_operation>
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <wh0802_write_data_to_ram>:

void wh0802_write_data_to_ram (uint8_t ram_data)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	4603      	mov	r3, r0
 8004394:	71fb      	strb	r3, [r7, #7]
	write_operation( DATA_BIT, ram_data);
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	4619      	mov	r1, r3
 800439a:	2001      	movs	r0, #1
 800439c:	f7ff feba 	bl	8004114 <write_operation>
}
 80043a0:	bf00      	nop
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <wh0802_init>:


void wh0802_init (void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
#ifdef CMSIS_OS
	if(osKernelRunning()==1) {osDelay(50);}
 80043ac:	f000 f8d8 	bl	8004560 <osKernelRunning>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d103      	bne.n	80043be <wh0802_init+0x16>
 80043b6:	2032      	movs	r0, #50	; 0x32
 80043b8:	f000 f931 	bl	800461e <osDelay>
 80043bc:	e002      	b.n	80043c4 <wh0802_init+0x1c>
	else {HAL_Delay(50);}
 80043be:	2032      	movs	r0, #50	; 0x32
 80043c0:	f7fc fca6 	bl	8000d10 <HAL_Delay>
#else
	HAL_Delay(50);
#endif
	wh0802_function_set(0x10,0x08,0x04);
 80043c4:	2204      	movs	r2, #4
 80043c6:	2108      	movs	r1, #8
 80043c8:	2010      	movs	r0, #16
 80043ca:	f7ff ffb3 	bl	8004334 <wh0802_function_set>
#ifdef CMSIS_OS
	if(osKernelRunning()==1) {osDelay(1);}
 80043ce:	f000 f8c7 	bl	8004560 <osKernelRunning>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d103      	bne.n	80043e0 <wh0802_init+0x38>
 80043d8:	2001      	movs	r0, #1
 80043da:	f000 f920 	bl	800461e <osDelay>
 80043de:	e002      	b.n	80043e6 <wh0802_init+0x3e>
	else {HAL_Delay(1);}
 80043e0:	2001      	movs	r0, #1
 80043e2:	f7fc fc95 	bl	8000d10 <HAL_Delay>
#else
	HAL_Delay(1);
#endif
	wh0802_display_control(DISPLAY_ON,CURSOR_OFF,BLINKING_OFF);
 80043e6:	2200      	movs	r2, #0
 80043e8:	2100      	movs	r1, #0
 80043ea:	2004      	movs	r0, #4
 80043ec:	f7ff ff87 	bl	80042fe <wh0802_display_control>
#ifdef CMSIS_OS
	if(osKernelRunning()==1) {osDelay(1);}
 80043f0:	f000 f8b6 	bl	8004560 <osKernelRunning>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d103      	bne.n	8004402 <wh0802_init+0x5a>
 80043fa:	2001      	movs	r0, #1
 80043fc:	f000 f90f 	bl	800461e <osDelay>
 8004400:	e002      	b.n	8004408 <wh0802_init+0x60>
	else {HAL_Delay(1);}
 8004402:	2001      	movs	r0, #1
 8004404:	f7fc fc84 	bl	8000d10 <HAL_Delay>
#else
	HAL_Delay(1);
#endif
	wh0802_clear_display();
 8004408:	f7ff ff5a 	bl	80042c0 <wh0802_clear_display>
#ifdef CMSIS_OS
	if(osKernelRunning()==1) {osDelay(1);}
 800440c:	f000 f8a8 	bl	8004560 <osKernelRunning>
 8004410:	4603      	mov	r3, r0
 8004412:	2b01      	cmp	r3, #1
 8004414:	d103      	bne.n	800441e <wh0802_init+0x76>
 8004416:	2001      	movs	r0, #1
 8004418:	f000 f901 	bl	800461e <osDelay>
 800441c:	e002      	b.n	8004424 <wh0802_init+0x7c>
	else {HAL_Delay(1);}
 800441e:	2001      	movs	r0, #1
 8004420:	f7fc fc76 	bl	8000d10 <HAL_Delay>
#else
	HAL_Delay(1);
#endif
	wh0802_entry_mode_set(0x02,0x01);
 8004424:	2101      	movs	r1, #1
 8004426:	2002      	movs	r0, #2
 8004428:	f7ff ff52 	bl	80042d0 <wh0802_entry_mode_set>
}
 800442c:	bf00      	nop
 800442e:	bd80      	pop	{r7, pc}

08004430 <wh0802_write_to_display>:


void wh0802_write_to_display (uint8_t ddram_address, char *data, uint8_t clear_state)
{
 8004430:	b590      	push	{r4, r7, lr}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	4603      	mov	r3, r0
 8004438:	6039      	str	r1, [r7, #0]
 800443a:	71fb      	strb	r3, [r7, #7]
 800443c:	4613      	mov	r3, r2
 800443e:	71bb      	strb	r3, [r7, #6]
	if(clear_state == CLEAR_ON)
 8004440:	79bb      	ldrb	r3, [r7, #6]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <wh0802_write_to_display+0x1a>
	{
		wh0802_clear_display();
 8004446:	f7ff ff3b 	bl	80042c0 <wh0802_clear_display>
	}
	uint8_t i;
	uint8_t j=0;
 800444a:	2300      	movs	r3, #0
 800444c:	73bb      	strb	r3, [r7, #14]
	if(ddram_address<=0x07)
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	2b07      	cmp	r3, #7
 8004452:	d837      	bhi.n	80044c4 <wh0802_write_to_display+0x94>
	{
		for(i=0; i<strlen(data); i++)
 8004454:	2300      	movs	r3, #0
 8004456:	73fb      	strb	r3, [r7, #15]
 8004458:	e02c      	b.n	80044b4 <wh0802_write_to_display+0x84>
		{
			if((ddram_address+i)<=0x07)
 800445a:	79fa      	ldrb	r2, [r7, #7]
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	4413      	add	r3, r2
 8004460:	2b07      	cmp	r3, #7
 8004462:	dc11      	bgt.n	8004488 <wh0802_write_to_display+0x58>
			{
				j++;
 8004464:	7bbb      	ldrb	r3, [r7, #14]
 8004466:	3301      	adds	r3, #1
 8004468:	73bb      	strb	r3, [r7, #14]
				wh0802_set_ddram_address(ddram_address+i);
 800446a:	79fa      	ldrb	r2, [r7, #7]
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	4413      	add	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff ff79 	bl	800436a <wh0802_set_ddram_address>
				wh0802_write_data_to_ram(*(data+i));
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	4413      	add	r3, r2
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff ff83 	bl	800438c <wh0802_write_data_to_ram>
 8004486:	e012      	b.n	80044ae <wh0802_write_to_display+0x7e>
			}
			else
			{
				ddram_address=0x40;
 8004488:	2340      	movs	r3, #64	; 0x40
 800448a:	71fb      	strb	r3, [r7, #7]
				wh0802_set_ddram_address(ddram_address+i-j);
 800448c:	79fa      	ldrb	r2, [r7, #7]
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	4413      	add	r3, r2
 8004492:	b2da      	uxtb	r2, r3
 8004494:	7bbb      	ldrb	r3, [r7, #14]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	b2db      	uxtb	r3, r3
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff ff65 	bl	800436a <wh0802_set_ddram_address>
				wh0802_write_data_to_ram(*(data+i));
 80044a0:	7bfb      	ldrb	r3, [r7, #15]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	4413      	add	r3, r2
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff ff6f 	bl	800438c <wh0802_write_data_to_ram>
		for(i=0; i<strlen(data); i++)
 80044ae:	7bfb      	ldrb	r3, [r7, #15]
 80044b0:	3301      	adds	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	7bfc      	ldrb	r4, [r7, #15]
 80044b6:	6838      	ldr	r0, [r7, #0]
 80044b8:	f7fb fe4a 	bl	8000150 <strlen>
 80044bc:	4603      	mov	r3, r0
 80044be:	429c      	cmp	r4, r3
 80044c0:	d3cb      	bcc.n	800445a <wh0802_write_to_display+0x2a>
		{
			wh0802_set_ddram_address(ddram_address+i);
			wh0802_write_data_to_ram(*(data+i));
		}
	}
}
 80044c2:	e01a      	b.n	80044fa <wh0802_write_to_display+0xca>
		for(i=0; i<strlen(data); i++)
 80044c4:	2300      	movs	r3, #0
 80044c6:	73fb      	strb	r3, [r7, #15]
 80044c8:	e010      	b.n	80044ec <wh0802_write_to_display+0xbc>
			wh0802_set_ddram_address(ddram_address+i);
 80044ca:	79fa      	ldrb	r2, [r7, #7]
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	4413      	add	r3, r2
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff ff49 	bl	800436a <wh0802_set_ddram_address>
			wh0802_write_data_to_ram(*(data+i));
 80044d8:	7bfb      	ldrb	r3, [r7, #15]
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	4413      	add	r3, r2
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ff53 	bl	800438c <wh0802_write_data_to_ram>
		for(i=0; i<strlen(data); i++)
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	3301      	adds	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
 80044ec:	7bfc      	ldrb	r4, [r7, #15]
 80044ee:	6838      	ldr	r0, [r7, #0]
 80044f0:	f7fb fe2e 	bl	8000150 <strlen>
 80044f4:	4603      	mov	r3, r0
 80044f6:	429c      	cmp	r4, r3
 80044f8:	d3e7      	bcc.n	80044ca <wh0802_write_to_display+0x9a>
}
 80044fa:	bf00      	nop
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd90      	pop	{r4, r7, pc}

08004502 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004502:	b480      	push	{r7}
 8004504:	b085      	sub	sp, #20
 8004506:	af00      	add	r7, sp, #0
 8004508:	4603      	mov	r3, r0
 800450a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004514:	2b84      	cmp	r3, #132	; 0x84
 8004516:	d005      	beq.n	8004524 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004518:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	3303      	adds	r3, #3
 8004522:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004524:	68fb      	ldr	r3, [r7, #12]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004536:	f3ef 8305 	mrs	r3, IPSR
 800453a:	607b      	str	r3, [r7, #4]
  return(result);
 800453c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800453e:	2b00      	cmp	r3, #0
 8004540:	bf14      	ite	ne
 8004542:	2301      	movne	r3, #1
 8004544:	2300      	moveq	r3, #0
 8004546:	b2db      	uxtb	r3, r3
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr

08004552 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004556:	f001 fced 	bl	8005f34 <vTaskStartScheduler>
  
  return osOK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	bd80      	pop	{r7, pc}

08004560 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8004564:	f002 f93a 	bl	80067dc <xTaskGetSchedulerState>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <osKernelRunning+0x12>
    return 0;
 800456e:	2300      	movs	r3, #0
 8004570:	e000      	b.n	8004574 <osKernelRunning+0x14>
  else
    return 1;
 8004572:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8004574:	4618      	mov	r0, r3
 8004576:	bd80      	pop	{r7, pc}

08004578 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457a:	b089      	sub	sp, #36	; 0x24
 800457c:	af04      	add	r7, sp, #16
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d020      	beq.n	80045cc <osThreadCreate+0x54>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d01c      	beq.n	80045cc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685c      	ldr	r4, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681d      	ldr	r5, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691e      	ldr	r6, [r3, #16]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff ffac 	bl	8004502 <makeFreeRtosPriority>
 80045aa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045b4:	9202      	str	r2, [sp, #8]
 80045b6:	9301      	str	r3, [sp, #4]
 80045b8:	9100      	str	r1, [sp, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	4632      	mov	r2, r6
 80045be:	4629      	mov	r1, r5
 80045c0:	4620      	mov	r0, r4
 80045c2:	f001 f95d 	bl	8005880 <xTaskCreateStatic>
 80045c6:	4603      	mov	r3, r0
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	e01c      	b.n	8004606 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685c      	ldr	r4, [r3, #4]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045d8:	b29e      	uxth	r6, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff ff8e 	bl	8004502 <makeFreeRtosPriority>
 80045e6:	4602      	mov	r2, r0
 80045e8:	f107 030c 	add.w	r3, r7, #12
 80045ec:	9301      	str	r3, [sp, #4]
 80045ee:	9200      	str	r2, [sp, #0]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	4632      	mov	r2, r6
 80045f4:	4629      	mov	r1, r5
 80045f6:	4620      	mov	r0, r4
 80045f8:	f001 f99e 	bl	8005938 <xTaskCreate>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d001      	beq.n	8004606 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	e000      	b.n	8004608 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004606:	68fb      	ldr	r3, [r7, #12]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004610 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8004614:	f002 f8d4 	bl	80067c0 <xTaskGetCurrentTaskHandle>
 8004618:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 800461a:	4618      	mov	r0, r3
 800461c:	bd80      	pop	{r7, pc}

0800461e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b084      	sub	sp, #16
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <osDelay+0x16>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	e000      	b.n	8004636 <osDelay+0x18>
 8004634:	2301      	movs	r3, #1
 8004636:	4618      	mov	r0, r3
 8004638:	f001 faac 	bl	8005b94 <vTaskDelay>
  
  return osOK;
 800463c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af02      	add	r7, sp, #8
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	460b      	mov	r3, r1
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d013      	beq.n	8004686 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800465e:	7afb      	ldrb	r3, [r7, #11]
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <osTimerCreate+0x20>
 8004664:	2101      	movs	r1, #1
 8004666:	e000      	b.n	800466a <osTimerCreate+0x22>
 8004668:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8004672:	9201      	str	r2, [sp, #4]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	460a      	mov	r2, r1
 800467a:	2101      	movs	r1, #1
 800467c:	480b      	ldr	r0, [pc, #44]	; (80046ac <osTimerCreate+0x64>)
 800467e:	f002 fa20 	bl	8006ac2 <xTimerCreateStatic>
 8004682:	4603      	mov	r3, r0
 8004684:	e00e      	b.n	80046a4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8004686:	7afb      	ldrb	r3, [r7, #11]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d101      	bne.n	8004690 <osTimerCreate+0x48>
 800468c:	2201      	movs	r2, #1
 800468e:	e000      	b.n	8004692 <osTimerCreate+0x4a>
 8004690:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2101      	movs	r1, #1
 800469c:	4803      	ldr	r0, [pc, #12]	; (80046ac <osTimerCreate+0x64>)
 800469e:	f002 f9ef 	bl	8006a80 <xTimerCreate>
 80046a2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	0800a020 	.word	0x0800a020

080046b0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <osTimerStart+0x20>
    ticks = 1;
 80046cc:	2301      	movs	r3, #1
 80046ce:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80046d0:	f7ff ff2e 	bl	8004530 <inHandlerMode>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01a      	beq.n	8004710 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80046da:	f107 030c 	add.w	r3, r7, #12
 80046de:	2200      	movs	r2, #0
 80046e0:	9200      	str	r2, [sp, #0]
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	2109      	movs	r1, #9
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f002 fa5a 	bl	8006ba0 <xTimerGenericCommand>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d002      	beq.n	80046f8 <osTimerStart+0x48>
    {
      result = osErrorOS;
 80046f2:	23ff      	movs	r3, #255	; 0xff
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	e018      	b.n	800472a <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d015      	beq.n	800472a <osTimerStart+0x7a>
 80046fe:	4b0d      	ldr	r3, [pc, #52]	; (8004734 <osTimerStart+0x84>)
 8004700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	e00c      	b.n	800472a <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8004710:	2300      	movs	r3, #0
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	2300      	movs	r3, #0
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	2104      	movs	r1, #4
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f002 fa40 	bl	8006ba0 <xTimerGenericCommand>
 8004720:	4603      	mov	r3, r0
 8004722:	2b01      	cmp	r3, #1
 8004724:	d001      	beq.n	800472a <osTimerStart+0x7a>
      result = osErrorOS;
 8004726:	23ff      	movs	r3, #255	; 0xff
 8004728:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800472a:	697b      	ldr	r3, [r7, #20]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	e000ed04 	.word	0xe000ed04

08004738 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af02      	add	r7, sp, #8
 800473e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8004744:	2300      	movs	r3, #0
 8004746:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8004748:	f7ff fef2 	bl	8004530 <inHandlerMode>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d019      	beq.n	8004786 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8004752:	f107 0308 	add.w	r3, r7, #8
 8004756:	2200      	movs	r2, #0
 8004758:	9200      	str	r2, [sp, #0]
 800475a:	2200      	movs	r2, #0
 800475c:	2108      	movs	r1, #8
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f002 fa1e 	bl	8006ba0 <xTimerGenericCommand>
 8004764:	4603      	mov	r3, r0
 8004766:	2b01      	cmp	r3, #1
 8004768:	d001      	beq.n	800476e <osTimerStop+0x36>
      return osErrorOS;
 800476a:	23ff      	movs	r3, #255	; 0xff
 800476c:	e019      	b.n	80047a2 <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d015      	beq.n	80047a0 <osTimerStop+0x68>
 8004774:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <osTimerStop+0x74>)
 8004776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	e00c      	b.n	80047a0 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8004786:	2300      	movs	r3, #0
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	2300      	movs	r3, #0
 800478c:	2200      	movs	r2, #0
 800478e:	2103      	movs	r1, #3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f002 fa05 	bl	8006ba0 <xTimerGenericCommand>
 8004796:	4603      	mov	r3, r0
 8004798:	2b01      	cmp	r3, #1
 800479a:	d001      	beq.n	80047a0 <osTimerStop+0x68>
      result = osErrorOS;
 800479c:	23ff      	movs	r3, #255	; 0xff
 800479e:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 80047a0:	68fb      	ldr	r3, [r7, #12]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	e000ed04 	.word	0xe000ed04

080047b0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	4619      	mov	r1, r3
 80047c6:	2001      	movs	r0, #1
 80047c8:	f000 fb72 	bl	8004eb0 <xQueueCreateMutexStatic>
 80047cc:	4603      	mov	r3, r0
 80047ce:	e003      	b.n	80047d8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80047d0:	2001      	movs	r0, #1
 80047d2:	f000 fb55 	bl	8004e80 <xQueueCreateMutex>
 80047d6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d016      	beq.n	8004820 <osSemaphoreCreate+0x40>
    if (count == 1) {
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d10a      	bne.n	800480e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2203      	movs	r2, #3
 80047fe:	9200      	str	r2, [sp, #0]
 8004800:	2200      	movs	r2, #0
 8004802:	2100      	movs	r1, #0
 8004804:	2001      	movs	r0, #1
 8004806:	f000 fa4d 	bl	8004ca4 <xQueueGenericCreateStatic>
 800480a:	4603      	mov	r3, r0
 800480c:	e023      	b.n	8004856 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 800480e:	6838      	ldr	r0, [r7, #0]
 8004810:	6839      	ldr	r1, [r7, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	461a      	mov	r2, r3
 8004818:	f000 fb65 	bl	8004ee6 <xQueueCreateCountingSemaphoreStatic>
 800481c:	4603      	mov	r3, r0
 800481e:	e01a      	b.n	8004856 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d110      	bne.n	8004848 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8004826:	2203      	movs	r2, #3
 8004828:	2100      	movs	r1, #0
 800482a:	2001      	movs	r0, #1
 800482c:	f000 fab1 	bl	8004d92 <xQueueGenericCreate>
 8004830:	60f8      	str	r0, [r7, #12]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <osSemaphoreCreate+0x64>
 8004838:	2300      	movs	r3, #0
 800483a:	2200      	movs	r2, #0
 800483c:	2100      	movs	r1, #0
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fbbc 	bl	8004fbc <xQueueGenericSend>
      return sema;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	e006      	b.n	8004856 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	4611      	mov	r1, r2
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fb80 	bl	8004f54 <xQueueCreateCountingSemaphore>
 8004854:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800485e:	b590      	push	{r4, r7, lr}
 8004860:	b085      	sub	sp, #20
 8004862:	af02      	add	r7, sp, #8
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d011      	beq.n	8004894 <osMessageCreate+0x36>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00d      	beq.n	8004894 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6859      	ldr	r1, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2400      	movs	r4, #0
 800488a:	9400      	str	r4, [sp, #0]
 800488c:	f000 fa0a 	bl	8004ca4 <xQueueGenericCreateStatic>
 8004890:	4603      	mov	r3, r0
 8004892:	e008      	b.n	80048a6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	4619      	mov	r1, r3
 80048a0:	f000 fa77 	bl	8004d92 <xQueueGenericCreate>
 80048a4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd90      	pop	{r4, r7, pc}
	...

080048b0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80048bc:	2300      	movs	r3, #0
 80048be:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <osMessagePut+0x1e>
    ticks = 1;
 80048ca:	2301      	movs	r3, #1
 80048cc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80048ce:	f7ff fe2f 	bl	8004530 <inHandlerMode>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d018      	beq.n	800490a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80048d8:	f107 0210 	add.w	r2, r7, #16
 80048dc:	f107 0108 	add.w	r1, r7, #8
 80048e0:	2300      	movs	r3, #0
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 fc68 	bl	80051b8 <xQueueGenericSendFromISR>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d001      	beq.n	80048f2 <osMessagePut+0x42>
      return osErrorOS;
 80048ee:	23ff      	movs	r3, #255	; 0xff
 80048f0:	e018      	b.n	8004924 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d014      	beq.n	8004922 <osMessagePut+0x72>
 80048f8:	4b0c      	ldr	r3, [pc, #48]	; (800492c <osMessagePut+0x7c>)
 80048fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	e00b      	b.n	8004922 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800490a:	f107 0108 	add.w	r1, r7, #8
 800490e:	2300      	movs	r3, #0
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fb52 	bl	8004fbc <xQueueGenericSend>
 8004918:	4603      	mov	r3, r0
 800491a:	2b01      	cmp	r3, #1
 800491c:	d001      	beq.n	8004922 <osMessagePut+0x72>
      return osErrorOS;
 800491e:	23ff      	movs	r3, #255	; 0xff
 8004920:	e000      	b.n	8004924 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3718      	adds	r7, #24
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	e000ed04 	.word	0xe000ed04

08004930 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004930:	b590      	push	{r4, r7, lr}
 8004932:	b08b      	sub	sp, #44	; 0x2c
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10a      	bne.n	8004960 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	617b      	str	r3, [r7, #20]
    return event;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	461c      	mov	r4, r3
 8004952:	f107 0314 	add.w	r3, r7, #20
 8004956:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800495a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800495e:	e054      	b.n	8004a0a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004960:	2300      	movs	r3, #0
 8004962:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d103      	bne.n	8004978 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004970:	f04f 33ff 	mov.w	r3, #4294967295
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
 8004976:	e009      	b.n	800498c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d006      	beq.n	800498c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <osMessageGet+0x5c>
      ticks = 1;
 8004988:	2301      	movs	r3, #1
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800498c:	f7ff fdd0 	bl	8004530 <inHandlerMode>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01c      	beq.n	80049d0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004996:	f107 0220 	add.w	r2, r7, #32
 800499a:	f107 0314 	add.w	r3, r7, #20
 800499e:	3304      	adds	r3, #4
 80049a0:	4619      	mov	r1, r3
 80049a2:	68b8      	ldr	r0, [r7, #8]
 80049a4:	f000 fd80 	bl	80054a8 <xQueueReceiveFromISR>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d102      	bne.n	80049b4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80049ae:	2310      	movs	r3, #16
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	e001      	b.n	80049b8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01d      	beq.n	80049fa <osMessageGet+0xca>
 80049be:	4b15      	ldr	r3, [pc, #84]	; (8004a14 <osMessageGet+0xe4>)
 80049c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	e014      	b.n	80049fa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80049d0:	f107 0314 	add.w	r3, r7, #20
 80049d4:	3304      	adds	r3, #4
 80049d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d8:	4619      	mov	r1, r3
 80049da:	68b8      	ldr	r0, [r7, #8]
 80049dc:	f000 fc84 	bl	80052e8 <xQueueReceive>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d102      	bne.n	80049ec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80049e6:	2310      	movs	r3, #16
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	e006      	b.n	80049fa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d101      	bne.n	80049f6 <osMessageGet+0xc6>
 80049f2:	2300      	movs	r3, #0
 80049f4:	e000      	b.n	80049f8 <osMessageGet+0xc8>
 80049f6:	2340      	movs	r3, #64	; 0x40
 80049f8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	461c      	mov	r4, r3
 80049fe:	f107 0314 	add.w	r3, r7, #20
 8004a02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	372c      	adds	r7, #44	; 0x2c
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd90      	pop	{r4, r7, pc}
 8004a12:	bf00      	nop
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f001 f8eb 	bl	8005bfc <vTaskSuspend>
  
  return osOK;
 8004a26:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8004a38:	f7ff fd7a 	bl	8004530 <inHandlerMode>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00e      	beq.n	8004a60 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f001 fa04 	bl	8005e50 <xTaskResumeFromISR>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d10b      	bne.n	8004a66 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8004a4e:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <osThreadResume+0x40>)
 8004a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	e002      	b.n	8004a66 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f001 f997 	bl	8005d94 <vTaskResume>
  }
  return osOK;
 8004a66:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	e000ed04 	.word	0xe000ed04

08004a74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f103 0208 	add.w	r2, r3, #8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f04f 32ff 	mov.w	r2, #4294967295
 8004a8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f103 0208 	add.w	r2, r3, #8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f103 0208 	add.w	r2, r3, #8
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr

08004aca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	601a      	str	r2, [r3, #0]
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr

08004b10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d103      	bne.n	8004b30 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	e00c      	b.n	8004b4a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3308      	adds	r3, #8
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	e002      	b.n	8004b3e <vListInsert+0x2e>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d2f6      	bcs.n	8004b38 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	1c5a      	adds	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	601a      	str	r2, [r3, #0]
}
 8004b76:	bf00      	nop
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bc80      	pop	{r7}
 8004b7e:	4770      	bx	lr

08004b80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6892      	ldr	r2, [r2, #8]
 8004b96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6852      	ldr	r2, [r2, #4]
 8004ba0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d103      	bne.n	8004bb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	1e5a      	subs	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr
	...

08004bd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10a      	bne.n	8004bfe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004bfe:	f002 fb6d 	bl	80072dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	441a      	add	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	68f9      	ldr	r1, [r7, #12]
 8004c32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c34:	fb01 f303 	mul.w	r3, r1, r3
 8004c38:	441a      	add	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	22ff      	movs	r2, #255	; 0xff
 8004c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	22ff      	movs	r2, #255	; 0xff
 8004c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d114      	bne.n	8004c7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01a      	beq.n	8004c92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3310      	adds	r3, #16
 8004c60:	4618      	mov	r0, r3
 8004c62:	f001 fbed 	bl	8006440 <xTaskRemoveFromEventList>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d012      	beq.n	8004c92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <xQueueGenericReset+0xcc>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	e009      	b.n	8004c92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3310      	adds	r3, #16
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fef6 	bl	8004a74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3324      	adds	r3, #36	; 0x24
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff fef1 	bl	8004a74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c92:	f002 fb53 	bl	800733c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c96:	2301      	movs	r3, #1
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	e000ed04 	.word	0xe000ed04

08004ca4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b08e      	sub	sp, #56	; 0x38
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10a      	bne.n	8004cce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cca:	bf00      	nop
 8004ccc:	e7fe      	b.n	8004ccc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <xQueueGenericCreateStatic+0x52>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <xQueueGenericCreateStatic+0x56>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e000      	b.n	8004cfc <xQueueGenericCreateStatic+0x58>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	623b      	str	r3, [r7, #32]
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <xQueueGenericCreateStatic+0x7e>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <xQueueGenericCreateStatic+0x82>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <xQueueGenericCreateStatic+0x84>
 8004d26:	2300      	movs	r3, #0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10a      	bne.n	8004d42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	61fb      	str	r3, [r7, #28]
}
 8004d3e:	bf00      	nop
 8004d40:	e7fe      	b.n	8004d40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d42:	2348      	movs	r3, #72	; 0x48
 8004d44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b48      	cmp	r3, #72	; 0x48
 8004d4a:	d00a      	beq.n	8004d62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	61bb      	str	r3, [r7, #24]
}
 8004d5e:	bf00      	nop
 8004d60:	e7fe      	b.n	8004d60 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00d      	beq.n	8004d88 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d74:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f843 	bl	8004e0e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3730      	adds	r7, #48	; 0x30
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b08a      	sub	sp, #40	; 0x28
 8004d96:	af02      	add	r7, sp, #8
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10a      	bne.n	8004dbc <xQueueGenericCreate+0x2a>
	__asm volatile
 8004da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004daa:	f383 8811 	msr	BASEPRI, r3
 8004dae:	f3bf 8f6f 	isb	sy
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	613b      	str	r3, [r7, #16]
}
 8004db8:	bf00      	nop
 8004dba:	e7fe      	b.n	8004dba <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
 8004dc6:	e004      	b.n	8004dd2 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	fb02 f303 	mul.w	r3, r2, r3
 8004dd0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	3348      	adds	r3, #72	; 0x48
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f002 fb80 	bl	80074dc <pvPortMalloc>
 8004ddc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00f      	beq.n	8004e04 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	3348      	adds	r3, #72	; 0x48
 8004de8:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004df2:	79fa      	ldrb	r2, [r7, #7]
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	68b9      	ldr	r1, [r7, #8]
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f000 f805 	bl	8004e0e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004e04:	69bb      	ldr	r3, [r7, #24]
	}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	60f8      	str	r0, [r7, #12]
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
 8004e1a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d103      	bne.n	8004e2a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	e002      	b.n	8004e30 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	69b8      	ldr	r0, [r7, #24]
 8004e40:	f7ff fec8 	bl	8004bd4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00e      	beq.n	8004e78 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2100      	movs	r1, #0
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f8a2 	bl	8004fbc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004e78:	bf00      	nop
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	4603      	mov	r3, r0
 8004e88:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	461a      	mov	r2, r3
 8004e96:	6939      	ldr	r1, [r7, #16]
 8004e98:	6978      	ldr	r0, [r7, #20]
 8004e9a:	f7ff ff7a 	bl	8004d92 <xQueueGenericCreate>
 8004e9e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff ffd3 	bl	8004e4c <prvInitialiseMutex>

		return pxNewQueue;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
	}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b088      	sub	sp, #32
 8004eb4:	af02      	add	r7, sp, #8
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	6039      	str	r1, [r7, #0]
 8004eba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	6939      	ldr	r1, [r7, #16]
 8004ece:	6978      	ldr	r0, [r7, #20]
 8004ed0:	f7ff fee8 	bl	8004ca4 <xQueueGenericCreateStatic>
 8004ed4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f7ff ffb8 	bl	8004e4c <prvInitialiseMutex>

		return pxNewQueue;
 8004edc:	68fb      	ldr	r3, [r7, #12]
	}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b08a      	sub	sp, #40	; 0x28
 8004eea:	af02      	add	r7, sp, #8
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	61bb      	str	r3, [r7, #24]
}
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d90a      	bls.n	8004f2c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	617b      	str	r3, [r7, #20]
}
 8004f28:	bf00      	nop
 8004f2a:	e7fe      	b.n	8004f2a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	2100      	movs	r1, #0
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff feb4 	bl	8004ca4 <xQueueGenericCreateStatic>
 8004f3c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
	}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3720      	adds	r7, #32
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10a      	bne.n	8004f7a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	613b      	str	r3, [r7, #16]
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d90a      	bls.n	8004f98 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	60fb      	str	r3, [r7, #12]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004f98:	2202      	movs	r2, #2
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff fef8 	bl	8004d92 <xQueueGenericCreate>
 8004fa2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004fb0:	697b      	ldr	r3, [r7, #20]
	}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
	...

08004fbc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08e      	sub	sp, #56	; 0x38
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
 8004fc8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10a      	bne.n	8004fee <xQueueGenericSend+0x32>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	f383 8811 	msr	BASEPRI, r3
 8004fe0:	f3bf 8f6f 	isb	sy
 8004fe4:	f3bf 8f4f 	dsb	sy
 8004fe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fea:	bf00      	nop
 8004fec:	e7fe      	b.n	8004fec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d103      	bne.n	8004ffc <xQueueGenericSend+0x40>
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <xQueueGenericSend+0x44>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <xQueueGenericSend+0x46>
 8005000:	2300      	movs	r3, #0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <xQueueGenericSend+0x60>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b02      	cmp	r3, #2
 8005020:	d103      	bne.n	800502a <xQueueGenericSend+0x6e>
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <xQueueGenericSend+0x72>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <xQueueGenericSend+0x74>
 800502e:	2300      	movs	r3, #0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <xQueueGenericSend+0x8e>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	623b      	str	r3, [r7, #32]
}
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800504a:	f001 fbc7 	bl	80067dc <xTaskGetSchedulerState>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d102      	bne.n	800505a <xQueueGenericSend+0x9e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <xQueueGenericSend+0xa2>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <xQueueGenericSend+0xa4>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <xQueueGenericSend+0xbe>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	61fb      	str	r3, [r7, #28]
}
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800507a:	f002 f92f 	bl	80072dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800507e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	429a      	cmp	r2, r3
 8005088:	d302      	bcc.n	8005090 <xQueueGenericSend+0xd4>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d129      	bne.n	80050e4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005096:	f000 fa87 	bl	80055a8 <prvCopyDataToQueue>
 800509a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d010      	beq.n	80050c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	3324      	adds	r3, #36	; 0x24
 80050a8:	4618      	mov	r0, r3
 80050aa:	f001 f9c9 	bl	8006440 <xTaskRemoveFromEventList>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d013      	beq.n	80050dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050b4:	4b3f      	ldr	r3, [pc, #252]	; (80051b4 <xQueueGenericSend+0x1f8>)
 80050b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	e00a      	b.n	80050dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050cc:	4b39      	ldr	r3, [pc, #228]	; (80051b4 <xQueueGenericSend+0x1f8>)
 80050ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050dc:	f002 f92e 	bl	800733c <vPortExitCritical>
				return pdPASS;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e063      	b.n	80051ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d103      	bne.n	80050f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050ea:	f002 f927 	bl	800733c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	e05c      	b.n	80051ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d106      	bne.n	8005106 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050f8:	f107 0314 	add.w	r3, r7, #20
 80050fc:	4618      	mov	r0, r3
 80050fe:	f001 fa01 	bl	8006504 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005102:	2301      	movs	r3, #1
 8005104:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005106:	f002 f919 	bl	800733c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800510a:	f000 ff79 	bl	8006000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800510e:	f002 f8e5 	bl	80072dc <vPortEnterCritical>
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005118:	b25b      	sxtb	r3, r3
 800511a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511e:	d103      	bne.n	8005128 <xQueueGenericSend+0x16c>
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800512e:	b25b      	sxtb	r3, r3
 8005130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005134:	d103      	bne.n	800513e <xQueueGenericSend+0x182>
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800513e:	f002 f8fd 	bl	800733c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005142:	1d3a      	adds	r2, r7, #4
 8005144:	f107 0314 	add.w	r3, r7, #20
 8005148:	4611      	mov	r1, r2
 800514a:	4618      	mov	r0, r3
 800514c:	f001 f9f0 	bl	8006530 <xTaskCheckForTimeOut>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d124      	bne.n	80051a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005158:	f000 fb1e 	bl	8005798 <prvIsQueueFull>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d018      	beq.n	8005194 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	3310      	adds	r3, #16
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	4611      	mov	r1, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f001 f918 	bl	80063a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005172:	f000 faa9 	bl	80056c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005176:	f000 ff51 	bl	800601c <xTaskResumeAll>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	f47f af7c 	bne.w	800507a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005182:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <xQueueGenericSend+0x1f8>)
 8005184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	e772      	b.n	800507a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005196:	f000 fa97 	bl	80056c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800519a:	f000 ff3f 	bl	800601c <xTaskResumeAll>
 800519e:	e76c      	b.n	800507a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051a2:	f000 fa91 	bl	80056c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051a6:	f000 ff39 	bl	800601c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051aa:	2300      	movs	r3, #0
		}
	}
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3738      	adds	r7, #56	; 0x38
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	e000ed04 	.word	0xe000ed04

080051b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08e      	sub	sp, #56	; 0x38
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d103      	bne.n	80051f4 <xQueueGenericSendFromISR+0x3c>
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <xQueueGenericSendFromISR+0x40>
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <xQueueGenericSendFromISR+0x42>
 80051f8:	2300      	movs	r3, #0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	623b      	str	r3, [r7, #32]
}
 8005210:	bf00      	nop
 8005212:	e7fe      	b.n	8005212 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d103      	bne.n	8005222 <xQueueGenericSendFromISR+0x6a>
 800521a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <xQueueGenericSendFromISR+0x6e>
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <xQueueGenericSendFromISR+0x70>
 8005226:	2300      	movs	r3, #0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	61fb      	str	r3, [r7, #28]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005242:	f002 f90d 	bl	8007460 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005246:	f3ef 8211 	mrs	r2, BASEPRI
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	61ba      	str	r2, [r7, #24]
 800525c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800525e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526a:	429a      	cmp	r2, r3
 800526c:	d302      	bcc.n	8005274 <xQueueGenericSendFromISR+0xbc>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d12c      	bne.n	80052ce <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	68b9      	ldr	r1, [r7, #8]
 8005282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005284:	f000 f990 	bl	80055a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005288:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d112      	bne.n	80052b8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005296:	2b00      	cmp	r3, #0
 8005298:	d016      	beq.n	80052c8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	3324      	adds	r3, #36	; 0x24
 800529e:	4618      	mov	r0, r3
 80052a0:	f001 f8ce 	bl	8006440 <xTaskRemoveFromEventList>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00e      	beq.n	80052c8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00b      	beq.n	80052c8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	e007      	b.n	80052c8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80052bc:	3301      	adds	r3, #1
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	b25a      	sxtb	r2, r3
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80052c8:	2301      	movs	r3, #1
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80052cc:	e001      	b.n	80052d2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	637b      	str	r3, [r7, #52]	; 0x34
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3738      	adds	r7, #56	; 0x38
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08c      	sub	sp, #48	; 0x30
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10a      	bne.n	8005318 <xQueueReceive+0x30>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	623b      	str	r3, [r7, #32]
}
 8005314:	bf00      	nop
 8005316:	e7fe      	b.n	8005316 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d103      	bne.n	8005326 <xQueueReceive+0x3e>
 800531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <xQueueReceive+0x42>
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <xQueueReceive+0x44>
 800532a:	2300      	movs	r3, #0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <xQueueReceive+0x5e>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	61fb      	str	r3, [r7, #28]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005346:	f001 fa49 	bl	80067dc <xTaskGetSchedulerState>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d102      	bne.n	8005356 <xQueueReceive+0x6e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <xQueueReceive+0x72>
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <xQueueReceive+0x74>
 800535a:	2300      	movs	r3, #0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <xQueueReceive+0x8e>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	61bb      	str	r3, [r7, #24]
}
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005376:	f001 ffb1 	bl	80072dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01f      	beq.n	80053c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800538a:	f000 f977 	bl	800567c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	1e5a      	subs	r2, r3, #1
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00f      	beq.n	80053be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	3310      	adds	r3, #16
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 f84c 	bl	8006440 <xTaskRemoveFromEventList>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d007      	beq.n	80053be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053ae:	4b3d      	ldr	r3, [pc, #244]	; (80054a4 <xQueueReceive+0x1bc>)
 80053b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053be:	f001 ffbd 	bl	800733c <vPortExitCritical>
				return pdPASS;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e069      	b.n	800549a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d103      	bne.n	80053d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053cc:	f001 ffb6 	bl	800733c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053d0:	2300      	movs	r3, #0
 80053d2:	e062      	b.n	800549a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d106      	bne.n	80053e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053da:	f107 0310 	add.w	r3, r7, #16
 80053de:	4618      	mov	r0, r3
 80053e0:	f001 f890 	bl	8006504 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053e4:	2301      	movs	r3, #1
 80053e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053e8:	f001 ffa8 	bl	800733c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053ec:	f000 fe08 	bl	8006000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053f0:	f001 ff74 	bl	80072dc <vPortEnterCritical>
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053fa:	b25b      	sxtb	r3, r3
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d103      	bne.n	800540a <xQueueReceive+0x122>
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005410:	b25b      	sxtb	r3, r3
 8005412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005416:	d103      	bne.n	8005420 <xQueueReceive+0x138>
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005420:	f001 ff8c 	bl	800733c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005424:	1d3a      	adds	r2, r7, #4
 8005426:	f107 0310 	add.w	r3, r7, #16
 800542a:	4611      	mov	r1, r2
 800542c:	4618      	mov	r0, r3
 800542e:	f001 f87f 	bl	8006530 <xTaskCheckForTimeOut>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d123      	bne.n	8005480 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800543a:	f000 f997 	bl	800576c <prvIsQueueEmpty>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d017      	beq.n	8005474 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005446:	3324      	adds	r3, #36	; 0x24
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f000 ffa7 	bl	80063a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005454:	f000 f938 	bl	80056c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005458:	f000 fde0 	bl	800601c <xTaskResumeAll>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d189      	bne.n	8005376 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005462:	4b10      	ldr	r3, [pc, #64]	; (80054a4 <xQueueReceive+0x1bc>)
 8005464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	e780      	b.n	8005376 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005476:	f000 f927 	bl	80056c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800547a:	f000 fdcf 	bl	800601c <xTaskResumeAll>
 800547e:	e77a      	b.n	8005376 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005482:	f000 f921 	bl	80056c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005486:	f000 fdc9 	bl	800601c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800548a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800548c:	f000 f96e 	bl	800576c <prvIsQueueEmpty>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	f43f af6f 	beq.w	8005376 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005498:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800549a:	4618      	mov	r0, r3
 800549c:	3730      	adds	r7, #48	; 0x30
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	e000ed04 	.word	0xe000ed04

080054a8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08e      	sub	sp, #56	; 0x38
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	623b      	str	r3, [r7, #32]
}
 80054d0:	bf00      	nop
 80054d2:	e7fe      	b.n	80054d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d103      	bne.n	80054e2 <xQueueReceiveFromISR+0x3a>
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <xQueueReceiveFromISR+0x3e>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <xQueueReceiveFromISR+0x40>
 80054e6:	2300      	movs	r3, #0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10a      	bne.n	8005502 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	61fb      	str	r3, [r7, #28]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005502:	f001 ffad 	bl	8007460 <vPortValidateInterruptPriority>
	__asm volatile
 8005506:	f3ef 8211 	mrs	r2, BASEPRI
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	61ba      	str	r2, [r7, #24]
 800551c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800551e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005520:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	2b00      	cmp	r3, #0
 800552c:	d02f      	beq.n	800558e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800552e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005538:	68b9      	ldr	r1, [r7, #8]
 800553a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800553c:	f000 f89e 	bl	800567c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	1e5a      	subs	r2, r3, #1
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005548:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d112      	bne.n	8005578 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d016      	beq.n	8005588 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	3310      	adds	r3, #16
 800555e:	4618      	mov	r0, r3
 8005560:	f000 ff6e 	bl	8006440 <xTaskRemoveFromEventList>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00e      	beq.n	8005588 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00b      	beq.n	8005588 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e007      	b.n	8005588 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800557c:	3301      	adds	r3, #1
 800557e:	b2db      	uxtb	r3, r3
 8005580:	b25a      	sxtb	r2, r3
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005588:	2301      	movs	r3, #1
 800558a:	637b      	str	r3, [r7, #52]	; 0x34
 800558c:	e001      	b.n	8005592 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800558e:	2300      	movs	r3, #0
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f383 8811 	msr	BASEPRI, r3
}
 800559c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800559e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3738      	adds	r7, #56	; 0x38
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10d      	bne.n	80055e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d14d      	bne.n	800566a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f001 f920 	bl	8006818 <xTaskPriorityDisinherit>
 80055d8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	605a      	str	r2, [r3, #4]
 80055e0:	e043      	b.n	800566a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d119      	bne.n	800561c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6898      	ldr	r0, [r3, #8]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	461a      	mov	r2, r3
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	f004 fbe8 	bl	8009dc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	689a      	ldr	r2, [r3, #8]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	429a      	cmp	r2, r3
 8005610:	d32b      	bcc.n	800566a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	609a      	str	r2, [r3, #8]
 800561a:	e026      	b.n	800566a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68d8      	ldr	r0, [r3, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005624:	461a      	mov	r2, r3
 8005626:	68b9      	ldr	r1, [r7, #8]
 8005628:	f004 fbce 	bl	8009dc8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	425b      	negs	r3, r3
 8005636:	441a      	add	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d207      	bcs.n	8005658 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	425b      	negs	r3, r3
 8005652:	441a      	add	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d105      	bne.n	800566a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	3b01      	subs	r3, #1
 8005668:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005672:	697b      	ldr	r3, [r7, #20]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d018      	beq.n	80056c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	441a      	add	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d303      	bcc.n	80056b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68d9      	ldr	r1, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	461a      	mov	r2, r3
 80056ba:	6838      	ldr	r0, [r7, #0]
 80056bc:	f004 fb84 	bl	8009dc8 <memcpy>
	}
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056d0:	f001 fe04 	bl	80072dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056dc:	e011      	b.n	8005702 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d012      	beq.n	800570c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3324      	adds	r3, #36	; 0x24
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fea8 	bl	8006440 <xTaskRemoveFromEventList>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d001      	beq.n	80056fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056f6:	f000 ff7d 	bl	80065f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005706:	2b00      	cmp	r3, #0
 8005708:	dce9      	bgt.n	80056de <prvUnlockQueue+0x16>
 800570a:	e000      	b.n	800570e <prvUnlockQueue+0x46>
					break;
 800570c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	22ff      	movs	r2, #255	; 0xff
 8005712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005716:	f001 fe11 	bl	800733c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800571a:	f001 fddf 	bl	80072dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005724:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005726:	e011      	b.n	800574c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d012      	beq.n	8005756 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3310      	adds	r3, #16
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fe83 	bl	8006440 <xTaskRemoveFromEventList>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005740:	f000 ff58 	bl	80065f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005744:	7bbb      	ldrb	r3, [r7, #14]
 8005746:	3b01      	subs	r3, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800574c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005750:	2b00      	cmp	r3, #0
 8005752:	dce9      	bgt.n	8005728 <prvUnlockQueue+0x60>
 8005754:	e000      	b.n	8005758 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005756:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	22ff      	movs	r2, #255	; 0xff
 800575c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005760:	f001 fdec 	bl	800733c <vPortExitCritical>
}
 8005764:	bf00      	nop
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005774:	f001 fdb2 	bl	80072dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	2b00      	cmp	r3, #0
 800577e:	d102      	bne.n	8005786 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005780:	2301      	movs	r3, #1
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e001      	b.n	800578a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005786:	2300      	movs	r3, #0
 8005788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800578a:	f001 fdd7 	bl	800733c <vPortExitCritical>

	return xReturn;
 800578e:	68fb      	ldr	r3, [r7, #12]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80057a0:	f001 fd9c 	bl	80072dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d102      	bne.n	80057b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80057b0:	2301      	movs	r3, #1
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	e001      	b.n	80057ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057ba:	f001 fdbf 	bl	800733c <vPortExitCritical>

	return xReturn;
 80057be:	68fb      	ldr	r3, [r7, #12]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
 80057d6:	e014      	b.n	8005802 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057d8:	4a0e      	ldr	r2, [pc, #56]	; (8005814 <vQueueAddToRegistry+0x4c>)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10b      	bne.n	80057fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057e4:	490b      	ldr	r1, [pc, #44]	; (8005814 <vQueueAddToRegistry+0x4c>)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057ee:	4a09      	ldr	r2, [pc, #36]	; (8005814 <vQueueAddToRegistry+0x4c>)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4413      	add	r3, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057fa:	e006      	b.n	800580a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	3301      	adds	r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b07      	cmp	r3, #7
 8005806:	d9e7      	bls.n	80057d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr
 8005814:	20002bc0 	.word	0x20002bc0

08005818 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005828:	f001 fd58 	bl	80072dc <vPortEnterCritical>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005832:	b25b      	sxtb	r3, r3
 8005834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005838:	d103      	bne.n	8005842 <vQueueWaitForMessageRestricted+0x2a>
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005848:	b25b      	sxtb	r3, r3
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d103      	bne.n	8005858 <vQueueWaitForMessageRestricted+0x40>
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005858:	f001 fd70 	bl	800733c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	2b00      	cmp	r3, #0
 8005862:	d106      	bne.n	8005872 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	3324      	adds	r3, #36	; 0x24
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	4618      	mov	r0, r3
 800586e:	f000 fdbb 	bl	80063e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005872:	6978      	ldr	r0, [r7, #20]
 8005874:	f7ff ff28 	bl	80056c8 <prvUnlockQueue>
	}
 8005878:	bf00      	nop
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005880:	b580      	push	{r7, lr}
 8005882:	b08e      	sub	sp, #56	; 0x38
 8005884:	af04      	add	r7, sp, #16
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800588e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	623b      	str	r3, [r7, #32]
}
 80058a6:	bf00      	nop
 80058a8:	e7fe      	b.n	80058a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10a      	bne.n	80058c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	61fb      	str	r3, [r7, #28]
}
 80058c2:	bf00      	nop
 80058c4:	e7fe      	b.n	80058c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058c6:	2354      	movs	r3, #84	; 0x54
 80058c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b54      	cmp	r3, #84	; 0x54
 80058ce:	d00a      	beq.n	80058e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	61bb      	str	r3, [r7, #24]
}
 80058e2:	bf00      	nop
 80058e4:	e7fe      	b.n	80058e4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d01e      	beq.n	800592a <xTaskCreateStatic+0xaa>
 80058ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01b      	beq.n	800592a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005904:	2300      	movs	r3, #0
 8005906:	9303      	str	r3, [sp, #12]
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	9302      	str	r3, [sp, #8]
 800590c:	f107 0314 	add.w	r3, r7, #20
 8005910:	9301      	str	r3, [sp, #4]
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 f850 	bl	80059c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005922:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005924:	f000 f8cc 	bl	8005ac0 <prvAddNewTaskToReadyList>
 8005928:	e001      	b.n	800592e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800592e:	697b      	ldr	r3, [r7, #20]
	}
 8005930:	4618      	mov	r0, r3
 8005932:	3728      	adds	r7, #40	; 0x28
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08c      	sub	sp, #48	; 0x30
 800593c:	af04      	add	r7, sp, #16
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4618      	mov	r0, r3
 800594e:	f001 fdc5 	bl	80074dc <pvPortMalloc>
 8005952:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00e      	beq.n	8005978 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800595a:	2054      	movs	r0, #84	; 0x54
 800595c:	f001 fdbe 	bl	80074dc <pvPortMalloc>
 8005960:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	631a      	str	r2, [r3, #48]	; 0x30
 800596e:	e005      	b.n	800597c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005970:	6978      	ldr	r0, [r7, #20]
 8005972:	f001 fe77 	bl	8007664 <vPortFree>
 8005976:	e001      	b.n	800597c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005978:	2300      	movs	r3, #0
 800597a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d017      	beq.n	80059b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800598a:	88fa      	ldrh	r2, [r7, #6]
 800598c:	2300      	movs	r3, #0
 800598e:	9303      	str	r3, [sp, #12]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	9302      	str	r3, [sp, #8]
 8005994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005996:	9301      	str	r3, [sp, #4]
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68b9      	ldr	r1, [r7, #8]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f000 f80e 	bl	80059c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059a6:	69f8      	ldr	r0, [r7, #28]
 80059a8:	f000 f88a 	bl	8005ac0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059ac:	2301      	movs	r3, #1
 80059ae:	61bb      	str	r3, [r7, #24]
 80059b0:	e002      	b.n	80059b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295
 80059b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059b8:	69bb      	ldr	r3, [r7, #24]
	}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3720      	adds	r7, #32
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b088      	sub	sp, #32
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	607a      	str	r2, [r7, #4]
 80059ce:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059da:	3b01      	subs	r3, #1
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	f023 0307 	bic.w	r3, r3, #7
 80059e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <prvInitialiseNewTask+0x48>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	617b      	str	r3, [r7, #20]
}
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	e012      	b.n	8005a36 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	4413      	add	r3, r2
 8005a16:	7819      	ldrb	r1, [r3, #0]
 8005a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	3334      	adds	r3, #52	; 0x34
 8005a20:	460a      	mov	r2, r1
 8005a22:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	4413      	add	r3, r2
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d006      	beq.n	8005a3e <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	3301      	adds	r3, #1
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	2b0f      	cmp	r3, #15
 8005a3a:	d9e9      	bls.n	8005a10 <prvInitialiseNewTask+0x4e>
 8005a3c:	e000      	b.n	8005a40 <prvInitialiseNewTask+0x7e>
		{
			break;
 8005a3e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	2b06      	cmp	r3, #6
 8005a4c:	d901      	bls.n	8005a52 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a4e:	2306      	movs	r3, #6
 8005a50:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a5c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	2200      	movs	r2, #0
 8005a62:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	3304      	adds	r3, #4
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff f822 	bl	8004ab2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a70:	3318      	adds	r3, #24
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff f81d 	bl	8004ab2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	f1c3 0207 	rsb	r2, r3, #7
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a8c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	2200      	movs	r2, #0
 8005a92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a9c:	683a      	ldr	r2, [r7, #0]
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	69b8      	ldr	r0, [r7, #24]
 8005aa2:	f001 fb2d 	bl	8007100 <pxPortInitialiseStack>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ab6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ab8:	bf00      	nop
 8005aba:	3720      	adds	r7, #32
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ac8:	f001 fc08 	bl	80072dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005acc:	4b2a      	ldr	r3, [pc, #168]	; (8005b78 <prvAddNewTaskToReadyList+0xb8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	4a29      	ldr	r2, [pc, #164]	; (8005b78 <prvAddNewTaskToReadyList+0xb8>)
 8005ad4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ad6:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <prvAddNewTaskToReadyList+0xbc>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d109      	bne.n	8005af2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ade:	4a27      	ldr	r2, [pc, #156]	; (8005b7c <prvAddNewTaskToReadyList+0xbc>)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ae4:	4b24      	ldr	r3, [pc, #144]	; (8005b78 <prvAddNewTaskToReadyList+0xb8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d110      	bne.n	8005b0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005aec:	f000 fda6 	bl	800663c <prvInitialiseTaskLists>
 8005af0:	e00d      	b.n	8005b0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005af2:	4b23      	ldr	r3, [pc, #140]	; (8005b80 <prvAddNewTaskToReadyList+0xc0>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d109      	bne.n	8005b0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005afa:	4b20      	ldr	r3, [pc, #128]	; (8005b7c <prvAddNewTaskToReadyList+0xbc>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d802      	bhi.n	8005b0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b08:	4a1c      	ldr	r2, [pc, #112]	; (8005b7c <prvAddNewTaskToReadyList+0xbc>)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b0e:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <prvAddNewTaskToReadyList+0xc4>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3301      	adds	r3, #1
 8005b14:	4a1b      	ldr	r2, [pc, #108]	; (8005b84 <prvAddNewTaskToReadyList+0xc4>)
 8005b16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	409a      	lsls	r2, r3
 8005b20:	4b19      	ldr	r3, [pc, #100]	; (8005b88 <prvAddNewTaskToReadyList+0xc8>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <prvAddNewTaskToReadyList+0xc8>)
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4a15      	ldr	r2, [pc, #84]	; (8005b8c <prvAddNewTaskToReadyList+0xcc>)
 8005b38:	441a      	add	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f7fe ffc2 	bl	8004aca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b46:	f001 fbf9 	bl	800733c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b4a:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <prvAddNewTaskToReadyList+0xc0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00e      	beq.n	8005b70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <prvAddNewTaskToReadyList+0xbc>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d207      	bcs.n	8005b70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b60:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <prvAddNewTaskToReadyList+0xd0>)
 8005b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	200007d8 	.word	0x200007d8
 8005b7c:	200006d8 	.word	0x200006d8
 8005b80:	200007e4 	.word	0x200007e4
 8005b84:	200007f4 	.word	0x200007f4
 8005b88:	200007e0 	.word	0x200007e0
 8005b8c:	200006dc 	.word	0x200006dc
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d017      	beq.n	8005bd6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ba6:	4b13      	ldr	r3, [pc, #76]	; (8005bf4 <vTaskDelay+0x60>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <vTaskDelay+0x30>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	60bb      	str	r3, [r7, #8]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005bc4:	f000 fa1c 	bl	8006000 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005bc8:	2100      	movs	r1, #0
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 feaa 	bl	8006924 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bd0:	f000 fa24 	bl	800601c <xTaskResumeAll>
 8005bd4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d107      	bne.n	8005bec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bdc:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <vTaskDelay+0x64>)
 8005bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20000800 	.word	0x20000800
 8005bf8:	e000ed04 	.word	0xe000ed04

08005bfc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005c04:	f001 fb6a 	bl	80072dc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d102      	bne.n	8005c14 <vTaskSuspend+0x18>
 8005c0e:	4b3c      	ldr	r3, [pc, #240]	; (8005d00 <vTaskSuspend+0x104>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	e000      	b.n	8005c16 <vTaskSuspend+0x1a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe ffaf 	bl	8004b80 <uxListRemove>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d115      	bne.n	8005c54 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2c:	4935      	ldr	r1, [pc, #212]	; (8005d04 <vTaskSuspend+0x108>)
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	440b      	add	r3, r1
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10a      	bne.n	8005c54 <vTaskSuspend+0x58>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	2201      	movs	r2, #1
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	43da      	mvns	r2, r3
 8005c4a:	4b2f      	ldr	r3, [pc, #188]	; (8005d08 <vTaskSuspend+0x10c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	4a2d      	ldr	r2, [pc, #180]	; (8005d08 <vTaskSuspend+0x10c>)
 8005c52:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3318      	adds	r3, #24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe ff8d 	bl	8004b80 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4827      	ldr	r0, [pc, #156]	; (8005d0c <vTaskSuspend+0x110>)
 8005c6e:	f7fe ff2c 	bl	8004aca <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d103      	bne.n	8005c86 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8005c86:	f001 fb59 	bl	800733c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8005c8a:	4b21      	ldr	r3, [pc, #132]	; (8005d10 <vTaskSuspend+0x114>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005c92:	f001 fb23 	bl	80072dc <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005c96:	f000 fd6f 	bl	8006778 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8005c9a:	f001 fb4f 	bl	800733c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005c9e:	4b18      	ldr	r3, [pc, #96]	; (8005d00 <vTaskSuspend+0x104>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d127      	bne.n	8005cf8 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8005ca8:	4b19      	ldr	r3, [pc, #100]	; (8005d10 <vTaskSuspend+0x114>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d017      	beq.n	8005ce0 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005cb0:	4b18      	ldr	r3, [pc, #96]	; (8005d14 <vTaskSuspend+0x118>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <vTaskSuspend+0xd2>
	__asm volatile
 8005cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	60bb      	str	r3, [r7, #8]
}
 8005cca:	bf00      	nop
 8005ccc:	e7fe      	b.n	8005ccc <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8005cce:	4b12      	ldr	r3, [pc, #72]	; (8005d18 <vTaskSuspend+0x11c>)
 8005cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cde:	e00b      	b.n	8005cf8 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <vTaskSuspend+0x110>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <vTaskSuspend+0x120>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d103      	bne.n	8005cf4 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8005cec:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <vTaskSuspend+0x104>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
	}
 8005cf2:	e001      	b.n	8005cf8 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8005cf4:	f000 fafa 	bl	80062ec <vTaskSwitchContext>
	}
 8005cf8:	bf00      	nop
 8005cfa:	3710      	adds	r7, #16
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	200006d8 	.word	0x200006d8
 8005d04:	200006dc 	.word	0x200006dc
 8005d08:	200007e0 	.word	0x200007e0
 8005d0c:	200007c4 	.word	0x200007c4
 8005d10:	200007e4 	.word	0x200007e4
 8005d14:	20000800 	.word	0x20000800
 8005d18:	e000ed04 	.word	0xe000ed04
 8005d1c:	200007d8 	.word	0x200007d8

08005d20 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	60fb      	str	r3, [r7, #12]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	4a0e      	ldr	r2, [pc, #56]	; (8005d8c <prvTaskIsTaskSuspended+0x6c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d101      	bne.n	8005d5a <prvTaskIsTaskSuspended+0x3a>
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <prvTaskIsTaskSuspended+0x3c>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00f      	beq.n	8005d80 <prvTaskIsTaskSuspended+0x60>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d64:	4a0a      	ldr	r2, [pc, #40]	; (8005d90 <prvTaskIsTaskSuspended+0x70>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00a      	beq.n	8005d80 <prvTaskIsTaskSuspended+0x60>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <prvTaskIsTaskSuspended+0x56>
 8005d72:	2301      	movs	r3, #1
 8005d74:	e000      	b.n	8005d78 <prvTaskIsTaskSuspended+0x58>
 8005d76:	2300      	movs	r3, #0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <prvTaskIsTaskSuspended+0x60>
				{
					xReturn = pdTRUE;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d80:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005d82:	4618      	mov	r0, r3
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr
 8005d8c:	200007c4 	.word	0x200007c4
 8005d90:	20000798 	.word	0x20000798

08005d94 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <vTaskResume+0x28>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	60bb      	str	r3, [r7, #8]
}
 8005db8:	bf00      	nop
 8005dba:	e7fe      	b.n	8005dba <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d039      	beq.n	8005e36 <vTaskResume+0xa2>
 8005dc2:	4b1f      	ldr	r3, [pc, #124]	; (8005e40 <vTaskResume+0xac>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d034      	beq.n	8005e36 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8005dcc:	f001 fa86 	bl	80072dc <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff ffa5 	bl	8005d20 <prvTaskIsTaskSuspended>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d02a      	beq.n	8005e32 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fe fecd 	bl	8004b80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dea:	2201      	movs	r2, #1
 8005dec:	409a      	lsls	r2, r3
 8005dee:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <vTaskResume+0xb0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	4a13      	ldr	r2, [pc, #76]	; (8005e44 <vTaskResume+0xb0>)
 8005df6:	6013      	str	r3, [r2, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4413      	add	r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4a10      	ldr	r2, [pc, #64]	; (8005e48 <vTaskResume+0xb4>)
 8005e06:	441a      	add	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	3304      	adds	r3, #4
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4610      	mov	r0, r2
 8005e10:	f7fe fe5b 	bl	8004aca <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e18:	4b09      	ldr	r3, [pc, #36]	; (8005e40 <vTaskResume+0xac>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d307      	bcc.n	8005e32 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005e22:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <vTaskResume+0xb8>)
 8005e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005e32:	f001 fa83 	bl	800733c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e36:	bf00      	nop
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	200006d8 	.word	0x200006d8
 8005e44:	200007e0 	.word	0x200007e0
 8005e48:	200006dc 	.word	0x200006dc
 8005e4c:	e000ed04 	.word	0xe000ed04

08005e50 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08a      	sub	sp, #40	; 0x28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10a      	bne.n	8005e7c <xTaskResumeFromISR+0x2c>
	__asm volatile
 8005e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	61bb      	str	r3, [r7, #24]
}
 8005e78:	bf00      	nop
 8005e7a:	e7fe      	b.n	8005e7a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e7c:	f001 faf0 	bl	8007460 <vPortValidateInterruptPriority>
	__asm volatile
 8005e80:	f3ef 8211 	mrs	r2, BASEPRI
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	617a      	str	r2, [r7, #20]
 8005e96:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005e98:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e9a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8005e9c:	6a38      	ldr	r0, [r7, #32]
 8005e9e:	f7ff ff3f 	bl	8005d20 <prvTaskIsTaskSuspended>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d02f      	beq.n	8005f08 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea8:	4b1d      	ldr	r3, [pc, #116]	; (8005f20 <xTaskResumeFromISR+0xd0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d125      	bne.n	8005efc <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb4:	4b1b      	ldr	r3, [pc, #108]	; (8005f24 <xTaskResumeFromISR+0xd4>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d301      	bcc.n	8005ec2 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fe fe5a 	bl	8004b80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	409a      	lsls	r2, r3
 8005ed4:	4b14      	ldr	r3, [pc, #80]	; (8005f28 <xTaskResumeFromISR+0xd8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	4a13      	ldr	r2, [pc, #76]	; (8005f28 <xTaskResumeFromISR+0xd8>)
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4a10      	ldr	r2, [pc, #64]	; (8005f2c <xTaskResumeFromISR+0xdc>)
 8005eec:	441a      	add	r2, r3
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f7fe fde8 	bl	8004aca <vListInsertEnd>
 8005efa:	e005      	b.n	8005f08 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	3318      	adds	r3, #24
 8005f00:	4619      	mov	r1, r3
 8005f02:	480b      	ldr	r0, [pc, #44]	; (8005f30 <xTaskResumeFromISR+0xe0>)
 8005f04:	f7fe fde1 	bl	8004aca <vListInsertEnd>
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f383 8811 	msr	BASEPRI, r3
}
 8005f12:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3728      	adds	r7, #40	; 0x28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000800 	.word	0x20000800
 8005f24:	200006d8 	.word	0x200006d8
 8005f28:	200007e0 	.word	0x200007e0
 8005f2c:	200006dc 	.word	0x200006dc
 8005f30:	20000798 	.word	0x20000798

08005f34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	; 0x28
 8005f38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f42:	463a      	mov	r2, r7
 8005f44:	1d39      	adds	r1, r7, #4
 8005f46:	f107 0308 	add.w	r3, r7, #8
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fa f908 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	9202      	str	r2, [sp, #8]
 8005f58:	9301      	str	r3, [sp, #4]
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	460a      	mov	r2, r1
 8005f62:	4921      	ldr	r1, [pc, #132]	; (8005fe8 <vTaskStartScheduler+0xb4>)
 8005f64:	4821      	ldr	r0, [pc, #132]	; (8005fec <vTaskStartScheduler+0xb8>)
 8005f66:	f7ff fc8b 	bl	8005880 <xTaskCreateStatic>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	4a20      	ldr	r2, [pc, #128]	; (8005ff0 <vTaskStartScheduler+0xbc>)
 8005f6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f70:	4b1f      	ldr	r3, [pc, #124]	; (8005ff0 <vTaskStartScheduler+0xbc>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	e001      	b.n	8005f82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d102      	bne.n	8005f8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f88:	f000 fd32 	bl	80069f0 <xTimerCreateTimerTask>
 8005f8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d116      	bne.n	8005fc2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	613b      	str	r3, [r7, #16]
}
 8005fa6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005fa8:	4b12      	ldr	r3, [pc, #72]	; (8005ff4 <vTaskStartScheduler+0xc0>)
 8005faa:	f04f 32ff 	mov.w	r2, #4294967295
 8005fae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005fb0:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <vTaskStartScheduler+0xc4>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005fb6:	4b11      	ldr	r3, [pc, #68]	; (8005ffc <vTaskStartScheduler+0xc8>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005fbc:	f001 f91c 	bl	80071f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005fc0:	e00e      	b.n	8005fe0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc8:	d10a      	bne.n	8005fe0 <vTaskStartScheduler+0xac>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	60fb      	str	r3, [r7, #12]
}
 8005fdc:	bf00      	nop
 8005fde:	e7fe      	b.n	8005fde <vTaskStartScheduler+0xaa>
}
 8005fe0:	bf00      	nop
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	0800a024 	.word	0x0800a024
 8005fec:	0800660d 	.word	0x0800660d
 8005ff0:	200007fc 	.word	0x200007fc
 8005ff4:	200007f8 	.word	0x200007f8
 8005ff8:	200007e4 	.word	0x200007e4
 8005ffc:	200007dc 	.word	0x200007dc

08006000 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006004:	4b04      	ldr	r3, [pc, #16]	; (8006018 <vTaskSuspendAll+0x18>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3301      	adds	r3, #1
 800600a:	4a03      	ldr	r2, [pc, #12]	; (8006018 <vTaskSuspendAll+0x18>)
 800600c:	6013      	str	r3, [r2, #0]
}
 800600e:	bf00      	nop
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	20000800 	.word	0x20000800

0800601c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006022:	2300      	movs	r3, #0
 8006024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006026:	2300      	movs	r3, #0
 8006028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800602a:	4b41      	ldr	r3, [pc, #260]	; (8006130 <xTaskResumeAll+0x114>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10a      	bne.n	8006048 <xTaskResumeAll+0x2c>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	603b      	str	r3, [r7, #0]
}
 8006044:	bf00      	nop
 8006046:	e7fe      	b.n	8006046 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006048:	f001 f948 	bl	80072dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800604c:	4b38      	ldr	r3, [pc, #224]	; (8006130 <xTaskResumeAll+0x114>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3b01      	subs	r3, #1
 8006052:	4a37      	ldr	r2, [pc, #220]	; (8006130 <xTaskResumeAll+0x114>)
 8006054:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006056:	4b36      	ldr	r3, [pc, #216]	; (8006130 <xTaskResumeAll+0x114>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d161      	bne.n	8006122 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800605e:	4b35      	ldr	r3, [pc, #212]	; (8006134 <xTaskResumeAll+0x118>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d05d      	beq.n	8006122 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006066:	e02e      	b.n	80060c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006068:	4b33      	ldr	r3, [pc, #204]	; (8006138 <xTaskResumeAll+0x11c>)
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	3318      	adds	r3, #24
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe fd83 	bl	8004b80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3304      	adds	r3, #4
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe fd7e 	bl	8004b80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	2201      	movs	r2, #1
 800608a:	409a      	lsls	r2, r3
 800608c:	4b2b      	ldr	r3, [pc, #172]	; (800613c <xTaskResumeAll+0x120>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4313      	orrs	r3, r2
 8006092:	4a2a      	ldr	r2, [pc, #168]	; (800613c <xTaskResumeAll+0x120>)
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4a27      	ldr	r2, [pc, #156]	; (8006140 <xTaskResumeAll+0x124>)
 80060a4:	441a      	add	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	3304      	adds	r3, #4
 80060aa:	4619      	mov	r1, r3
 80060ac:	4610      	mov	r0, r2
 80060ae:	f7fe fd0c 	bl	8004aca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b6:	4b23      	ldr	r3, [pc, #140]	; (8006144 <xTaskResumeAll+0x128>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	429a      	cmp	r2, r3
 80060be:	d302      	bcc.n	80060c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80060c0:	4b21      	ldr	r3, [pc, #132]	; (8006148 <xTaskResumeAll+0x12c>)
 80060c2:	2201      	movs	r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060c6:	4b1c      	ldr	r3, [pc, #112]	; (8006138 <xTaskResumeAll+0x11c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1cc      	bne.n	8006068 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d001      	beq.n	80060d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80060d4:	f000 fb50 	bl	8006778 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80060d8:	4b1c      	ldr	r3, [pc, #112]	; (800614c <xTaskResumeAll+0x130>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d010      	beq.n	8006106 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80060e4:	f000 f844 	bl	8006170 <xTaskIncrementTick>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d002      	beq.n	80060f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80060ee:	4b16      	ldr	r3, [pc, #88]	; (8006148 <xTaskResumeAll+0x12c>)
 80060f0:	2201      	movs	r2, #1
 80060f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1f1      	bne.n	80060e4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006100:	4b12      	ldr	r3, [pc, #72]	; (800614c <xTaskResumeAll+0x130>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006106:	4b10      	ldr	r3, [pc, #64]	; (8006148 <xTaskResumeAll+0x12c>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800610e:	2301      	movs	r3, #1
 8006110:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006112:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <xTaskResumeAll+0x134>)
 8006114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006122:	f001 f90b 	bl	800733c <vPortExitCritical>

	return xAlreadyYielded;
 8006126:	68bb      	ldr	r3, [r7, #8]
}
 8006128:	4618      	mov	r0, r3
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000800 	.word	0x20000800
 8006134:	200007d8 	.word	0x200007d8
 8006138:	20000798 	.word	0x20000798
 800613c:	200007e0 	.word	0x200007e0
 8006140:	200006dc 	.word	0x200006dc
 8006144:	200006d8 	.word	0x200006d8
 8006148:	200007ec 	.word	0x200007ec
 800614c:	200007e8 	.word	0x200007e8
 8006150:	e000ed04 	.word	0xe000ed04

08006154 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800615a:	4b04      	ldr	r3, [pc, #16]	; (800616c <xTaskGetTickCount+0x18>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006160:	687b      	ldr	r3, [r7, #4]
}
 8006162:	4618      	mov	r0, r3
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	bc80      	pop	{r7}
 800616a:	4770      	bx	lr
 800616c:	200007dc 	.word	0x200007dc

08006170 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006176:	2300      	movs	r3, #0
 8006178:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800617a:	4b51      	ldr	r3, [pc, #324]	; (80062c0 <xTaskIncrementTick+0x150>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	f040 808d 	bne.w	800629e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006184:	4b4f      	ldr	r3, [pc, #316]	; (80062c4 <xTaskIncrementTick+0x154>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	3301      	adds	r3, #1
 800618a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800618c:	4a4d      	ldr	r2, [pc, #308]	; (80062c4 <xTaskIncrementTick+0x154>)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d120      	bne.n	80061da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006198:	4b4b      	ldr	r3, [pc, #300]	; (80062c8 <xTaskIncrementTick+0x158>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00a      	beq.n	80061b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	603b      	str	r3, [r7, #0]
}
 80061b4:	bf00      	nop
 80061b6:	e7fe      	b.n	80061b6 <xTaskIncrementTick+0x46>
 80061b8:	4b43      	ldr	r3, [pc, #268]	; (80062c8 <xTaskIncrementTick+0x158>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	4b43      	ldr	r3, [pc, #268]	; (80062cc <xTaskIncrementTick+0x15c>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a41      	ldr	r2, [pc, #260]	; (80062c8 <xTaskIncrementTick+0x158>)
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	4a41      	ldr	r2, [pc, #260]	; (80062cc <xTaskIncrementTick+0x15c>)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	4b40      	ldr	r3, [pc, #256]	; (80062d0 <xTaskIncrementTick+0x160>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3301      	adds	r3, #1
 80061d2:	4a3f      	ldr	r2, [pc, #252]	; (80062d0 <xTaskIncrementTick+0x160>)
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	f000 facf 	bl	8006778 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80061da:	4b3e      	ldr	r3, [pc, #248]	; (80062d4 <xTaskIncrementTick+0x164>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d34d      	bcc.n	8006280 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061e4:	4b38      	ldr	r3, [pc, #224]	; (80062c8 <xTaskIncrementTick+0x158>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <xTaskIncrementTick+0x82>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <xTaskIncrementTick+0x84>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061f8:	4b36      	ldr	r3, [pc, #216]	; (80062d4 <xTaskIncrementTick+0x164>)
 80061fa:	f04f 32ff 	mov.w	r2, #4294967295
 80061fe:	601a      	str	r2, [r3, #0]
					break;
 8006200:	e03e      	b.n	8006280 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006202:	4b31      	ldr	r3, [pc, #196]	; (80062c8 <xTaskIncrementTick+0x158>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	429a      	cmp	r2, r3
 8006218:	d203      	bcs.n	8006222 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800621a:	4a2e      	ldr	r2, [pc, #184]	; (80062d4 <xTaskIncrementTick+0x164>)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6013      	str	r3, [r2, #0]
						break;
 8006220:	e02e      	b.n	8006280 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	3304      	adds	r3, #4
 8006226:	4618      	mov	r0, r3
 8006228:	f7fe fcaa 	bl	8004b80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	3318      	adds	r3, #24
 8006238:	4618      	mov	r0, r3
 800623a:	f7fe fca1 	bl	8004b80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006242:	2201      	movs	r2, #1
 8006244:	409a      	lsls	r2, r3
 8006246:	4b24      	ldr	r3, [pc, #144]	; (80062d8 <xTaskIncrementTick+0x168>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4313      	orrs	r3, r2
 800624c:	4a22      	ldr	r2, [pc, #136]	; (80062d8 <xTaskIncrementTick+0x168>)
 800624e:	6013      	str	r3, [r2, #0]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4a1f      	ldr	r2, [pc, #124]	; (80062dc <xTaskIncrementTick+0x16c>)
 800625e:	441a      	add	r2, r3
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	3304      	adds	r3, #4
 8006264:	4619      	mov	r1, r3
 8006266:	4610      	mov	r0, r2
 8006268:	f7fe fc2f 	bl	8004aca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006270:	4b1b      	ldr	r3, [pc, #108]	; (80062e0 <xTaskIncrementTick+0x170>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006276:	429a      	cmp	r2, r3
 8006278:	d3b4      	bcc.n	80061e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800627a:	2301      	movs	r3, #1
 800627c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800627e:	e7b1      	b.n	80061e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006280:	4b17      	ldr	r3, [pc, #92]	; (80062e0 <xTaskIncrementTick+0x170>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006286:	4915      	ldr	r1, [pc, #84]	; (80062dc <xTaskIncrementTick+0x16c>)
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	440b      	add	r3, r1
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d907      	bls.n	80062a8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006298:	2301      	movs	r3, #1
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e004      	b.n	80062a8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800629e:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <xTaskIncrementTick+0x174>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3301      	adds	r3, #1
 80062a4:	4a0f      	ldr	r2, [pc, #60]	; (80062e4 <xTaskIncrementTick+0x174>)
 80062a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80062a8:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <xTaskIncrementTick+0x178>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80062b0:	2301      	movs	r3, #1
 80062b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80062b4:	697b      	ldr	r3, [r7, #20]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3718      	adds	r7, #24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000800 	.word	0x20000800
 80062c4:	200007dc 	.word	0x200007dc
 80062c8:	20000790 	.word	0x20000790
 80062cc:	20000794 	.word	0x20000794
 80062d0:	200007f0 	.word	0x200007f0
 80062d4:	200007f8 	.word	0x200007f8
 80062d8:	200007e0 	.word	0x200007e0
 80062dc:	200006dc 	.word	0x200006dc
 80062e0:	200006d8 	.word	0x200006d8
 80062e4:	200007e8 	.word	0x200007e8
 80062e8:	200007ec 	.word	0x200007ec

080062ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80062f2:	4b26      	ldr	r3, [pc, #152]	; (800638c <vTaskSwitchContext+0xa0>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062fa:	4b25      	ldr	r3, [pc, #148]	; (8006390 <vTaskSwitchContext+0xa4>)
 80062fc:	2201      	movs	r2, #1
 80062fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006300:	e03f      	b.n	8006382 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006302:	4b23      	ldr	r3, [pc, #140]	; (8006390 <vTaskSwitchContext+0xa4>)
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006308:	4b22      	ldr	r3, [pc, #136]	; (8006394 <vTaskSwitchContext+0xa8>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	fab3 f383 	clz	r3, r3
 8006314:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006316:	7afb      	ldrb	r3, [r7, #11]
 8006318:	f1c3 031f 	rsb	r3, r3, #31
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	491e      	ldr	r1, [pc, #120]	; (8006398 <vTaskSwitchContext+0xac>)
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4613      	mov	r3, r2
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	440b      	add	r3, r1
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	607b      	str	r3, [r7, #4]
}
 8006344:	bf00      	nop
 8006346:	e7fe      	b.n	8006346 <vTaskSwitchContext+0x5a>
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4a11      	ldr	r2, [pc, #68]	; (8006398 <vTaskSwitchContext+0xac>)
 8006354:	4413      	add	r3, r2
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	605a      	str	r2, [r3, #4]
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	3308      	adds	r3, #8
 800636a:	429a      	cmp	r2, r3
 800636c:	d104      	bne.n	8006378 <vTaskSwitchContext+0x8c>
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	605a      	str	r2, [r3, #4]
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	4a07      	ldr	r2, [pc, #28]	; (800639c <vTaskSwitchContext+0xb0>)
 8006380:	6013      	str	r3, [r2, #0]
}
 8006382:	bf00      	nop
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr
 800638c:	20000800 	.word	0x20000800
 8006390:	200007ec 	.word	0x200007ec
 8006394:	200007e0 	.word	0x200007e0
 8006398:	200006dc 	.word	0x200006dc
 800639c:	200006d8 	.word	0x200006d8

080063a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	f383 8811 	msr	BASEPRI, r3
 80063b8:	f3bf 8f6f 	isb	sy
 80063bc:	f3bf 8f4f 	dsb	sy
 80063c0:	60fb      	str	r3, [r7, #12]
}
 80063c2:	bf00      	nop
 80063c4:	e7fe      	b.n	80063c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063c6:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <vTaskPlaceOnEventList+0x44>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3318      	adds	r3, #24
 80063cc:	4619      	mov	r1, r3
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fe fb9e 	bl	8004b10 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80063d4:	2101      	movs	r1, #1
 80063d6:	6838      	ldr	r0, [r7, #0]
 80063d8:	f000 faa4 	bl	8006924 <prvAddCurrentTaskToDelayedList>
}
 80063dc:	bf00      	nop
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	200006d8 	.word	0x200006d8

080063e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	617b      	str	r3, [r7, #20]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <vTaskPlaceOnEventListRestricted+0x54>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3318      	adds	r3, #24
 8006416:	4619      	mov	r1, r3
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7fe fb56 	bl	8004aca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006424:	f04f 33ff 	mov.w	r3, #4294967295
 8006428:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	68b8      	ldr	r0, [r7, #8]
 800642e:	f000 fa79 	bl	8006924 <prvAddCurrentTaskToDelayedList>
	}
 8006432:	bf00      	nop
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	200006d8 	.word	0x200006d8

08006440 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	60fb      	str	r3, [r7, #12]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	3318      	adds	r3, #24
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe fb85 	bl	8004b80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006476:	4b1d      	ldr	r3, [pc, #116]	; (80064ec <xTaskRemoveFromEventList+0xac>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d11c      	bne.n	80064b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	3304      	adds	r3, #4
 8006482:	4618      	mov	r0, r3
 8006484:	f7fe fb7c 	bl	8004b80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	2201      	movs	r2, #1
 800648e:	409a      	lsls	r2, r3
 8006490:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <xTaskRemoveFromEventList+0xb0>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4313      	orrs	r3, r2
 8006496:	4a16      	ldr	r2, [pc, #88]	; (80064f0 <xTaskRemoveFromEventList+0xb0>)
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4a13      	ldr	r2, [pc, #76]	; (80064f4 <xTaskRemoveFromEventList+0xb4>)
 80064a8:	441a      	add	r2, r3
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	3304      	adds	r3, #4
 80064ae:	4619      	mov	r1, r3
 80064b0:	4610      	mov	r0, r2
 80064b2:	f7fe fb0a 	bl	8004aca <vListInsertEnd>
 80064b6:	e005      	b.n	80064c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	3318      	adds	r3, #24
 80064bc:	4619      	mov	r1, r3
 80064be:	480e      	ldr	r0, [pc, #56]	; (80064f8 <xTaskRemoveFromEventList+0xb8>)
 80064c0:	f7fe fb03 	bl	8004aca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c8:	4b0c      	ldr	r3, [pc, #48]	; (80064fc <xTaskRemoveFromEventList+0xbc>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d905      	bls.n	80064de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80064d2:	2301      	movs	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80064d6:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <xTaskRemoveFromEventList+0xc0>)
 80064d8:	2201      	movs	r2, #1
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	e001      	b.n	80064e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80064e2:	697b      	ldr	r3, [r7, #20]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	20000800 	.word	0x20000800
 80064f0:	200007e0 	.word	0x200007e0
 80064f4:	200006dc 	.word	0x200006dc
 80064f8:	20000798 	.word	0x20000798
 80064fc:	200006d8 	.word	0x200006d8
 8006500:	200007ec 	.word	0x200007ec

08006504 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800650c:	4b06      	ldr	r3, [pc, #24]	; (8006528 <vTaskInternalSetTimeOutState+0x24>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <vTaskInternalSetTimeOutState+0x28>)
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	605a      	str	r2, [r3, #4]
}
 800651c:	bf00      	nop
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	200007f0 	.word	0x200007f0
 800652c:	200007dc 	.word	0x200007dc

08006530 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d10a      	bne.n	8006556 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006544:	f383 8811 	msr	BASEPRI, r3
 8006548:	f3bf 8f6f 	isb	sy
 800654c:	f3bf 8f4f 	dsb	sy
 8006550:	613b      	str	r3, [r7, #16]
}
 8006552:	bf00      	nop
 8006554:	e7fe      	b.n	8006554 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	60fb      	str	r3, [r7, #12]
}
 800656e:	bf00      	nop
 8006570:	e7fe      	b.n	8006570 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006572:	f000 feb3 	bl	80072dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006576:	4b1d      	ldr	r3, [pc, #116]	; (80065ec <xTaskCheckForTimeOut+0xbc>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658e:	d102      	bne.n	8006596 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006590:	2300      	movs	r3, #0
 8006592:	61fb      	str	r3, [r7, #28]
 8006594:	e023      	b.n	80065de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4b15      	ldr	r3, [pc, #84]	; (80065f0 <xTaskCheckForTimeOut+0xc0>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	429a      	cmp	r2, r3
 80065a0:	d007      	beq.n	80065b2 <xTaskCheckForTimeOut+0x82>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d302      	bcc.n	80065b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80065ac:	2301      	movs	r3, #1
 80065ae:	61fb      	str	r3, [r7, #28]
 80065b0:	e015      	b.n	80065de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d20b      	bcs.n	80065d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	1ad2      	subs	r2, r2, r3
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff ff9b 	bl	8006504 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	e004      	b.n	80065de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80065da:	2301      	movs	r3, #1
 80065dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80065de:	f000 fead 	bl	800733c <vPortExitCritical>

	return xReturn;
 80065e2:	69fb      	ldr	r3, [r7, #28]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3720      	adds	r7, #32
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	200007dc 	.word	0x200007dc
 80065f0:	200007f0 	.word	0x200007f0

080065f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065f8:	4b03      	ldr	r3, [pc, #12]	; (8006608 <vTaskMissedYield+0x14>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
}
 80065fe:	bf00      	nop
 8006600:	46bd      	mov	sp, r7
 8006602:	bc80      	pop	{r7}
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	200007ec 	.word	0x200007ec

0800660c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006614:	f000 f852 	bl	80066bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006618:	4b06      	ldr	r3, [pc, #24]	; (8006634 <prvIdleTask+0x28>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d9f9      	bls.n	8006614 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006620:	4b05      	ldr	r3, [pc, #20]	; (8006638 <prvIdleTask+0x2c>)
 8006622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006630:	e7f0      	b.n	8006614 <prvIdleTask+0x8>
 8006632:	bf00      	nop
 8006634:	200006dc 	.word	0x200006dc
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006642:	2300      	movs	r3, #0
 8006644:	607b      	str	r3, [r7, #4]
 8006646:	e00c      	b.n	8006662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4a12      	ldr	r2, [pc, #72]	; (800669c <prvInitialiseTaskLists+0x60>)
 8006654:	4413      	add	r3, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe fa0c 	bl	8004a74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3301      	adds	r3, #1
 8006660:	607b      	str	r3, [r7, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b06      	cmp	r3, #6
 8006666:	d9ef      	bls.n	8006648 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006668:	480d      	ldr	r0, [pc, #52]	; (80066a0 <prvInitialiseTaskLists+0x64>)
 800666a:	f7fe fa03 	bl	8004a74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800666e:	480d      	ldr	r0, [pc, #52]	; (80066a4 <prvInitialiseTaskLists+0x68>)
 8006670:	f7fe fa00 	bl	8004a74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006674:	480c      	ldr	r0, [pc, #48]	; (80066a8 <prvInitialiseTaskLists+0x6c>)
 8006676:	f7fe f9fd 	bl	8004a74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800667a:	480c      	ldr	r0, [pc, #48]	; (80066ac <prvInitialiseTaskLists+0x70>)
 800667c:	f7fe f9fa 	bl	8004a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006680:	480b      	ldr	r0, [pc, #44]	; (80066b0 <prvInitialiseTaskLists+0x74>)
 8006682:	f7fe f9f7 	bl	8004a74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006686:	4b0b      	ldr	r3, [pc, #44]	; (80066b4 <prvInitialiseTaskLists+0x78>)
 8006688:	4a05      	ldr	r2, [pc, #20]	; (80066a0 <prvInitialiseTaskLists+0x64>)
 800668a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800668c:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <prvInitialiseTaskLists+0x7c>)
 800668e:	4a05      	ldr	r2, [pc, #20]	; (80066a4 <prvInitialiseTaskLists+0x68>)
 8006690:	601a      	str	r2, [r3, #0]
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	200006dc 	.word	0x200006dc
 80066a0:	20000768 	.word	0x20000768
 80066a4:	2000077c 	.word	0x2000077c
 80066a8:	20000798 	.word	0x20000798
 80066ac:	200007ac 	.word	0x200007ac
 80066b0:	200007c4 	.word	0x200007c4
 80066b4:	20000790 	.word	0x20000790
 80066b8:	20000794 	.word	0x20000794

080066bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066c2:	e019      	b.n	80066f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066c4:	f000 fe0a 	bl	80072dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80066c8:	4b10      	ldr	r3, [pc, #64]	; (800670c <prvCheckTasksWaitingTermination+0x50>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3304      	adds	r3, #4
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7fe fa53 	bl	8004b80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80066da:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <prvCheckTasksWaitingTermination+0x54>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3b01      	subs	r3, #1
 80066e0:	4a0b      	ldr	r2, [pc, #44]	; (8006710 <prvCheckTasksWaitingTermination+0x54>)
 80066e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066e4:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <prvCheckTasksWaitingTermination+0x58>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	4a0a      	ldr	r2, [pc, #40]	; (8006714 <prvCheckTasksWaitingTermination+0x58>)
 80066ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066ee:	f000 fe25 	bl	800733c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f810 	bl	8006718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066f8:	4b06      	ldr	r3, [pc, #24]	; (8006714 <prvCheckTasksWaitingTermination+0x58>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1e1      	bne.n	80066c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006700:	bf00      	nop
 8006702:	bf00      	nop
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	200007ac 	.word	0x200007ac
 8006710:	200007d8 	.word	0x200007d8
 8006714:	200007c0 	.word	0x200007c0

08006718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006726:	2b00      	cmp	r3, #0
 8006728:	d108      	bne.n	800673c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672e:	4618      	mov	r0, r3
 8006730:	f000 ff98 	bl	8007664 <vPortFree>
				vPortFree( pxTCB );
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 ff95 	bl	8007664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800673a:	e018      	b.n	800676e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006742:	2b01      	cmp	r3, #1
 8006744:	d103      	bne.n	800674e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 ff8c 	bl	8007664 <vPortFree>
	}
 800674c:	e00f      	b.n	800676e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006754:	2b02      	cmp	r3, #2
 8006756:	d00a      	beq.n	800676e <prvDeleteTCB+0x56>
	__asm volatile
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	60fb      	str	r3, [r7, #12]
}
 800676a:	bf00      	nop
 800676c:	e7fe      	b.n	800676c <prvDeleteTCB+0x54>
	}
 800676e:	bf00      	nop
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800677e:	4b0e      	ldr	r3, [pc, #56]	; (80067b8 <prvResetNextTaskUnblockTime+0x40>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <prvResetNextTaskUnblockTime+0x14>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <prvResetNextTaskUnblockTime+0x16>
 800678c:	2300      	movs	r3, #0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006792:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <prvResetNextTaskUnblockTime+0x44>)
 8006794:	f04f 32ff 	mov.w	r2, #4294967295
 8006798:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800679a:	e008      	b.n	80067ae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800679c:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <prvResetNextTaskUnblockTime+0x40>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	4a04      	ldr	r2, [pc, #16]	; (80067bc <prvResetNextTaskUnblockTime+0x44>)
 80067ac:	6013      	str	r3, [r2, #0]
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bc80      	pop	{r7}
 80067b6:	4770      	bx	lr
 80067b8:	20000790 	.word	0x20000790
 80067bc:	200007f8 	.word	0x200007f8

080067c0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80067c6:	4b04      	ldr	r3, [pc, #16]	; (80067d8 <xTaskGetCurrentTaskHandle+0x18>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	607b      	str	r3, [r7, #4]

		return xReturn;
 80067cc:	687b      	ldr	r3, [r7, #4]
	}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr
 80067d8:	200006d8 	.word	0x200006d8

080067dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80067e2:	4b0b      	ldr	r3, [pc, #44]	; (8006810 <xTaskGetSchedulerState+0x34>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d102      	bne.n	80067f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80067ea:	2301      	movs	r3, #1
 80067ec:	607b      	str	r3, [r7, #4]
 80067ee:	e008      	b.n	8006802 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067f0:	4b08      	ldr	r3, [pc, #32]	; (8006814 <xTaskGetSchedulerState+0x38>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d102      	bne.n	80067fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067f8:	2302      	movs	r3, #2
 80067fa:	607b      	str	r3, [r7, #4]
 80067fc:	e001      	b.n	8006802 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067fe:	2300      	movs	r3, #0
 8006800:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006802:	687b      	ldr	r3, [r7, #4]
	}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	bc80      	pop	{r7}
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	200007e4 	.word	0x200007e4
 8006814:	20000800 	.word	0x20000800

08006818 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d06e      	beq.n	800690c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800682e:	4b3a      	ldr	r3, [pc, #232]	; (8006918 <xTaskPriorityDisinherit+0x100>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	429a      	cmp	r2, r3
 8006836:	d00a      	beq.n	800684e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	60fb      	str	r3, [r7, #12]
}
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685a:	f383 8811 	msr	BASEPRI, r3
 800685e:	f3bf 8f6f 	isb	sy
 8006862:	f3bf 8f4f 	dsb	sy
 8006866:	60bb      	str	r3, [r7, #8]
}
 8006868:	bf00      	nop
 800686a:	e7fe      	b.n	800686a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006870:	1e5a      	subs	r2, r3, #1
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687e:	429a      	cmp	r2, r3
 8006880:	d044      	beq.n	800690c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006886:	2b00      	cmp	r3, #0
 8006888:	d140      	bne.n	800690c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	3304      	adds	r3, #4
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe f976 	bl	8004b80 <uxListRemove>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d115      	bne.n	80068c6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800689e:	491f      	ldr	r1, [pc, #124]	; (800691c <xTaskPriorityDisinherit+0x104>)
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	440b      	add	r3, r1
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10a      	bne.n	80068c6 <xTaskPriorityDisinherit+0xae>
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	2201      	movs	r2, #1
 80068b6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ba:	43da      	mvns	r2, r3
 80068bc:	4b18      	ldr	r3, [pc, #96]	; (8006920 <xTaskPriorityDisinherit+0x108>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4013      	ands	r3, r2
 80068c2:	4a17      	ldr	r2, [pc, #92]	; (8006920 <xTaskPriorityDisinherit+0x108>)
 80068c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d2:	f1c3 0207 	rsb	r2, r3, #7
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	2201      	movs	r2, #1
 80068e0:	409a      	lsls	r2, r3
 80068e2:	4b0f      	ldr	r3, [pc, #60]	; (8006920 <xTaskPriorityDisinherit+0x108>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	4a0d      	ldr	r2, [pc, #52]	; (8006920 <xTaskPriorityDisinherit+0x108>)
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4a08      	ldr	r2, [pc, #32]	; (800691c <xTaskPriorityDisinherit+0x104>)
 80068fa:	441a      	add	r2, r3
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	3304      	adds	r3, #4
 8006900:	4619      	mov	r1, r3
 8006902:	4610      	mov	r0, r2
 8006904:	f7fe f8e1 	bl	8004aca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006908:	2301      	movs	r3, #1
 800690a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800690c:	697b      	ldr	r3, [r7, #20]
	}
 800690e:	4618      	mov	r0, r3
 8006910:	3718      	adds	r7, #24
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	200006d8 	.word	0x200006d8
 800691c:	200006dc 	.word	0x200006dc
 8006920:	200007e0 	.word	0x200007e0

08006924 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800692e:	4b29      	ldr	r3, [pc, #164]	; (80069d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006934:	4b28      	ldr	r3, [pc, #160]	; (80069d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3304      	adds	r3, #4
 800693a:	4618      	mov	r0, r3
 800693c:	f7fe f920 	bl	8004b80 <uxListRemove>
 8006940:	4603      	mov	r3, r0
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10b      	bne.n	800695e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006946:	4b24      	ldr	r3, [pc, #144]	; (80069d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	2201      	movs	r2, #1
 800694e:	fa02 f303 	lsl.w	r3, r2, r3
 8006952:	43da      	mvns	r2, r3
 8006954:	4b21      	ldr	r3, [pc, #132]	; (80069dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4013      	ands	r3, r2
 800695a:	4a20      	ldr	r2, [pc, #128]	; (80069dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800695c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006964:	d10a      	bne.n	800697c <prvAddCurrentTaskToDelayedList+0x58>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d007      	beq.n	800697c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800696c:	4b1a      	ldr	r3, [pc, #104]	; (80069d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3304      	adds	r3, #4
 8006972:	4619      	mov	r1, r3
 8006974:	481a      	ldr	r0, [pc, #104]	; (80069e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006976:	f7fe f8a8 	bl	8004aca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800697a:	e026      	b.n	80069ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4413      	add	r3, r2
 8006982:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006984:	4b14      	ldr	r3, [pc, #80]	; (80069d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	429a      	cmp	r2, r3
 8006992:	d209      	bcs.n	80069a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006994:	4b13      	ldr	r3, [pc, #76]	; (80069e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3304      	adds	r3, #4
 800699e:	4619      	mov	r1, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	f7fe f8b5 	bl	8004b10 <vListInsert>
}
 80069a6:	e010      	b.n	80069ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069a8:	4b0f      	ldr	r3, [pc, #60]	; (80069e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3304      	adds	r3, #4
 80069b2:	4619      	mov	r1, r3
 80069b4:	4610      	mov	r0, r2
 80069b6:	f7fe f8ab 	bl	8004b10 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069ba:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d202      	bcs.n	80069ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80069c4:	4a09      	ldr	r2, [pc, #36]	; (80069ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	6013      	str	r3, [r2, #0]
}
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	200007dc 	.word	0x200007dc
 80069d8:	200006d8 	.word	0x200006d8
 80069dc:	200007e0 	.word	0x200007e0
 80069e0:	200007c4 	.word	0x200007c4
 80069e4:	20000794 	.word	0x20000794
 80069e8:	20000790 	.word	0x20000790
 80069ec:	200007f8 	.word	0x200007f8

080069f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	; 0x28
 80069f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80069fa:	f000 fb41 	bl	8007080 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80069fe:	4b1c      	ldr	r3, [pc, #112]	; (8006a70 <xTimerCreateTimerTask+0x80>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d021      	beq.n	8006a4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a0e:	1d3a      	adds	r2, r7, #4
 8006a10:	f107 0108 	add.w	r1, r7, #8
 8006a14:	f107 030c 	add.w	r3, r7, #12
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7f9 fbb9 	bl	8000190 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	9202      	str	r2, [sp, #8]
 8006a26:	9301      	str	r3, [sp, #4]
 8006a28:	2303      	movs	r3, #3
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	460a      	mov	r2, r1
 8006a30:	4910      	ldr	r1, [pc, #64]	; (8006a74 <xTimerCreateTimerTask+0x84>)
 8006a32:	4811      	ldr	r0, [pc, #68]	; (8006a78 <xTimerCreateTimerTask+0x88>)
 8006a34:	f7fe ff24 	bl	8005880 <xTaskCreateStatic>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	4a10      	ldr	r2, [pc, #64]	; (8006a7c <xTimerCreateTimerTask+0x8c>)
 8006a3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a3e:	4b0f      	ldr	r3, [pc, #60]	; (8006a7c <xTimerCreateTimerTask+0x8c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a46:	2301      	movs	r3, #1
 8006a48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10a      	bne.n	8006a66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	613b      	str	r3, [r7, #16]
}
 8006a62:	bf00      	nop
 8006a64:	e7fe      	b.n	8006a64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a66:	697b      	ldr	r3, [r7, #20]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3718      	adds	r7, #24
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	20000834 	.word	0x20000834
 8006a74:	0800a02c 	.word	0x0800a02c
 8006a78:	08006cbd 	.word	0x08006cbd
 8006a7c:	20000838 	.word	0x20000838

08006a80 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b088      	sub	sp, #32
 8006a84:	af02      	add	r7, sp, #8
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006a8e:	202c      	movs	r0, #44	; 0x2c
 8006a90:	f000 fd24 	bl	80074dc <pvPortMalloc>
 8006a94:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00d      	beq.n	8006ab8 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 f846 	bl	8006b3c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8006ab8:	697b      	ldr	r3, [r7, #20]
	}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b08a      	sub	sp, #40	; 0x28
 8006ac6:	af02      	add	r7, sp, #8
 8006ac8:	60f8      	str	r0, [r7, #12]
 8006aca:	60b9      	str	r1, [r7, #8]
 8006acc:	607a      	str	r2, [r7, #4]
 8006ace:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006ad0:	232c      	movs	r3, #44	; 0x2c
 8006ad2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b2c      	cmp	r3, #44	; 0x2c
 8006ad8:	d00a      	beq.n	8006af0 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	61bb      	str	r3, [r7, #24]
}
 8006aec:	bf00      	nop
 8006aee:	e7fe      	b.n	8006aee <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10a      	bne.n	8006b0c <xTimerCreateStatic+0x4a>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	617b      	str	r3, [r7, #20]
}
 8006b08:	bf00      	nop
 8006b0a:	e7fe      	b.n	8006b0a <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00d      	beq.n	8006b32 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	9301      	str	r3, [sp, #4]
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	68b9      	ldr	r1, [r7, #8]
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 f809 	bl	8006b3c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8006b32:	69fb      	ldr	r3, [r7, #28]
	}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3720      	adds	r7, #32
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	617b      	str	r3, [r7, #20]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d015      	beq.n	8006b98 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006b6c:	f000 fa88 	bl	8007080 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	6a3a      	ldr	r2, [r7, #32]
 8006b8c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b90:	3304      	adds	r3, #4
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fd ff8d 	bl	8004ab2 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006b98:	bf00      	nop
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	; 0x28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <xTimerGenericCommand+0x2e>
	__asm volatile
 8006bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbc:	f383 8811 	msr	BASEPRI, r3
 8006bc0:	f3bf 8f6f 	isb	sy
 8006bc4:	f3bf 8f4f 	dsb	sy
 8006bc8:	623b      	str	r3, [r7, #32]
}
 8006bca:	bf00      	nop
 8006bcc:	e7fe      	b.n	8006bcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bce:	4b1a      	ldr	r3, [pc, #104]	; (8006c38 <xTimerGenericCommand+0x98>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d02a      	beq.n	8006c2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b05      	cmp	r3, #5
 8006be6:	dc18      	bgt.n	8006c1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006be8:	f7ff fdf8 	bl	80067dc <xTaskGetSchedulerState>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b02      	cmp	r3, #2
 8006bf0:	d109      	bne.n	8006c06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bf2:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <xTimerGenericCommand+0x98>)
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	f107 0114 	add.w	r1, r7, #20
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bfe:	f7fe f9dd 	bl	8004fbc <xQueueGenericSend>
 8006c02:	6278      	str	r0, [r7, #36]	; 0x24
 8006c04:	e012      	b.n	8006c2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c06:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <xTimerGenericCommand+0x98>)
 8006c08:	6818      	ldr	r0, [r3, #0]
 8006c0a:	f107 0114 	add.w	r1, r7, #20
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2200      	movs	r2, #0
 8006c12:	f7fe f9d3 	bl	8004fbc <xQueueGenericSend>
 8006c16:	6278      	str	r0, [r7, #36]	; 0x24
 8006c18:	e008      	b.n	8006c2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c1a:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <xTimerGenericCommand+0x98>)
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	f107 0114 	add.w	r1, r7, #20
 8006c22:	2300      	movs	r3, #0
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	f7fe fac7 	bl	80051b8 <xQueueGenericSendFromISR>
 8006c2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3728      	adds	r7, #40	; 0x28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000834 	.word	0x20000834

08006c3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c46:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <prvProcessExpiredTimer+0x7c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	3304      	adds	r3, #4
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fd ff93 	bl	8004b80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d122      	bne.n	8006ca8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	699a      	ldr	r2, [r3, #24]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	18d1      	adds	r1, r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	6978      	ldr	r0, [r7, #20]
 8006c70:	f000 f8c8 	bl	8006e04 <prvInsertTimerInActiveList>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d016      	beq.n	8006ca8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	9300      	str	r3, [sp, #0]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	2100      	movs	r1, #0
 8006c84:	6978      	ldr	r0, [r7, #20]
 8006c86:	f7ff ff8b 	bl	8006ba0 <xTimerGenericCommand>
 8006c8a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	60fb      	str	r3, [r7, #12]
}
 8006ca4:	bf00      	nop
 8006ca6:	e7fe      	b.n	8006ca6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	6978      	ldr	r0, [r7, #20]
 8006cae:	4798      	blx	r3
}
 8006cb0:	bf00      	nop
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	2000082c 	.word	0x2000082c

08006cbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cc4:	f107 0308 	add.w	r3, r7, #8
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 f857 	bl	8006d7c <prvGetNextExpireTime>
 8006cce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 f803 	bl	8006ce0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006cda:	f000 f8d5 	bl	8006e88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cde:	e7f1      	b.n	8006cc4 <prvTimerTask+0x8>

08006ce0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006cea:	f7ff f989 	bl	8006000 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cee:	f107 0308 	add.w	r3, r7, #8
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 f866 	bl	8006dc4 <prvSampleTimeNow>
 8006cf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d130      	bne.n	8006d62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10a      	bne.n	8006d1c <prvProcessTimerOrBlockTask+0x3c>
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d806      	bhi.n	8006d1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d0e:	f7ff f985 	bl	800601c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d12:	68f9      	ldr	r1, [r7, #12]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff ff91 	bl	8006c3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d1a:	e024      	b.n	8006d66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d008      	beq.n	8006d34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d22:	4b13      	ldr	r3, [pc, #76]	; (8006d70 <prvProcessTimerOrBlockTask+0x90>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	bf0c      	ite	eq
 8006d2c:	2301      	moveq	r3, #1
 8006d2e:	2300      	movne	r3, #0
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d34:	4b0f      	ldr	r3, [pc, #60]	; (8006d74 <prvProcessTimerOrBlockTask+0x94>)
 8006d36:	6818      	ldr	r0, [r3, #0]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	4619      	mov	r1, r3
 8006d42:	f7fe fd69 	bl	8005818 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d46:	f7ff f969 	bl	800601c <xTaskResumeAll>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d50:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <prvProcessTimerOrBlockTask+0x98>)
 8006d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	f3bf 8f6f 	isb	sy
}
 8006d60:	e001      	b.n	8006d66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d62:	f7ff f95b 	bl	800601c <xTaskResumeAll>
}
 8006d66:	bf00      	nop
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20000830 	.word	0x20000830
 8006d74:	20000834 	.word	0x20000834
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d84:	4b0e      	ldr	r3, [pc, #56]	; (8006dc0 <prvGetNextExpireTime+0x44>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	bf0c      	ite	eq
 8006d8e:	2301      	moveq	r3, #1
 8006d90:	2300      	movne	r3, #0
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	461a      	mov	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d105      	bne.n	8006dae <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006da2:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <prvGetNextExpireTime+0x44>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	e001      	b.n	8006db2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006db2:	68fb      	ldr	r3, [r7, #12]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bc80      	pop	{r7}
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	2000082c 	.word	0x2000082c

08006dc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006dcc:	f7ff f9c2 	bl	8006154 <xTaskGetTickCount>
 8006dd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <prvSampleTimeNow+0x3c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d205      	bcs.n	8006de8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ddc:	f000 f8ee 	bl	8006fbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	601a      	str	r2, [r3, #0]
 8006de6:	e002      	b.n	8006dee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006dee:	4a04      	ldr	r2, [pc, #16]	; (8006e00 <prvSampleTimeNow+0x3c>)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006df4:	68fb      	ldr	r3, [r7, #12]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	2000083c 	.word	0x2000083c

08006e04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	68ba      	ldr	r2, [r7, #8]
 8006e1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d812      	bhi.n	8006e50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	1ad2      	subs	r2, r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d302      	bcc.n	8006e3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	e01b      	b.n	8006e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e3e:	4b10      	ldr	r3, [pc, #64]	; (8006e80 <prvInsertTimerInActiveList+0x7c>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3304      	adds	r3, #4
 8006e46:	4619      	mov	r1, r3
 8006e48:	4610      	mov	r0, r2
 8006e4a:	f7fd fe61 	bl	8004b10 <vListInsert>
 8006e4e:	e012      	b.n	8006e76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d206      	bcs.n	8006e66 <prvInsertTimerInActiveList+0x62>
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d302      	bcc.n	8006e66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e60:	2301      	movs	r3, #1
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	e007      	b.n	8006e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e66:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <prvInsertTimerInActiveList+0x80>)
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4610      	mov	r0, r2
 8006e72:	f7fd fe4d 	bl	8004b10 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e76:	697b      	ldr	r3, [r7, #20]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3718      	adds	r7, #24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	20000830 	.word	0x20000830
 8006e84:	2000082c 	.word	0x2000082c

08006e88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08c      	sub	sp, #48	; 0x30
 8006e8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e8e:	e081      	b.n	8006f94 <prvProcessReceivedCommands+0x10c>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	db7d      	blt.n	8006f92 <prvProcessReceivedCommands+0x10a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fd fe6a 	bl	8004b80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006eac:	1d3b      	adds	r3, r7, #4
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff ff88 	bl	8006dc4 <prvSampleTimeNow>
 8006eb4:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b09      	cmp	r3, #9
 8006eba:	d86b      	bhi.n	8006f94 <prvProcessReceivedCommands+0x10c>
 8006ebc:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <prvProcessReceivedCommands+0x3c>)
 8006ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec2:	bf00      	nop
 8006ec4:	08006eed 	.word	0x08006eed
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006eed 	.word	0x08006eed
 8006ed0:	08006f95 	.word	0x08006f95
 8006ed4:	08006f49 	.word	0x08006f49
 8006ed8:	08006f81 	.word	0x08006f81
 8006edc:	08006eed 	.word	0x08006eed
 8006ee0:	08006eed 	.word	0x08006eed
 8006ee4:	08006f95 	.word	0x08006f95
 8006ee8:	08006f49 	.word	0x08006f49
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	18d1      	adds	r1, r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6a3a      	ldr	r2, [r7, #32]
 8006ef8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006efa:	f7ff ff83 	bl	8006e04 <prvInsertTimerInActiveList>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d047      	beq.n	8006f94 <prvProcessReceivedCommands+0x10c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f0a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d13f      	bne.n	8006f94 <prvProcessReceivedCommands+0x10c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	441a      	add	r2, r3
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	2300      	movs	r3, #0
 8006f22:	2100      	movs	r1, #0
 8006f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f26:	f7ff fe3b 	bl	8006ba0 <xTimerGenericCommand>
 8006f2a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d130      	bne.n	8006f94 <prvProcessReceivedCommands+0x10c>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	61bb      	str	r3, [r7, #24]
}
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10a      	bne.n	8006f6c <prvProcessReceivedCommands+0xe4>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	617b      	str	r3, [r7, #20]
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <prvProcessReceivedCommands+0xe2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	699a      	ldr	r2, [r3, #24]
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	18d1      	adds	r1, r2, r3
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	6a3a      	ldr	r2, [r7, #32]
 8006f78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f7a:	f7ff ff43 	bl	8006e04 <prvInsertTimerInActiveList>
					break;
 8006f7e:	e009      	b.n	8006f94 <prvProcessReceivedCommands+0x10c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <prvProcessReceivedCommands+0x10c>
						{
							vPortFree( pxTimer );
 8006f8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f8c:	f000 fb6a 	bl	8007664 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f90:	e000      	b.n	8006f94 <prvProcessReceivedCommands+0x10c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006f92:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f94:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <prvProcessReceivedCommands+0x130>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f107 0108 	add.w	r1, r7, #8
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fe f9a2 	bl	80052e8 <xQueueReceive>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f47f af72 	bne.w	8006e90 <prvProcessReceivedCommands+0x8>
	}
}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	3728      	adds	r7, #40	; 0x28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20000834 	.word	0x20000834

08006fbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fc2:	e045      	b.n	8007050 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fc4:	4b2c      	ldr	r3, [pc, #176]	; (8007078 <prvSwitchTimerLists+0xbc>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fce:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <prvSwitchTimerLists+0xbc>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fd fdcf 	bl	8004b80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d12e      	bne.n	8007050 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	429a      	cmp	r2, r3
 8007002:	d90e      	bls.n	8007022 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007010:	4b19      	ldr	r3, [pc, #100]	; (8007078 <prvSwitchTimerLists+0xbc>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f7fd fd78 	bl	8004b10 <vListInsert>
 8007020:	e016      	b.n	8007050 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007022:	2300      	movs	r3, #0
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	2300      	movs	r3, #0
 8007028:	693a      	ldr	r2, [r7, #16]
 800702a:	2100      	movs	r1, #0
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f7ff fdb7 	bl	8006ba0 <xTimerGenericCommand>
 8007032:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <prvSwitchTimerLists+0x94>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	603b      	str	r3, [r7, #0]
}
 800704c:	bf00      	nop
 800704e:	e7fe      	b.n	800704e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007050:	4b09      	ldr	r3, [pc, #36]	; (8007078 <prvSwitchTimerLists+0xbc>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1b4      	bne.n	8006fc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800705a:	4b07      	ldr	r3, [pc, #28]	; (8007078 <prvSwitchTimerLists+0xbc>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007060:	4b06      	ldr	r3, [pc, #24]	; (800707c <prvSwitchTimerLists+0xc0>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a04      	ldr	r2, [pc, #16]	; (8007078 <prvSwitchTimerLists+0xbc>)
 8007066:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007068:	4a04      	ldr	r2, [pc, #16]	; (800707c <prvSwitchTimerLists+0xc0>)
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	6013      	str	r3, [r2, #0]
}
 800706e:	bf00      	nop
 8007070:	3718      	adds	r7, #24
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	2000082c 	.word	0x2000082c
 800707c:	20000830 	.word	0x20000830

08007080 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007086:	f000 f929 	bl	80072dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800708a:	4b15      	ldr	r3, [pc, #84]	; (80070e0 <prvCheckForValidListAndQueue+0x60>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d120      	bne.n	80070d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007092:	4814      	ldr	r0, [pc, #80]	; (80070e4 <prvCheckForValidListAndQueue+0x64>)
 8007094:	f7fd fcee 	bl	8004a74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007098:	4813      	ldr	r0, [pc, #76]	; (80070e8 <prvCheckForValidListAndQueue+0x68>)
 800709a:	f7fd fceb 	bl	8004a74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800709e:	4b13      	ldr	r3, [pc, #76]	; (80070ec <prvCheckForValidListAndQueue+0x6c>)
 80070a0:	4a10      	ldr	r2, [pc, #64]	; (80070e4 <prvCheckForValidListAndQueue+0x64>)
 80070a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070a4:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <prvCheckForValidListAndQueue+0x70>)
 80070a6:	4a10      	ldr	r2, [pc, #64]	; (80070e8 <prvCheckForValidListAndQueue+0x68>)
 80070a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80070aa:	2300      	movs	r3, #0
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	4b11      	ldr	r3, [pc, #68]	; (80070f4 <prvCheckForValidListAndQueue+0x74>)
 80070b0:	4a11      	ldr	r2, [pc, #68]	; (80070f8 <prvCheckForValidListAndQueue+0x78>)
 80070b2:	210c      	movs	r1, #12
 80070b4:	200a      	movs	r0, #10
 80070b6:	f7fd fdf5 	bl	8004ca4 <xQueueGenericCreateStatic>
 80070ba:	4603      	mov	r3, r0
 80070bc:	4a08      	ldr	r2, [pc, #32]	; (80070e0 <prvCheckForValidListAndQueue+0x60>)
 80070be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80070c0:	4b07      	ldr	r3, [pc, #28]	; (80070e0 <prvCheckForValidListAndQueue+0x60>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d005      	beq.n	80070d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070c8:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <prvCheckForValidListAndQueue+0x60>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	490b      	ldr	r1, [pc, #44]	; (80070fc <prvCheckForValidListAndQueue+0x7c>)
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe fb7a 	bl	80057c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070d4:	f000 f932 	bl	800733c <vPortExitCritical>
}
 80070d8:	bf00      	nop
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000834 	.word	0x20000834
 80070e4:	20000804 	.word	0x20000804
 80070e8:	20000818 	.word	0x20000818
 80070ec:	2000082c 	.word	0x2000082c
 80070f0:	20000830 	.word	0x20000830
 80070f4:	200008b8 	.word	0x200008b8
 80070f8:	20000840 	.word	0x20000840
 80070fc:	0800a034 	.word	0x0800a034

08007100 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3b04      	subs	r3, #4
 8007110:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007118:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	3b04      	subs	r3, #4
 800711e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f023 0201 	bic.w	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3b04      	subs	r3, #4
 800712e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007130:	4a08      	ldr	r2, [pc, #32]	; (8007154 <pxPortInitialiseStack+0x54>)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3b14      	subs	r3, #20
 800713a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3b20      	subs	r3, #32
 8007146:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007148:	68fb      	ldr	r3, [r7, #12]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr
 8007154:	08007159 	.word	0x08007159

08007158 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800715e:	2300      	movs	r3, #0
 8007160:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007162:	4b12      	ldr	r3, [pc, #72]	; (80071ac <prvTaskExitError+0x54>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716a:	d00a      	beq.n	8007182 <prvTaskExitError+0x2a>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	60fb      	str	r3, [r7, #12]
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <prvTaskExitError+0x28>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	60bb      	str	r3, [r7, #8]
}
 8007194:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007196:	bf00      	nop
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d0fc      	beq.n	8007198 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800719e:	bf00      	nop
 80071a0:	bf00      	nop
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	2000000c 	.word	0x2000000c

080071b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071b0:	4b07      	ldr	r3, [pc, #28]	; (80071d0 <pxCurrentTCBConst2>)
 80071b2:	6819      	ldr	r1, [r3, #0]
 80071b4:	6808      	ldr	r0, [r1, #0]
 80071b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80071ba:	f380 8809 	msr	PSP, r0
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f04f 0000 	mov.w	r0, #0
 80071c6:	f380 8811 	msr	BASEPRI, r0
 80071ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80071ce:	4770      	bx	lr

080071d0 <pxCurrentTCBConst2>:
 80071d0:	200006d8 	.word	0x200006d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop

080071d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80071d8:	4806      	ldr	r0, [pc, #24]	; (80071f4 <prvPortStartFirstTask+0x1c>)
 80071da:	6800      	ldr	r0, [r0, #0]
 80071dc:	6800      	ldr	r0, [r0, #0]
 80071de:	f380 8808 	msr	MSP, r0
 80071e2:	b662      	cpsie	i
 80071e4:	b661      	cpsie	f
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	df00      	svc	0
 80071f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80071f2:	bf00      	nop
 80071f4:	e000ed08 	.word	0xe000ed08

080071f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80071fe:	4b32      	ldr	r3, [pc, #200]	; (80072c8 <xPortStartScheduler+0xd0>)
 8007200:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	b2db      	uxtb	r3, r3
 8007208:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	22ff      	movs	r2, #255	; 0xff
 800720e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	b2db      	uxtb	r3, r3
 800721c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007220:	b2da      	uxtb	r2, r3
 8007222:	4b2a      	ldr	r3, [pc, #168]	; (80072cc <xPortStartScheduler+0xd4>)
 8007224:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007226:	4b2a      	ldr	r3, [pc, #168]	; (80072d0 <xPortStartScheduler+0xd8>)
 8007228:	2207      	movs	r2, #7
 800722a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800722c:	e009      	b.n	8007242 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800722e:	4b28      	ldr	r3, [pc, #160]	; (80072d0 <xPortStartScheduler+0xd8>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3b01      	subs	r3, #1
 8007234:	4a26      	ldr	r2, [pc, #152]	; (80072d0 <xPortStartScheduler+0xd8>)
 8007236:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007238:	78fb      	ldrb	r3, [r7, #3]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	b2db      	uxtb	r3, r3
 8007240:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007242:	78fb      	ldrb	r3, [r7, #3]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800724a:	2b80      	cmp	r3, #128	; 0x80
 800724c:	d0ef      	beq.n	800722e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800724e:	4b20      	ldr	r3, [pc, #128]	; (80072d0 <xPortStartScheduler+0xd8>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f1c3 0307 	rsb	r3, r3, #7
 8007256:	2b04      	cmp	r3, #4
 8007258:	d00a      	beq.n	8007270 <xPortStartScheduler+0x78>
	__asm volatile
 800725a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725e:	f383 8811 	msr	BASEPRI, r3
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	f3bf 8f4f 	dsb	sy
 800726a:	60bb      	str	r3, [r7, #8]
}
 800726c:	bf00      	nop
 800726e:	e7fe      	b.n	800726e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007270:	4b17      	ldr	r3, [pc, #92]	; (80072d0 <xPortStartScheduler+0xd8>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	021b      	lsls	r3, r3, #8
 8007276:	4a16      	ldr	r2, [pc, #88]	; (80072d0 <xPortStartScheduler+0xd8>)
 8007278:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800727a:	4b15      	ldr	r3, [pc, #84]	; (80072d0 <xPortStartScheduler+0xd8>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007282:	4a13      	ldr	r2, [pc, #76]	; (80072d0 <xPortStartScheduler+0xd8>)
 8007284:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	b2da      	uxtb	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800728e:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <xPortStartScheduler+0xdc>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a10      	ldr	r2, [pc, #64]	; (80072d4 <xPortStartScheduler+0xdc>)
 8007294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007298:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800729a:	4b0e      	ldr	r3, [pc, #56]	; (80072d4 <xPortStartScheduler+0xdc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a0d      	ldr	r2, [pc, #52]	; (80072d4 <xPortStartScheduler+0xdc>)
 80072a0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072a4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072a6:	f000 f8b9 	bl	800741c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072aa:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <xPortStartScheduler+0xe0>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072b0:	f7ff ff92 	bl	80071d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072b4:	f7ff f81a 	bl	80062ec <vTaskSwitchContext>
	prvTaskExitError();
 80072b8:	f7ff ff4e 	bl	8007158 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	e000e400 	.word	0xe000e400
 80072cc:	20000900 	.word	0x20000900
 80072d0:	20000904 	.word	0x20000904
 80072d4:	e000ed20 	.word	0xe000ed20
 80072d8:	2000000c 	.word	0x2000000c

080072dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	607b      	str	r3, [r7, #4]
}
 80072f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80072f6:	4b0f      	ldr	r3, [pc, #60]	; (8007334 <vPortEnterCritical+0x58>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3301      	adds	r3, #1
 80072fc:	4a0d      	ldr	r2, [pc, #52]	; (8007334 <vPortEnterCritical+0x58>)
 80072fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007300:	4b0c      	ldr	r3, [pc, #48]	; (8007334 <vPortEnterCritical+0x58>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d10f      	bne.n	8007328 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007308:	4b0b      	ldr	r3, [pc, #44]	; (8007338 <vPortEnterCritical+0x5c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <vPortEnterCritical+0x4c>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	603b      	str	r3, [r7, #0]
}
 8007324:	bf00      	nop
 8007326:	e7fe      	b.n	8007326 <vPortEnterCritical+0x4a>
	}
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	bc80      	pop	{r7}
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	2000000c 	.word	0x2000000c
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007342:	4b11      	ldr	r3, [pc, #68]	; (8007388 <vPortExitCritical+0x4c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d10a      	bne.n	8007360 <vPortExitCritical+0x24>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	607b      	str	r3, [r7, #4]
}
 800735c:	bf00      	nop
 800735e:	e7fe      	b.n	800735e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007360:	4b09      	ldr	r3, [pc, #36]	; (8007388 <vPortExitCritical+0x4c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	3b01      	subs	r3, #1
 8007366:	4a08      	ldr	r2, [pc, #32]	; (8007388 <vPortExitCritical+0x4c>)
 8007368:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800736a:	4b07      	ldr	r3, [pc, #28]	; (8007388 <vPortExitCritical+0x4c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d105      	bne.n	800737e <vPortExitCritical+0x42>
 8007372:	2300      	movs	r3, #0
 8007374:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	f383 8811 	msr	BASEPRI, r3
}
 800737c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr
 8007388:	2000000c 	.word	0x2000000c
 800738c:	00000000 	.word	0x00000000

08007390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007390:	f3ef 8009 	mrs	r0, PSP
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	4b0d      	ldr	r3, [pc, #52]	; (80073d0 <pxCurrentTCBConst>)
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073a0:	6010      	str	r0, [r2, #0]
 80073a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80073a6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80073aa:	f380 8811 	msr	BASEPRI, r0
 80073ae:	f7fe ff9d 	bl	80062ec <vTaskSwitchContext>
 80073b2:	f04f 0000 	mov.w	r0, #0
 80073b6:	f380 8811 	msr	BASEPRI, r0
 80073ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80073be:	6819      	ldr	r1, [r3, #0]
 80073c0:	6808      	ldr	r0, [r1, #0]
 80073c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073c6:	f380 8809 	msr	PSP, r0
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	4770      	bx	lr

080073d0 <pxCurrentTCBConst>:
 80073d0:	200006d8 	.word	0x200006d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop

080073d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	607b      	str	r3, [r7, #4]
}
 80073f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80073f2:	f7fe febd 	bl	8006170 <xTaskIncrementTick>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <SysTick_Handler+0x40>)
 80073fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	2300      	movs	r3, #0
 8007406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	f383 8811 	msr	BASEPRI, r3
}
 800740e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007410:	bf00      	nop
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	e000ed04 	.word	0xe000ed04

0800741c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007420:	4b0a      	ldr	r3, [pc, #40]	; (800744c <vPortSetupTimerInterrupt+0x30>)
 8007422:	2200      	movs	r2, #0
 8007424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007426:	4b0a      	ldr	r3, [pc, #40]	; (8007450 <vPortSetupTimerInterrupt+0x34>)
 8007428:	2200      	movs	r2, #0
 800742a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800742c:	4b09      	ldr	r3, [pc, #36]	; (8007454 <vPortSetupTimerInterrupt+0x38>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a09      	ldr	r2, [pc, #36]	; (8007458 <vPortSetupTimerInterrupt+0x3c>)
 8007432:	fba2 2303 	umull	r2, r3, r2, r3
 8007436:	099b      	lsrs	r3, r3, #6
 8007438:	4a08      	ldr	r2, [pc, #32]	; (800745c <vPortSetupTimerInterrupt+0x40>)
 800743a:	3b01      	subs	r3, #1
 800743c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800743e:	4b03      	ldr	r3, [pc, #12]	; (800744c <vPortSetupTimerInterrupt+0x30>)
 8007440:	2207      	movs	r2, #7
 8007442:	601a      	str	r2, [r3, #0]
}
 8007444:	bf00      	nop
 8007446:	46bd      	mov	sp, r7
 8007448:	bc80      	pop	{r7}
 800744a:	4770      	bx	lr
 800744c:	e000e010 	.word	0xe000e010
 8007450:	e000e018 	.word	0xe000e018
 8007454:	20000000 	.word	0x20000000
 8007458:	10624dd3 	.word	0x10624dd3
 800745c:	e000e014 	.word	0xe000e014

08007460 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007466:	f3ef 8305 	mrs	r3, IPSR
 800746a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b0f      	cmp	r3, #15
 8007470:	d914      	bls.n	800749c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007472:	4a16      	ldr	r2, [pc, #88]	; (80074cc <vPortValidateInterruptPriority+0x6c>)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800747c:	4b14      	ldr	r3, [pc, #80]	; (80074d0 <vPortValidateInterruptPriority+0x70>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	7afa      	ldrb	r2, [r7, #11]
 8007482:	429a      	cmp	r2, r3
 8007484:	d20a      	bcs.n	800749c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	607b      	str	r3, [r7, #4]
}
 8007498:	bf00      	nop
 800749a:	e7fe      	b.n	800749a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800749c:	4b0d      	ldr	r3, [pc, #52]	; (80074d4 <vPortValidateInterruptPriority+0x74>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80074a4:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <vPortValidateInterruptPriority+0x78>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d90a      	bls.n	80074c2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	603b      	str	r3, [r7, #0]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <vPortValidateInterruptPriority+0x60>
	}
 80074c2:	bf00      	nop
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bc80      	pop	{r7}
 80074ca:	4770      	bx	lr
 80074cc:	e000e3f0 	.word	0xe000e3f0
 80074d0:	20000900 	.word	0x20000900
 80074d4:	e000ed0c 	.word	0xe000ed0c
 80074d8:	20000904 	.word	0x20000904

080074dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08a      	sub	sp, #40	; 0x28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074e8:	f7fe fd8a 	bl	8006000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074ec:	4b58      	ldr	r3, [pc, #352]	; (8007650 <pvPortMalloc+0x174>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074f4:	f000 f910 	bl	8007718 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074f8:	4b56      	ldr	r3, [pc, #344]	; (8007654 <pvPortMalloc+0x178>)
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4013      	ands	r3, r2
 8007500:	2b00      	cmp	r3, #0
 8007502:	f040 808e 	bne.w	8007622 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01d      	beq.n	8007548 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800750c:	2208      	movs	r2, #8
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4413      	add	r3, r2
 8007512:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	2b00      	cmp	r3, #0
 800751c:	d014      	beq.n	8007548 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f023 0307 	bic.w	r3, r3, #7
 8007524:	3308      	adds	r3, #8
 8007526:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <pvPortMalloc+0x6c>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	617b      	str	r3, [r7, #20]
}
 8007544:	bf00      	nop
 8007546:	e7fe      	b.n	8007546 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d069      	beq.n	8007622 <pvPortMalloc+0x146>
 800754e:	4b42      	ldr	r3, [pc, #264]	; (8007658 <pvPortMalloc+0x17c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	429a      	cmp	r2, r3
 8007556:	d864      	bhi.n	8007622 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007558:	4b40      	ldr	r3, [pc, #256]	; (800765c <pvPortMalloc+0x180>)
 800755a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800755c:	4b3f      	ldr	r3, [pc, #252]	; (800765c <pvPortMalloc+0x180>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007562:	e004      	b.n	800756e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	429a      	cmp	r2, r3
 8007576:	d903      	bls.n	8007580 <pvPortMalloc+0xa4>
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1f1      	bne.n	8007564 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007580:	4b33      	ldr	r3, [pc, #204]	; (8007650 <pvPortMalloc+0x174>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007586:	429a      	cmp	r2, r3
 8007588:	d04b      	beq.n	8007622 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2208      	movs	r2, #8
 8007590:	4413      	add	r3, r2
 8007592:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800759c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	1ad2      	subs	r2, r2, r3
 80075a4:	2308      	movs	r3, #8
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d91f      	bls.n	80075ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4413      	add	r3, r2
 80075b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <pvPortMalloc+0xf8>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	613b      	str	r3, [r7, #16]
}
 80075d0:	bf00      	nop
 80075d2:	e7fe      	b.n	80075d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	1ad2      	subs	r2, r2, r3
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075e6:	69b8      	ldr	r0, [r7, #24]
 80075e8:	f000 f8f8 	bl	80077dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075ec:	4b1a      	ldr	r3, [pc, #104]	; (8007658 <pvPortMalloc+0x17c>)
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	4a18      	ldr	r2, [pc, #96]	; (8007658 <pvPortMalloc+0x17c>)
 80075f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075fa:	4b17      	ldr	r3, [pc, #92]	; (8007658 <pvPortMalloc+0x17c>)
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	4b18      	ldr	r3, [pc, #96]	; (8007660 <pvPortMalloc+0x184>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d203      	bcs.n	800760e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007606:	4b14      	ldr	r3, [pc, #80]	; (8007658 <pvPortMalloc+0x17c>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a15      	ldr	r2, [pc, #84]	; (8007660 <pvPortMalloc+0x184>)
 800760c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <pvPortMalloc+0x178>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	431a      	orrs	r2, r3
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007622:	f7fe fcfb 	bl	800601c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00a      	beq.n	8007646 <pvPortMalloc+0x16a>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	60fb      	str	r3, [r7, #12]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <pvPortMalloc+0x168>
	return pvReturn;
 8007646:	69fb      	ldr	r3, [r7, #28]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3728      	adds	r7, #40	; 0x28
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20002850 	.word	0x20002850
 8007654:	2000285c 	.word	0x2000285c
 8007658:	20002854 	.word	0x20002854
 800765c:	20002848 	.word	0x20002848
 8007660:	20002858 	.word	0x20002858

08007664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d048      	beq.n	8007708 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007676:	2308      	movs	r3, #8
 8007678:	425b      	negs	r3, r3
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	4413      	add	r3, r2
 800767e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	4b21      	ldr	r3, [pc, #132]	; (8007710 <vPortFree+0xac>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4013      	ands	r3, r2
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10a      	bne.n	80076a8 <vPortFree+0x44>
	__asm volatile
 8007692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007696:	f383 8811 	msr	BASEPRI, r3
 800769a:	f3bf 8f6f 	isb	sy
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	60fb      	str	r3, [r7, #12]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <vPortFree+0x62>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	60bb      	str	r3, [r7, #8]
}
 80076c2:	bf00      	nop
 80076c4:	e7fe      	b.n	80076c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	4b11      	ldr	r3, [pc, #68]	; (8007710 <vPortFree+0xac>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4013      	ands	r3, r2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d019      	beq.n	8007708 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d115      	bne.n	8007708 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <vPortFree+0xac>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	43db      	mvns	r3, r3
 80076e6:	401a      	ands	r2, r3
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076ec:	f7fe fc88 	bl	8006000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	4b07      	ldr	r3, [pc, #28]	; (8007714 <vPortFree+0xb0>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4413      	add	r3, r2
 80076fa:	4a06      	ldr	r2, [pc, #24]	; (8007714 <vPortFree+0xb0>)
 80076fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076fe:	6938      	ldr	r0, [r7, #16]
 8007700:	f000 f86c 	bl	80077dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007704:	f7fe fc8a 	bl	800601c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007708:	bf00      	nop
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	2000285c 	.word	0x2000285c
 8007714:	20002854 	.word	0x20002854

08007718 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800771e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8007722:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007724:	4b27      	ldr	r3, [pc, #156]	; (80077c4 <prvHeapInit+0xac>)
 8007726:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00c      	beq.n	800774c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	3307      	adds	r3, #7
 8007736:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	4a1f      	ldr	r2, [pc, #124]	; (80077c4 <prvHeapInit+0xac>)
 8007748:	4413      	add	r3, r2
 800774a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007750:	4a1d      	ldr	r2, [pc, #116]	; (80077c8 <prvHeapInit+0xb0>)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007756:	4b1c      	ldr	r3, [pc, #112]	; (80077c8 <prvHeapInit+0xb0>)
 8007758:	2200      	movs	r2, #0
 800775a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	4413      	add	r3, r2
 8007762:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007764:	2208      	movs	r2, #8
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	1a9b      	subs	r3, r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 0307 	bic.w	r3, r3, #7
 8007772:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4a15      	ldr	r2, [pc, #84]	; (80077cc <prvHeapInit+0xb4>)
 8007778:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800777a:	4b14      	ldr	r3, [pc, #80]	; (80077cc <prvHeapInit+0xb4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2200      	movs	r2, #0
 8007780:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007782:	4b12      	ldr	r3, [pc, #72]	; (80077cc <prvHeapInit+0xb4>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2200      	movs	r2, #0
 8007788:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	1ad2      	subs	r2, r2, r3
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007798:	4b0c      	ldr	r3, [pc, #48]	; (80077cc <prvHeapInit+0xb4>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	4a0a      	ldr	r2, [pc, #40]	; (80077d0 <prvHeapInit+0xb8>)
 80077a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	4a09      	ldr	r2, [pc, #36]	; (80077d4 <prvHeapInit+0xbc>)
 80077ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077b0:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <prvHeapInit+0xc0>)
 80077b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077b6:	601a      	str	r2, [r3, #0]
}
 80077b8:	bf00      	nop
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	bc80      	pop	{r7}
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20000908 	.word	0x20000908
 80077c8:	20002848 	.word	0x20002848
 80077cc:	20002850 	.word	0x20002850
 80077d0:	20002858 	.word	0x20002858
 80077d4:	20002854 	.word	0x20002854
 80077d8:	2000285c 	.word	0x2000285c

080077dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077e4:	4b27      	ldr	r3, [pc, #156]	; (8007884 <prvInsertBlockIntoFreeList+0xa8>)
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	e002      	b.n	80077f0 <prvInsertBlockIntoFreeList+0x14>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d8f7      	bhi.n	80077ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	4413      	add	r3, r2
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	429a      	cmp	r2, r3
 800780a:	d108      	bne.n	800781e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	441a      	add	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	441a      	add	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	429a      	cmp	r2, r3
 8007830:	d118      	bne.n	8007864 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	4b14      	ldr	r3, [pc, #80]	; (8007888 <prvInsertBlockIntoFreeList+0xac>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	429a      	cmp	r2, r3
 800783c:	d00d      	beq.n	800785a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	441a      	add	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	e008      	b.n	800786c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800785a:	4b0b      	ldr	r3, [pc, #44]	; (8007888 <prvInsertBlockIntoFreeList+0xac>)
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	601a      	str	r2, [r3, #0]
 8007862:	e003      	b.n	800786c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d002      	beq.n	800787a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	bc80      	pop	{r7}
 8007882:	4770      	bx	lr
 8007884:	20002848 	.word	0x20002848
 8007888:	20002850 	.word	0x20002850

0800788c <Display>:
uint8_t desktop_date_state = DESKTOP_DATE_ON;


// Задача для обработки изображения на дисплее
void Display(void const * argument)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
	osEvent event;
	menu_ini(); // Инициализируем состояние меню на дисплее.
 8007894:	f7fc fb68 	bl	8003f68 <menu_ini>
	
	for(;;)
	{
		event = osMessageGet(pos_Queue, 100);
 8007898:	4bbb      	ldr	r3, [pc, #748]	; (8007b88 <Display+0x2fc>)
 800789a:	6819      	ldr	r1, [r3, #0]
 800789c:	f107 030c 	add.w	r3, r7, #12
 80078a0:	2264      	movs	r2, #100	; 0x64
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fd f844 	bl	8004930 <osMessageGet>
		if (event.status == osEventMessage)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b10      	cmp	r3, #16
 80078ac:	f040 8478 	bne.w	80081a0 <Display+0x914>
		{
// Обработчик нажатия кнопки BUTTON1 меню дисплея----------------------
			if(event.value.v==BUTTON1_PRESSED)
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	f040 80ad 	bne.w	8007a12 <Display+0x186>
			{
				switch(Desktop)
 80078b8:	4bb4      	ldr	r3, [pc, #720]	; (8007b8c <Display+0x300>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f040 80ab 	bne.w	8007a18 <Display+0x18c>
						//osThreadSuspend(TimeMenuHandle);
						//wh0802_write_to_display(0x00, MenuItem[PositionState].NameItem, CLEAR_ON);
						//osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
					//break;
					case DESKTOP_OFF:
						switch(PositionState)
 80078c2:	4bb3      	ldr	r3, [pc, #716]	; (8007b90 <Display+0x304>)
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	3b06      	subs	r3, #6
 80078c8:	2b0a      	cmp	r3, #10
 80078ca:	f200 80a4 	bhi.w	8007a16 <Display+0x18a>
 80078ce:	a201      	add	r2, pc, #4	; (adr r2, 80078d4 <Display+0x48>)
 80078d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d4:	08007901 	.word	0x08007901
 80078d8:	08007a17 	.word	0x08007a17
 80078dc:	08007a17 	.word	0x08007a17
 80078e0:	08007a17 	.word	0x08007a17
 80078e4:	08007a17 	.word	0x08007a17
 80078e8:	08007a17 	.word	0x08007a17
 80078ec:	08007a17 	.word	0x08007a17
 80078f0:	08007a17 	.word	0x08007a17
 80078f4:	08007945 	.word	0x08007945
 80078f8:	08007989 	.word	0x08007989
 80078fc:	080079cd 	.word	0x080079cd
						{
							case 6:
								LED8_ON;
 8007900:	2201      	movs	r2, #1
 8007902:	2180      	movs	r1, #128	; 0x80
 8007904:	48a3      	ldr	r0, [pc, #652]	; (8007b94 <Display+0x308>)
 8007906:	f7fa f802 	bl	800190e <HAL_GPIO_WritePin>
								osTimerStop(DisplayTimerHandle);
 800790a:	4ba3      	ldr	r3, [pc, #652]	; (8007b98 <Display+0x30c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4618      	mov	r0, r3
 8007910:	f7fc ff12 	bl	8004738 <osTimerStop>
								ddram=0x01;
 8007914:	4ba1      	ldr	r3, [pc, #644]	; (8007b9c <Display+0x310>)
 8007916:	2201      	movs	r2, #1
 8007918:	701a      	strb	r2, [r3, #0]
								wh0802_set_ddram_address(ddram);
 800791a:	4ba0      	ldr	r3, [pc, #640]	; (8007b9c <Display+0x310>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	4618      	mov	r0, r3
 8007920:	f7fc fd23 	bl	800436a <wh0802_set_ddram_address>
								wh0802_display_control(DISPLAY_ON, CURSOR_ON, BLINKING_ON);
 8007924:	2201      	movs	r2, #1
 8007926:	2102      	movs	r1, #2
 8007928:	2004      	movs	r0, #4
 800792a:	f7fc fce8 	bl	80042fe <wh0802_display_control>
								osThreadResume(TimeTaskHandle);
 800792e:	4b9c      	ldr	r3, [pc, #624]	; (8007ba0 <Display+0x314>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4618      	mov	r0, r3
 8007934:	f7fd f87c 	bl	8004a30 <osThreadResume>
								osThreadSuspend(DisplayHandle);
 8007938:	4b9a      	ldr	r3, [pc, #616]	; (8007ba4 <Display+0x318>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4618      	mov	r0, r3
 800793e:	f7fd f86b 	bl	8004a18 <osThreadSuspend>
							break;
 8007942:	e065      	b.n	8007a10 <Display+0x184>
							case 14:
								LED8_ON;
 8007944:	2201      	movs	r2, #1
 8007946:	2180      	movs	r1, #128	; 0x80
 8007948:	4892      	ldr	r0, [pc, #584]	; (8007b94 <Display+0x308>)
 800794a:	f7f9 ffe0 	bl	800190e <HAL_GPIO_WritePin>
								osTimerStop(DisplayTimerHandle);
 800794e:	4b92      	ldr	r3, [pc, #584]	; (8007b98 <Display+0x30c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4618      	mov	r0, r3
 8007954:	f7fc fef0 	bl	8004738 <osTimerStop>
								ddram=0x01;
 8007958:	4b90      	ldr	r3, [pc, #576]	; (8007b9c <Display+0x310>)
 800795a:	2201      	movs	r2, #1
 800795c:	701a      	strb	r2, [r3, #0]
								wh0802_set_ddram_address(ddram);
 800795e:	4b8f      	ldr	r3, [pc, #572]	; (8007b9c <Display+0x310>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	4618      	mov	r0, r3
 8007964:	f7fc fd01 	bl	800436a <wh0802_set_ddram_address>
								wh0802_display_control(DISPLAY_ON, CURSOR_ON, BLINKING_ON);
 8007968:	2201      	movs	r2, #1
 800796a:	2102      	movs	r1, #2
 800796c:	2004      	movs	r0, #4
 800796e:	f7fc fcc6 	bl	80042fe <wh0802_display_control>
								osThreadResume(DateTaskHandle);
 8007972:	4b8d      	ldr	r3, [pc, #564]	; (8007ba8 <Display+0x31c>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f7fd f85a 	bl	8004a30 <osThreadResume>
								osThreadSuspend(DisplayHandle);
 800797c:	4b89      	ldr	r3, [pc, #548]	; (8007ba4 <Display+0x318>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4618      	mov	r0, r3
 8007982:	f7fd f849 	bl	8004a18 <osThreadSuspend>
							break;
 8007986:	e043      	b.n	8007a10 <Display+0x184>
							case 15:
								LED8_ON;
 8007988:	2201      	movs	r2, #1
 800798a:	2180      	movs	r1, #128	; 0x80
 800798c:	4881      	ldr	r0, [pc, #516]	; (8007b94 <Display+0x308>)
 800798e:	f7f9 ffbe 	bl	800190e <HAL_GPIO_WritePin>
								osTimerStop(DisplayTimerHandle);
 8007992:	4b81      	ldr	r3, [pc, #516]	; (8007b98 <Display+0x30c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4618      	mov	r0, r3
 8007998:	f7fc fece 	bl	8004738 <osTimerStop>
								ddram=0x00;
 800799c:	4b7f      	ldr	r3, [pc, #508]	; (8007b9c <Display+0x310>)
 800799e:	2200      	movs	r2, #0
 80079a0:	701a      	strb	r2, [r3, #0]
								wh0802_set_ddram_address(ddram);
 80079a2:	4b7e      	ldr	r3, [pc, #504]	; (8007b9c <Display+0x310>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fc fcdf 	bl	800436a <wh0802_set_ddram_address>
								wh0802_display_control(DISPLAY_ON, CURSOR_ON, BLINKING_ON);
 80079ac:	2201      	movs	r2, #1
 80079ae:	2102      	movs	r1, #2
 80079b0:	2004      	movs	r0, #4
 80079b2:	f7fc fca4 	bl	80042fe <wh0802_display_control>
								osThreadResume(TimeDisplayTaskHandle);
 80079b6:	4b7d      	ldr	r3, [pc, #500]	; (8007bac <Display+0x320>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fd f838 	bl	8004a30 <osThreadResume>
								osThreadSuspend(DisplayHandle);
 80079c0:	4b78      	ldr	r3, [pc, #480]	; (8007ba4 <Display+0x318>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fd f827 	bl	8004a18 <osThreadSuspend>
							break;
 80079ca:	e021      	b.n	8007a10 <Display+0x184>
							case 16:
								LED8_ON;
 80079cc:	2201      	movs	r2, #1
 80079ce:	2180      	movs	r1, #128	; 0x80
 80079d0:	4870      	ldr	r0, [pc, #448]	; (8007b94 <Display+0x308>)
 80079d2:	f7f9 ff9c 	bl	800190e <HAL_GPIO_WritePin>
								osTimerStop(DisplayTimerHandle);
 80079d6:	4b70      	ldr	r3, [pc, #448]	; (8007b98 <Display+0x30c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fc feac 	bl	8004738 <osTimerStop>
								ddram=0x00;
 80079e0:	4b6e      	ldr	r3, [pc, #440]	; (8007b9c <Display+0x310>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
								wh0802_set_ddram_address(ddram);
 80079e6:	4b6d      	ldr	r3, [pc, #436]	; (8007b9c <Display+0x310>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7fc fcbd 	bl	800436a <wh0802_set_ddram_address>
								wh0802_display_control(DISPLAY_ON, CURSOR_ON, BLINKING_ON);
 80079f0:	2201      	movs	r2, #1
 80079f2:	2102      	movs	r1, #2
 80079f4:	2004      	movs	r0, #4
 80079f6:	f7fc fc82 	bl	80042fe <wh0802_display_control>
								osThreadResume(DateDisplayTaskHandle);
 80079fa:	4b6d      	ldr	r3, [pc, #436]	; (8007bb0 <Display+0x324>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fd f816 	bl	8004a30 <osThreadResume>
								osThreadSuspend(DisplayHandle);
 8007a04:	4b67      	ldr	r3, [pc, #412]	; (8007ba4 <Display+0x318>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fd f805 	bl	8004a18 <osThreadSuspend>
							break;
 8007a0e:	bf00      	nop
								//Desktop = DESKTOP_ON;
								//PositionState = 0;
								//osThreadResume(TimeMenuHandle);
								//wh0802_clear_display();
						}
					break;
 8007a10:	e001      	b.n	8007a16 <Display+0x18a>
				}
			}
 8007a12:	bf00      	nop
 8007a14:	e000      	b.n	8007a18 <Display+0x18c>
					break;
 8007a16:	bf00      	nop
//-----------------------------------------------------

//Обработчик нажатия кнопки BUTTON2 меню дисплея--------------------
			if(event.value.v==BUTTON2_PRESSED)
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d11b      	bne.n	8007a56 <Display+0x1ca>
			{
				switch(Desktop)
 8007a1e:	4b5b      	ldr	r3, [pc, #364]	; (8007b8c <Display+0x300>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d118      	bne.n	8007a58 <Display+0x1cc>
						//osThreadSuspend(TimeMenuHandle);
						//wh0802_write_to_display(0x00, MenuItem[PositionState].NameItem, CLEAR_ON);
						//osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
					//break;
					case DESKTOP_OFF:
						osTimerStop(DisplayTimerHandle);
 8007a26:	4b5c      	ldr	r3, [pc, #368]	; (8007b98 <Display+0x30c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fc fe84 	bl	8004738 <osTimerStop>
						LED8_OFF;
 8007a30:	2200      	movs	r2, #0
 8007a32:	2180      	movs	r1, #128	; 0x80
 8007a34:	4857      	ldr	r0, [pc, #348]	; (8007b94 <Display+0x308>)
 8007a36:	f7f9 ff6a 	bl	800190e <HAL_GPIO_WritePin>
						Desktop = DESKTOP_ON;
 8007a3a:	4b54      	ldr	r3, [pc, #336]	; (8007b8c <Display+0x300>)
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	701a      	strb	r2, [r3, #0]
						PositionState = 0;
 8007a40:	4b53      	ldr	r3, [pc, #332]	; (8007b90 <Display+0x304>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	701a      	strb	r2, [r3, #0]
						osThreadResume(TimeMenuHandle);
 8007a46:	4b5b      	ldr	r3, [pc, #364]	; (8007bb4 <Display+0x328>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fc fff0 	bl	8004a30 <osThreadResume>
						wh0802_clear_display();
 8007a50:	f7fc fc36 	bl	80042c0 <wh0802_clear_display>
						//osThreadSuspend(TimeMenuHandle);
						//LED8_ON;
						//osTimerStart(DisplayTimerHandle,10000);
					break;
 8007a54:	e000      	b.n	8007a58 <Display+0x1cc>
				}
			}
 8007a56:	bf00      	nop
//-----------------------------------------------------

//Обработчик нажатия кнопки BUTTON3 меню дисплея--------------------
			if(event.value.v==BUTTON3_PRESSED)
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	f040 80ae 	bne.w	8007bbc <Display+0x330>
			{
				switch(Desktop)
 8007a60:	4b4a      	ldr	r3, [pc, #296]	; (8007b8c <Display+0x300>)
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d028      	beq.n	8007aba <Display+0x22e>
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	f040 80a8 	bne.w	8007bbe <Display+0x332>
				{
					case DESKTOP_ON:
						LED8_ON;
 8007a6e:	2201      	movs	r2, #1
 8007a70:	2180      	movs	r1, #128	; 0x80
 8007a72:	4848      	ldr	r0, [pc, #288]	; (8007b94 <Display+0x308>)
 8007a74:	f7f9 ff4b 	bl	800190e <HAL_GPIO_WritePin>
						Desktop = DESKTOP_OFF;
 8007a78:	4b44      	ldr	r3, [pc, #272]	; (8007b8c <Display+0x300>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
						PositionState = 0;
 8007a7e:	4b44      	ldr	r3, [pc, #272]	; (8007b90 <Display+0x304>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	701a      	strb	r2, [r3, #0]
						osThreadSuspend(TimeMenuHandle);
 8007a84:	4b4b      	ldr	r3, [pc, #300]	; (8007bb4 <Display+0x328>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fc ffc5 	bl	8004a18 <osThreadSuspend>
						wh0802_write_to_display(0x00, MenuItem[PositionState].NameItem, CLEAR_ON);
 8007a8e:	4b40      	ldr	r3, [pc, #256]	; (8007b90 <Display+0x304>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	2316      	movs	r3, #22
 8007a96:	fb03 f302 	mul.w	r3, r3, r2
 8007a9a:	4a47      	ldr	r2, [pc, #284]	; (8007bb8 <Display+0x32c>)
 8007a9c:	4413      	add	r3, r2
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	f7fc fcc3 	bl	8004430 <wh0802_write_to_display>
						osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007aaa:	4b3b      	ldr	r3, [pc, #236]	; (8007b98 <Display+0x30c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f241 3188 	movw	r1, #5000	; 0x1388
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7fc fdfc 	bl	80046b0 <osTimerStart>
					break;
 8007ab8:	e081      	b.n	8007bbe <Display+0x332>
					case DESKTOP_OFF:
						switch(PositionState)
 8007aba:	4b35      	ldr	r3, [pc, #212]	; (8007b90 <Display+0x304>)
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	3b06      	subs	r3, #6
 8007ac0:	2b0a      	cmp	r3, #10
 8007ac2:	d839      	bhi.n	8007b38 <Display+0x2ac>
 8007ac4:	a201      	add	r2, pc, #4	; (adr r2, 8007acc <Display+0x240>)
 8007ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aca:	bf00      	nop
 8007acc:	08007af9 	.word	0x08007af9
 8007ad0:	08007b39 	.word	0x08007b39
 8007ad4:	08007b39 	.word	0x08007b39
 8007ad8:	08007b39 	.word	0x08007b39
 8007adc:	08007b39 	.word	0x08007b39
 8007ae0:	08007b39 	.word	0x08007b39
 8007ae4:	08007b39 	.word	0x08007b39
 8007ae8:	08007b39 	.word	0x08007b39
 8007aec:	08007b09 	.word	0x08007b09
 8007af0:	08007b19 	.word	0x08007b19
 8007af4:	08007b29 	.word	0x08007b29
						{
							case 6:
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007af8:	4b27      	ldr	r3, [pc, #156]	; (8007b98 <Display+0x30c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f241 3188 	movw	r1, #5000	; 0x1388
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fc fdd5 	bl	80046b0 <osTimerStart>
							break;
 8007b06:	e03e      	b.n	8007b86 <Display+0x2fa>
							case 14:
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007b08:	4b23      	ldr	r3, [pc, #140]	; (8007b98 <Display+0x30c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f241 3188 	movw	r1, #5000	; 0x1388
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7fc fdcd 	bl	80046b0 <osTimerStart>
							break;
 8007b16:	e036      	b.n	8007b86 <Display+0x2fa>
							case 15:
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007b18:	4b1f      	ldr	r3, [pc, #124]	; (8007b98 <Display+0x30c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f241 3188 	movw	r1, #5000	; 0x1388
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fc fdc5 	bl	80046b0 <osTimerStart>
							break;
 8007b26:	e02e      	b.n	8007b86 <Display+0x2fa>
							case 16:
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007b28:	4b1b      	ldr	r3, [pc, #108]	; (8007b98 <Display+0x30c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f241 3188 	movw	r1, #5000	; 0x1388
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fc fdbd 	bl	80046b0 <osTimerStart>
							break;
 8007b36:	e026      	b.n	8007b86 <Display+0x2fa>
							default:
								LED8_ON;
 8007b38:	2201      	movs	r2, #1
 8007b3a:	2180      	movs	r1, #128	; 0x80
 8007b3c:	4815      	ldr	r0, [pc, #84]	; (8007b94 <Display+0x308>)
 8007b3e:	f7f9 fee6 	bl	800190e <HAL_GPIO_WritePin>
								PositionState = MenuItem[PositionState].Down;
 8007b42:	4b13      	ldr	r3, [pc, #76]	; (8007b90 <Display+0x304>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	4619      	mov	r1, r3
 8007b48:	4a1b      	ldr	r2, [pc, #108]	; (8007bb8 <Display+0x32c>)
 8007b4a:	2316      	movs	r3, #22
 8007b4c:	fb03 f301 	mul.w	r3, r3, r1
 8007b50:	4413      	add	r3, r2
 8007b52:	3313      	adds	r3, #19
 8007b54:	781a      	ldrb	r2, [r3, #0]
 8007b56:	4b0e      	ldr	r3, [pc, #56]	; (8007b90 <Display+0x304>)
 8007b58:	701a      	strb	r2, [r3, #0]
								wh0802_write_to_display(0x00, MenuItem[PositionState].NameItem, CLEAR_ON);
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <Display+0x304>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	2316      	movs	r3, #22
 8007b62:	fb03 f302 	mul.w	r3, r3, r2
 8007b66:	4a14      	ldr	r2, [pc, #80]	; (8007bb8 <Display+0x32c>)
 8007b68:	4413      	add	r3, r2
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	4619      	mov	r1, r3
 8007b70:	2000      	movs	r0, #0
 8007b72:	f7fc fc5d 	bl	8004430 <wh0802_write_to_display>
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007b76:	4b08      	ldr	r3, [pc, #32]	; (8007b98 <Display+0x30c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f241 3188 	movw	r1, #5000	; 0x1388
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fc fd96 	bl	80046b0 <osTimerStart>
						}
					break;
 8007b84:	e01b      	b.n	8007bbe <Display+0x332>
 8007b86:	e01a      	b.n	8007bbe <Display+0x332>
 8007b88:	200028b4 	.word	0x200028b4
 8007b8c:	20002a05 	.word	0x20002a05
 8007b90:	20002a04 	.word	0x20002a04
 8007b94:	40010800 	.word	0x40010800
 8007b98:	200028b0 	.word	0x200028b0
 8007b9c:	20002860 	.word	0x20002860
 8007ba0:	200029b0 	.word	0x200029b0
 8007ba4:	2000295c 	.word	0x2000295c
 8007ba8:	20002938 	.word	0x20002938
 8007bac:	20002958 	.word	0x20002958
 8007bb0:	20002960 	.word	0x20002960
 8007bb4:	20002964 	.word	0x20002964
 8007bb8:	20002a08 	.word	0x20002a08
				}
			}
 8007bbc:	bf00      	nop
//-----------------------------------------------------

//Обработчик нажатия кнопки BUTTON4 меню дислея--------------------
			if(event.value.v==BUTTON4_PRESSED)
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d152      	bne.n	8007c6a <Display+0x3de>
			{
				switch(Desktop)
 8007bc4:	4ba1      	ldr	r3, [pc, #644]	; (8007e4c <Display+0x5c0>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d027      	beq.n	8007c1c <Display+0x390>
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d14d      	bne.n	8007c6c <Display+0x3e0>
				{
					case DESKTOP_ON:
						LED8_ON;
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	2180      	movs	r1, #128	; 0x80
 8007bd4:	489e      	ldr	r0, [pc, #632]	; (8007e50 <Display+0x5c4>)
 8007bd6:	f7f9 fe9a 	bl	800190e <HAL_GPIO_WritePin>
						Desktop = DESKTOP_OFF;
 8007bda:	4b9c      	ldr	r3, [pc, #624]	; (8007e4c <Display+0x5c0>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	701a      	strb	r2, [r3, #0]
						PositionState = 0;
 8007be0:	4b9c      	ldr	r3, [pc, #624]	; (8007e54 <Display+0x5c8>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]
						osThreadSuspend(TimeMenuHandle);
 8007be6:	4b9c      	ldr	r3, [pc, #624]	; (8007e58 <Display+0x5cc>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fc ff14 	bl	8004a18 <osThreadSuspend>
						wh0802_write_to_display(0x00, MenuItem[PositionState].NameItem, CLEAR_ON);
 8007bf0:	4b98      	ldr	r3, [pc, #608]	; (8007e54 <Display+0x5c8>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	2316      	movs	r3, #22
 8007bf8:	fb03 f302 	mul.w	r3, r3, r2
 8007bfc:	4a97      	ldr	r2, [pc, #604]	; (8007e5c <Display+0x5d0>)
 8007bfe:	4413      	add	r3, r2
 8007c00:	3301      	adds	r3, #1
 8007c02:	2201      	movs	r2, #1
 8007c04:	4619      	mov	r1, r3
 8007c06:	2000      	movs	r0, #0
 8007c08:	f7fc fc12 	bl	8004430 <wh0802_write_to_display>
						osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007c0c:	4b94      	ldr	r3, [pc, #592]	; (8007e60 <Display+0x5d4>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f241 3188 	movw	r1, #5000	; 0x1388
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fc fd4b 	bl	80046b0 <osTimerStart>
					break;
 8007c1a:	e027      	b.n	8007c6c <Display+0x3e0>
					case DESKTOP_OFF:
						switch(PositionState)
						{
							default:
								LED8_ON;
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	2180      	movs	r1, #128	; 0x80
 8007c20:	488b      	ldr	r0, [pc, #556]	; (8007e50 <Display+0x5c4>)
 8007c22:	f7f9 fe74 	bl	800190e <HAL_GPIO_WritePin>
								PositionState = MenuItem[PositionState].Previous;
 8007c26:	4b8b      	ldr	r3, [pc, #556]	; (8007e54 <Display+0x5c8>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	4a8b      	ldr	r2, [pc, #556]	; (8007e5c <Display+0x5d0>)
 8007c2e:	2316      	movs	r3, #22
 8007c30:	fb03 f301 	mul.w	r3, r3, r1
 8007c34:	4413      	add	r3, r2
 8007c36:	3315      	adds	r3, #21
 8007c38:	781a      	ldrb	r2, [r3, #0]
 8007c3a:	4b86      	ldr	r3, [pc, #536]	; (8007e54 <Display+0x5c8>)
 8007c3c:	701a      	strb	r2, [r3, #0]
								wh0802_write_to_display(0x00, MenuItem[PositionState].NameItem, CLEAR_ON);
 8007c3e:	4b85      	ldr	r3, [pc, #532]	; (8007e54 <Display+0x5c8>)
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	2316      	movs	r3, #22
 8007c46:	fb03 f302 	mul.w	r3, r3, r2
 8007c4a:	4a84      	ldr	r2, [pc, #528]	; (8007e5c <Display+0x5d0>)
 8007c4c:	4413      	add	r3, r2
 8007c4e:	3301      	adds	r3, #1
 8007c50:	2201      	movs	r2, #1
 8007c52:	4619      	mov	r1, r3
 8007c54:	2000      	movs	r0, #0
 8007c56:	f7fc fbeb 	bl	8004430 <wh0802_write_to_display>
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007c5a:	4b81      	ldr	r3, [pc, #516]	; (8007e60 <Display+0x5d4>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fc fd24 	bl	80046b0 <osTimerStart>
						}
					break;
 8007c68:	e000      	b.n	8007c6c <Display+0x3e0>
				}
			}
 8007c6a:	bf00      	nop
//-----------------------------------------------------

//Обработчик нажатия кнопки BUTTON5 меню дисплея--------------------
			if(event.value.v==BUTTON5_PRESSED)
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	2b05      	cmp	r3, #5
 8007c70:	f040 8094 	bne.w	8007d9c <Display+0x510>
			{
				switch(Desktop)
 8007c74:	4b75      	ldr	r3, [pc, #468]	; (8007e4c <Display+0x5c0>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d028      	beq.n	8007cce <Display+0x442>
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	f040 808e 	bne.w	8007d9e <Display+0x512>
				{
					case DESKTOP_ON:
						LED8_ON;
 8007c82:	2201      	movs	r2, #1
 8007c84:	2180      	movs	r1, #128	; 0x80
 8007c86:	4872      	ldr	r0, [pc, #456]	; (8007e50 <Display+0x5c4>)
 8007c88:	f7f9 fe41 	bl	800190e <HAL_GPIO_WritePin>
						Desktop = DESKTOP_OFF;
 8007c8c:	4b6f      	ldr	r3, [pc, #444]	; (8007e4c <Display+0x5c0>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	701a      	strb	r2, [r3, #0]
						PositionState = 0;
 8007c92:	4b70      	ldr	r3, [pc, #448]	; (8007e54 <Display+0x5c8>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	701a      	strb	r2, [r3, #0]
						osThreadSuspend(TimeMenuHandle);
 8007c98:	4b6f      	ldr	r3, [pc, #444]	; (8007e58 <Display+0x5cc>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fc febb 	bl	8004a18 <osThreadSuspend>
						wh0802_write_to_display(0x00, MenuItem[PositionState].NameItem, CLEAR_ON);
 8007ca2:	4b6c      	ldr	r3, [pc, #432]	; (8007e54 <Display+0x5c8>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	2316      	movs	r3, #22
 8007caa:	fb03 f302 	mul.w	r3, r3, r2
 8007cae:	4a6b      	ldr	r2, [pc, #428]	; (8007e5c <Display+0x5d0>)
 8007cb0:	4413      	add	r3, r2
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	2000      	movs	r0, #0
 8007cba:	f7fc fbb9 	bl	8004430 <wh0802_write_to_display>
						osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007cbe:	4b68      	ldr	r3, [pc, #416]	; (8007e60 <Display+0x5d4>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f241 3188 	movw	r1, #5000	; 0x1388
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fc fcf2 	bl	80046b0 <osTimerStart>
					break;
 8007ccc:	e067      	b.n	8007d9e <Display+0x512>
					case DESKTOP_OFF:
						switch(PositionState)
 8007cce:	4b61      	ldr	r3, [pc, #388]	; (8007e54 <Display+0x5c8>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	3b06      	subs	r3, #6
 8007cd4:	2b0a      	cmp	r3, #10
 8007cd6:	d839      	bhi.n	8007d4c <Display+0x4c0>
 8007cd8:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <Display+0x454>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007d0d 	.word	0x08007d0d
 8007ce4:	08007d4d 	.word	0x08007d4d
 8007ce8:	08007d4d 	.word	0x08007d4d
 8007cec:	08007d4d 	.word	0x08007d4d
 8007cf0:	08007d4d 	.word	0x08007d4d
 8007cf4:	08007d4d 	.word	0x08007d4d
 8007cf8:	08007d4d 	.word	0x08007d4d
 8007cfc:	08007d4d 	.word	0x08007d4d
 8007d00:	08007d1d 	.word	0x08007d1d
 8007d04:	08007d2d 	.word	0x08007d2d
 8007d08:	08007d3d 	.word	0x08007d3d
						{
							case 6:
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007d0c:	4b54      	ldr	r3, [pc, #336]	; (8007e60 <Display+0x5d4>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f241 3188 	movw	r1, #5000	; 0x1388
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fc fccb 	bl	80046b0 <osTimerStart>
							break;
 8007d1a:	e03e      	b.n	8007d9a <Display+0x50e>
							case 14:
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007d1c:	4b50      	ldr	r3, [pc, #320]	; (8007e60 <Display+0x5d4>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f241 3188 	movw	r1, #5000	; 0x1388
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fc fcc3 	bl	80046b0 <osTimerStart>
							break;
 8007d2a:	e036      	b.n	8007d9a <Display+0x50e>
							case 15:
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007d2c:	4b4c      	ldr	r3, [pc, #304]	; (8007e60 <Display+0x5d4>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f241 3188 	movw	r1, #5000	; 0x1388
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fc fcbb 	bl	80046b0 <osTimerStart>
							break;
 8007d3a:	e02e      	b.n	8007d9a <Display+0x50e>
							case 16:
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007d3c:	4b48      	ldr	r3, [pc, #288]	; (8007e60 <Display+0x5d4>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f241 3188 	movw	r1, #5000	; 0x1388
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fc fcb3 	bl	80046b0 <osTimerStart>
							break;
 8007d4a:	e026      	b.n	8007d9a <Display+0x50e>
							default:
								LED8_ON;
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	2180      	movs	r1, #128	; 0x80
 8007d50:	483f      	ldr	r0, [pc, #252]	; (8007e50 <Display+0x5c4>)
 8007d52:	f7f9 fddc 	bl	800190e <HAL_GPIO_WritePin>
								PositionState = MenuItem[PositionState].Up;
 8007d56:	4b3f      	ldr	r3, [pc, #252]	; (8007e54 <Display+0x5c8>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4a3f      	ldr	r2, [pc, #252]	; (8007e5c <Display+0x5d0>)
 8007d5e:	2316      	movs	r3, #22
 8007d60:	fb03 f301 	mul.w	r3, r3, r1
 8007d64:	4413      	add	r3, r2
 8007d66:	3312      	adds	r3, #18
 8007d68:	781a      	ldrb	r2, [r3, #0]
 8007d6a:	4b3a      	ldr	r3, [pc, #232]	; (8007e54 <Display+0x5c8>)
 8007d6c:	701a      	strb	r2, [r3, #0]
								wh0802_write_to_display(0x00, MenuItem[PositionState].NameItem, CLEAR_ON);
 8007d6e:	4b39      	ldr	r3, [pc, #228]	; (8007e54 <Display+0x5c8>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	2316      	movs	r3, #22
 8007d76:	fb03 f302 	mul.w	r3, r3, r2
 8007d7a:	4a38      	ldr	r2, [pc, #224]	; (8007e5c <Display+0x5d0>)
 8007d7c:	4413      	add	r3, r2
 8007d7e:	3301      	adds	r3, #1
 8007d80:	2201      	movs	r2, #1
 8007d82:	4619      	mov	r1, r3
 8007d84:	2000      	movs	r0, #0
 8007d86:	f7fc fb53 	bl	8004430 <wh0802_write_to_display>
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007d8a:	4b35      	ldr	r3, [pc, #212]	; (8007e60 <Display+0x5d4>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fc fc8c 	bl	80046b0 <osTimerStart>
						}
					break;
 8007d98:	e001      	b.n	8007d9e <Display+0x512>
 8007d9a:	e000      	b.n	8007d9e <Display+0x512>
				}
			}
 8007d9c:	bf00      	nop
//-----------------------------------------------------

//Обработчик нажатия кнопки BUTTON6 меню дисплея--------------------
			if(event.value.v==BUTTON6_PRESSED)
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2b06      	cmp	r3, #6
 8007da2:	f040 81fd 	bne.w	80081a0 <Display+0x914>
			{
				switch(Desktop)
 8007da6:	4b29      	ldr	r3, [pc, #164]	; (8007e4c <Display+0x5c0>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d028      	beq.n	8007e00 <Display+0x574>
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	f47f ad72 	bne.w	8007898 <Display+0xc>
				{
					case DESKTOP_ON:
						LED8_ON;
 8007db4:	2201      	movs	r2, #1
 8007db6:	2180      	movs	r1, #128	; 0x80
 8007db8:	4825      	ldr	r0, [pc, #148]	; (8007e50 <Display+0x5c4>)
 8007dba:	f7f9 fda8 	bl	800190e <HAL_GPIO_WritePin>
						Desktop = DESKTOP_OFF;
 8007dbe:	4b23      	ldr	r3, [pc, #140]	; (8007e4c <Display+0x5c0>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	701a      	strb	r2, [r3, #0]
						PositionState = 0;
 8007dc4:	4b23      	ldr	r3, [pc, #140]	; (8007e54 <Display+0x5c8>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	701a      	strb	r2, [r3, #0]
						osThreadSuspend(TimeMenuHandle);
 8007dca:	4b23      	ldr	r3, [pc, #140]	; (8007e58 <Display+0x5cc>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fc fe22 	bl	8004a18 <osThreadSuspend>
						wh0802_write_to_display(0x00, MenuItem[PositionState].NameItem, CLEAR_ON);
 8007dd4:	4b1f      	ldr	r3, [pc, #124]	; (8007e54 <Display+0x5c8>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	2316      	movs	r3, #22
 8007ddc:	fb03 f302 	mul.w	r3, r3, r2
 8007de0:	4a1e      	ldr	r2, [pc, #120]	; (8007e5c <Display+0x5d0>)
 8007de2:	4413      	add	r3, r2
 8007de4:	3301      	adds	r3, #1
 8007de6:	2201      	movs	r2, #1
 8007de8:	4619      	mov	r1, r3
 8007dea:	2000      	movs	r0, #0
 8007dec:	f7fc fb20 	bl	8004430 <wh0802_write_to_display>
						osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007df0:	4b1b      	ldr	r3, [pc, #108]	; (8007e60 <Display+0x5d4>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f241 3188 	movw	r1, #5000	; 0x1388
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fc fc59 	bl	80046b0 <osTimerStart>
					break;
 8007dfe:	e1d0      	b.n	80081a2 <Display+0x916>
					case DESKTOP_OFF:
						switch(PositionState)
 8007e00:	4b14      	ldr	r3, [pc, #80]	; (8007e54 <Display+0x5c8>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	3b03      	subs	r3, #3
 8007e06:	2b0d      	cmp	r3, #13
 8007e08:	f200 81a2 	bhi.w	8008150 <Display+0x8c4>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <Display+0x588>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08008079 	.word	0x08008079
 8007e18:	080080b9 	.word	0x080080b9
 8007e1c:	08008151 	.word	0x08008151
 8007e20:	08008119 	.word	0x08008119
 8007e24:	08008151 	.word	0x08008151
 8007e28:	08008151 	.word	0x08008151
 8007e2c:	08008151 	.word	0x08008151
 8007e30:	08008151 	.word	0x08008151
 8007e34:	08008151 	.word	0x08008151
 8007e38:	08007e65 	.word	0x08007e65
 8007e3c:	08007f6f 	.word	0x08007f6f
 8007e40:	08008129 	.word	0x08008129
 8007e44:	080080f9 	.word	0x080080f9
 8007e48:	08008109 	.word	0x08008109
 8007e4c:	20002a05 	.word	0x20002a05
 8007e50:	40010800 	.word	0x40010800
 8007e54:	20002a04 	.word	0x20002a04
 8007e58:	20002964 	.word	0x20002964
 8007e5c:	20002a08 	.word	0x20002a08
 8007e60:	200028b0 	.word	0x200028b0
						{
							case 12:
								Time.Hours = 0x23;
 8007e64:	4bb4      	ldr	r3, [pc, #720]	; (8008138 <Display+0x8ac>)
 8007e66:	2223      	movs	r2, #35	; 0x23
 8007e68:	701a      	strb	r2, [r3, #0]
								Time.Minutes = 0x59;
 8007e6a:	4bb3      	ldr	r3, [pc, #716]	; (8008138 <Display+0x8ac>)
 8007e6c:	2259      	movs	r2, #89	; 0x59
 8007e6e:	705a      	strb	r2, [r3, #1]
								Time.Seconds = 0x59;
 8007e70:	4bb1      	ldr	r3, [pc, #708]	; (8008138 <Display+0x8ac>)
 8007e72:	2259      	movs	r2, #89	; 0x59
 8007e74:	709a      	strb	r2, [r3, #2]
								PositionState = 6;
 8007e76:	4bb1      	ldr	r3, [pc, #708]	; (800813c <Display+0x8b0>)
 8007e78:	2206      	movs	r2, #6
 8007e7a:	701a      	strb	r2, [r3, #0]
								wh0802_clear_display();
 8007e7c:	f7fc fa20 	bl	80042c0 <wh0802_clear_display>
								wh0802_set_ddram_address(0x00);
 8007e80:	2000      	movs	r0, #0
 8007e82:	f7fc fa72 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Hours>>4)&0x0F) );
 8007e86:	4bac      	ldr	r3, [pc, #688]	; (8008138 <Display+0x8ac>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	091b      	lsrs	r3, r3, #4
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	b25b      	sxtb	r3, r3
 8007e90:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007e94:	b25b      	sxtb	r3, r3
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f7fc fa77 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Hours&0x0F) );
 8007e9e:	4ba6      	ldr	r3, [pc, #664]	; (8008138 <Display+0x8ac>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	b25b      	sxtb	r3, r3
 8007ea4:	f003 030f 	and.w	r3, r3, #15
 8007ea8:	b25b      	sxtb	r3, r3
 8007eaa:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007eae:	b25b      	sxtb	r3, r3
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fc fa6a 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram(':');
 8007eb8:	203a      	movs	r0, #58	; 0x3a
 8007eba:	f7fc fa67 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 8007ebe:	4b9e      	ldr	r3, [pc, #632]	; (8008138 <Display+0x8ac>)
 8007ec0:	785b      	ldrb	r3, [r3, #1]
 8007ec2:	091b      	lsrs	r3, r3, #4
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	b25b      	sxtb	r3, r3
 8007ec8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007ecc:	b25b      	sxtb	r3, r3
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fc fa5b 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 8007ed6:	4b98      	ldr	r3, [pc, #608]	; (8008138 <Display+0x8ac>)
 8007ed8:	785b      	ldrb	r3, [r3, #1]
 8007eda:	b25b      	sxtb	r3, r3
 8007edc:	f003 030f 	and.w	r3, r3, #15
 8007ee0:	b25b      	sxtb	r3, r3
 8007ee2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007ee6:	b25b      	sxtb	r3, r3
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fc fa4e 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram(':');
 8007ef0:	203a      	movs	r0, #58	; 0x3a
 8007ef2:	f7fc fa4b 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 8007ef6:	4b90      	ldr	r3, [pc, #576]	; (8008138 <Display+0x8ac>)
 8007ef8:	789b      	ldrb	r3, [r3, #2]
 8007efa:	091b      	lsrs	r3, r3, #4
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	b25b      	sxtb	r3, r3
 8007f00:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007f04:	b25b      	sxtb	r3, r3
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fc fa3f 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 8007f0e:	4b8a      	ldr	r3, [pc, #552]	; (8008138 <Display+0x8ac>)
 8007f10:	789b      	ldrb	r3, [r3, #2]
 8007f12:	b25b      	sxtb	r3, r3
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	b25b      	sxtb	r3, r3
 8007f1a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007f1e:	b25b      	sxtb	r3, r3
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fc fa32 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x40);
 8007f28:	2040      	movs	r0, #64	; 0x40
 8007f2a:	f7fc fa1e 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram('h');
 8007f2e:	2068      	movs	r0, #104	; 0x68
 8007f30:	f7fc fa2c 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram('h');
 8007f34:	2068      	movs	r0, #104	; 0x68
 8007f36:	f7fc fa29 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram(':');
 8007f3a:	203a      	movs	r0, #58	; 0x3a
 8007f3c:	f7fc fa26 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram('m');
 8007f40:	206d      	movs	r0, #109	; 0x6d
 8007f42:	f7fc fa23 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram('m');
 8007f46:	206d      	movs	r0, #109	; 0x6d
 8007f48:	f7fc fa20 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram(':');
 8007f4c:	203a      	movs	r0, #58	; 0x3a
 8007f4e:	f7fc fa1d 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram('s');
 8007f52:	2073      	movs	r0, #115	; 0x73
 8007f54:	f7fc fa1a 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram('s');
 8007f58:	2073      	movs	r0, #115	; 0x73
 8007f5a:	f7fc fa17 	bl	800438c <wh0802_write_data_to_ram>
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8007f5e:	4b78      	ldr	r3, [pc, #480]	; (8008140 <Display+0x8b4>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f241 3188 	movw	r1, #5000	; 0x1388
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fc fba2 	bl	80046b0 <osTimerStart>
							break;
 8007f6c:	e117      	b.n	800819e <Display+0x912>
							case 13:
								Date.Date=0x01;
 8007f6e:	4b75      	ldr	r3, [pc, #468]	; (8008144 <Display+0x8b8>)
 8007f70:	2201      	movs	r2, #1
 8007f72:	709a      	strb	r2, [r3, #2]
								Date.Month=0x01;
 8007f74:	4b73      	ldr	r3, [pc, #460]	; (8008144 <Display+0x8b8>)
 8007f76:	2201      	movs	r2, #1
 8007f78:	705a      	strb	r2, [r3, #1]
								Date.Year=0x00;
 8007f7a:	4b72      	ldr	r3, [pc, #456]	; (8008144 <Display+0x8b8>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	70da      	strb	r2, [r3, #3]
								PositionState = 14;
 8007f80:	4b6e      	ldr	r3, [pc, #440]	; (800813c <Display+0x8b0>)
 8007f82:	220e      	movs	r2, #14
 8007f84:	701a      	strb	r2, [r3, #0]
								wh0802_clear_display();
 8007f86:	f7fc f99b 	bl	80042c0 <wh0802_clear_display>
								wh0802_set_ddram_address(0x00);
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	f7fc f9ed 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Date>>4)&0x0F) );
 8007f90:	4b6c      	ldr	r3, [pc, #432]	; (8008144 <Display+0x8b8>)
 8007f92:	789b      	ldrb	r3, [r3, #2]
 8007f94:	091b      	lsrs	r3, r3, #4
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	b25b      	sxtb	r3, r3
 8007f9a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007f9e:	b25b      	sxtb	r3, r3
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fc f9f2 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Date&0x0F) );
 8007fa8:	4b66      	ldr	r3, [pc, #408]	; (8008144 <Display+0x8b8>)
 8007faa:	789b      	ldrb	r3, [r3, #2]
 8007fac:	b25b      	sxtb	r3, r3
 8007fae:	f003 030f 	and.w	r3, r3, #15
 8007fb2:	b25b      	sxtb	r3, r3
 8007fb4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007fb8:	b25b      	sxtb	r3, r3
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fc f9e5 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram(':');
 8007fc2:	203a      	movs	r0, #58	; 0x3a
 8007fc4:	f7fc f9e2 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| ((Date.Month>>4)&0x0F) );
 8007fc8:	4b5e      	ldr	r3, [pc, #376]	; (8008144 <Display+0x8b8>)
 8007fca:	785b      	ldrb	r3, [r3, #1]
 8007fcc:	091b      	lsrs	r3, r3, #4
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	b25b      	sxtb	r3, r3
 8007fd2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007fd6:	b25b      	sxtb	r3, r3
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fc f9d6 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Month&0x0F) );
 8007fe0:	4b58      	ldr	r3, [pc, #352]	; (8008144 <Display+0x8b8>)
 8007fe2:	785b      	ldrb	r3, [r3, #1]
 8007fe4:	b25b      	sxtb	r3, r3
 8007fe6:	f003 030f 	and.w	r3, r3, #15
 8007fea:	b25b      	sxtb	r3, r3
 8007fec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8007ff0:	b25b      	sxtb	r3, r3
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fc f9c9 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram(':');
 8007ffa:	203a      	movs	r0, #58	; 0x3a
 8007ffc:	f7fc f9c6 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| ((Date.Year>>4)&0x0F) );
 8008000:	4b50      	ldr	r3, [pc, #320]	; (8008144 <Display+0x8b8>)
 8008002:	78db      	ldrb	r3, [r3, #3]
 8008004:	091b      	lsrs	r3, r3, #4
 8008006:	b2db      	uxtb	r3, r3
 8008008:	b25b      	sxtb	r3, r3
 800800a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800800e:	b25b      	sxtb	r3, r3
 8008010:	b2db      	uxtb	r3, r3
 8008012:	4618      	mov	r0, r3
 8008014:	f7fc f9ba 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Year&0x0F) );
 8008018:	4b4a      	ldr	r3, [pc, #296]	; (8008144 <Display+0x8b8>)
 800801a:	78db      	ldrb	r3, [r3, #3]
 800801c:	b25b      	sxtb	r3, r3
 800801e:	f003 030f 	and.w	r3, r3, #15
 8008022:	b25b      	sxtb	r3, r3
 8008024:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008028:	b25b      	sxtb	r3, r3
 800802a:	b2db      	uxtb	r3, r3
 800802c:	4618      	mov	r0, r3
 800802e:	f7fc f9ad 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x40);
 8008032:	2040      	movs	r0, #64	; 0x40
 8008034:	f7fc f999 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram('d');
 8008038:	2064      	movs	r0, #100	; 0x64
 800803a:	f7fc f9a7 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram('d');
 800803e:	2064      	movs	r0, #100	; 0x64
 8008040:	f7fc f9a4 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram(':');
 8008044:	203a      	movs	r0, #58	; 0x3a
 8008046:	f7fc f9a1 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram('m');
 800804a:	206d      	movs	r0, #109	; 0x6d
 800804c:	f7fc f99e 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram('m');
 8008050:	206d      	movs	r0, #109	; 0x6d
 8008052:	f7fc f99b 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram(':');
 8008056:	203a      	movs	r0, #58	; 0x3a
 8008058:	f7fc f998 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram('y');
 800805c:	2079      	movs	r0, #121	; 0x79
 800805e:	f7fc f995 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram('y');
 8008062:	2079      	movs	r0, #121	; 0x79
 8008064:	f7fc f992 	bl	800438c <wh0802_write_data_to_ram>
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8008068:	4b35      	ldr	r3, [pc, #212]	; (8008140 <Display+0x8b4>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f241 3188 	movw	r1, #5000	; 0x1388
 8008070:	4618      	mov	r0, r3
 8008072:	f7fc fb1d 	bl	80046b0 <osTimerStart>
							break;
 8008076:	e092      	b.n	800819e <Display+0x912>
							case 3:
								PositionState = 15;
 8008078:	4b30      	ldr	r3, [pc, #192]	; (800813c <Display+0x8b0>)
 800807a:	220f      	movs	r2, #15
 800807c:	701a      	strb	r2, [r3, #0]
								wh0802_clear_display();
 800807e:	f7fc f91f 	bl	80042c0 <wh0802_clear_display>
								if(desktop_time_state==DESKTOP_TIME_ON)
 8008082:	4b31      	ldr	r3, [pc, #196]	; (8008148 <Display+0x8bc>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d109      	bne.n	800809e <Display+0x812>
								{
									wh0802_set_ddram_address(0x00);
 800808a:	2000      	movs	r0, #0
 800808c:	f7fc f96d 	bl	800436a <wh0802_set_ddram_address>
									wh0802_write_data_to_ram('O');
 8008090:	204f      	movs	r0, #79	; 0x4f
 8008092:	f7fc f97b 	bl	800438c <wh0802_write_data_to_ram>
									wh0802_write_data_to_ram('N');
 8008096:	204e      	movs	r0, #78	; 0x4e
 8008098:	f7fc f978 	bl	800438c <wh0802_write_data_to_ram>
									wh0802_set_ddram_address(0x00);
									wh0802_write_data_to_ram('O');
									wh0802_write_data_to_ram('F');
									wh0802_write_data_to_ram('F');
								}
							break;
 800809c:	e07f      	b.n	800819e <Display+0x912>
									wh0802_set_ddram_address(0x00);
 800809e:	2000      	movs	r0, #0
 80080a0:	f7fc f963 	bl	800436a <wh0802_set_ddram_address>
									wh0802_write_data_to_ram('O');
 80080a4:	204f      	movs	r0, #79	; 0x4f
 80080a6:	f7fc f971 	bl	800438c <wh0802_write_data_to_ram>
									wh0802_write_data_to_ram('F');
 80080aa:	2046      	movs	r0, #70	; 0x46
 80080ac:	f7fc f96e 	bl	800438c <wh0802_write_data_to_ram>
									wh0802_write_data_to_ram('F');
 80080b0:	2046      	movs	r0, #70	; 0x46
 80080b2:	f7fc f96b 	bl	800438c <wh0802_write_data_to_ram>
							break;
 80080b6:	e072      	b.n	800819e <Display+0x912>
							case 4:
								PositionState = 16;
 80080b8:	4b20      	ldr	r3, [pc, #128]	; (800813c <Display+0x8b0>)
 80080ba:	2210      	movs	r2, #16
 80080bc:	701a      	strb	r2, [r3, #0]
								wh0802_clear_display();
 80080be:	f7fc f8ff 	bl	80042c0 <wh0802_clear_display>
								if(desktop_date_state==DESKTOP_DATE_ON)
 80080c2:	4b22      	ldr	r3, [pc, #136]	; (800814c <Display+0x8c0>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d109      	bne.n	80080de <Display+0x852>
								{
									wh0802_set_ddram_address(0x00);
 80080ca:	2000      	movs	r0, #0
 80080cc:	f7fc f94d 	bl	800436a <wh0802_set_ddram_address>
									wh0802_write_data_to_ram('O');
 80080d0:	204f      	movs	r0, #79	; 0x4f
 80080d2:	f7fc f95b 	bl	800438c <wh0802_write_data_to_ram>
									wh0802_write_data_to_ram('N');
 80080d6:	204e      	movs	r0, #78	; 0x4e
 80080d8:	f7fc f958 	bl	800438c <wh0802_write_data_to_ram>
									wh0802_set_ddram_address(0x00);
									wh0802_write_data_to_ram('O');
									wh0802_write_data_to_ram('F');
									wh0802_write_data_to_ram('F');
								}
							break;
 80080dc:	e05f      	b.n	800819e <Display+0x912>
									wh0802_set_ddram_address(0x00);
 80080de:	2000      	movs	r0, #0
 80080e0:	f7fc f943 	bl	800436a <wh0802_set_ddram_address>
									wh0802_write_data_to_ram('O');
 80080e4:	204f      	movs	r0, #79	; 0x4f
 80080e6:	f7fc f951 	bl	800438c <wh0802_write_data_to_ram>
									wh0802_write_data_to_ram('F');
 80080ea:	2046      	movs	r0, #70	; 0x46
 80080ec:	f7fc f94e 	bl	800438c <wh0802_write_data_to_ram>
									wh0802_write_data_to_ram('F');
 80080f0:	2046      	movs	r0, #70	; 0x46
 80080f2:	f7fc f94b 	bl	800438c <wh0802_write_data_to_ram>
							break;
 80080f6:	e052      	b.n	800819e <Display+0x912>
							case 15:
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 80080f8:	4b11      	ldr	r3, [pc, #68]	; (8008140 <Display+0x8b4>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f241 3188 	movw	r1, #5000	; 0x1388
 8008100:	4618      	mov	r0, r3
 8008102:	f7fc fad5 	bl	80046b0 <osTimerStart>
							break;
 8008106:	e04a      	b.n	800819e <Display+0x912>
							case 16:
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8008108:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <Display+0x8b4>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f241 3188 	movw	r1, #5000	; 0x1388
 8008110:	4618      	mov	r0, r3
 8008112:	f7fc facd 	bl	80046b0 <osTimerStart>
							break;
 8008116:	e042      	b.n	800819e <Display+0x912>
							case 6:
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8008118:	4b09      	ldr	r3, [pc, #36]	; (8008140 <Display+0x8b4>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f241 3188 	movw	r1, #5000	; 0x1388
 8008120:	4618      	mov	r0, r3
 8008122:	f7fc fac5 	bl	80046b0 <osTimerStart>
							break;
 8008126:	e03a      	b.n	800819e <Display+0x912>
							case 14:
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8008128:	4b05      	ldr	r3, [pc, #20]	; (8008140 <Display+0x8b4>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f241 3188 	movw	r1, #5000	; 0x1388
 8008130:	4618      	mov	r0, r3
 8008132:	f7fc fabd 	bl	80046b0 <osTimerStart>
							break;
 8008136:	e032      	b.n	800819e <Display+0x912>
 8008138:	20002c10 	.word	0x20002c10
 800813c:	20002a04 	.word	0x20002a04
 8008140:	200028b0 	.word	0x200028b0
 8008144:	20002c08 	.word	0x20002c08
 8008148:	20000010 	.word	0x20000010
 800814c:	20000011 	.word	0x20000011
							default:
								LED8_ON;
 8008150:	2201      	movs	r2, #1
 8008152:	2180      	movs	r1, #128	; 0x80
 8008154:	4814      	ldr	r0, [pc, #80]	; (80081a8 <Display+0x91c>)
 8008156:	f7f9 fbda 	bl	800190e <HAL_GPIO_WritePin>
								PositionState = MenuItem[PositionState].Next;
 800815a:	4b14      	ldr	r3, [pc, #80]	; (80081ac <Display+0x920>)
 800815c:	781b      	ldrb	r3, [r3, #0]
 800815e:	4619      	mov	r1, r3
 8008160:	4a13      	ldr	r2, [pc, #76]	; (80081b0 <Display+0x924>)
 8008162:	2316      	movs	r3, #22
 8008164:	fb03 f301 	mul.w	r3, r3, r1
 8008168:	4413      	add	r3, r2
 800816a:	3314      	adds	r3, #20
 800816c:	781a      	ldrb	r2, [r3, #0]
 800816e:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <Display+0x920>)
 8008170:	701a      	strb	r2, [r3, #0]
								wh0802_write_to_display(0x00, MenuItem[PositionState].NameItem, CLEAR_ON);
 8008172:	4b0e      	ldr	r3, [pc, #56]	; (80081ac <Display+0x920>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	2316      	movs	r3, #22
 800817a:	fb03 f302 	mul.w	r3, r3, r2
 800817e:	4a0c      	ldr	r2, [pc, #48]	; (80081b0 <Display+0x924>)
 8008180:	4413      	add	r3, r2
 8008182:	3301      	adds	r3, #1
 8008184:	2201      	movs	r2, #1
 8008186:	4619      	mov	r1, r3
 8008188:	2000      	movs	r0, #0
 800818a:	f7fc f951 	bl	8004430 <wh0802_write_to_display>
								osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 800818e:	4b09      	ldr	r3, [pc, #36]	; (80081b4 <Display+0x928>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f241 3188 	movw	r1, #5000	; 0x1388
 8008196:	4618      	mov	r0, r3
 8008198:	f7fc fa8a 	bl	80046b0 <osTimerStart>
						}
					break;
 800819c:	e001      	b.n	80081a2 <Display+0x916>
 800819e:	e000      	b.n	80081a2 <Display+0x916>
				}
			}
 80081a0:	bf00      	nop
		event = osMessageGet(pos_Queue, 100);
 80081a2:	f7ff bb79 	b.w	8007898 <Display+0xc>
 80081a6:	bf00      	nop
 80081a8:	40010800 	.word	0x40010800
 80081ac:	20002a04 	.word	0x20002a04
 80081b0:	20002a08 	.word	0x20002a08
 80081b4:	200028b0 	.word	0x200028b0

080081b8 <TimeMenu>:
	}
}

// Задача для обработки меню времени
void TimeMenu(void const * argument)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]


	for(;;)
	{
		if(desktop_time_state == DESKTOP_TIME_ON)
 80081c0:	4b7a      	ldr	r3, [pc, #488]	; (80083ac <TimeMenu+0x1f4>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d159      	bne.n	800827c <TimeMenu+0xc4>
		{
			HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BCD);
 80081c8:	2201      	movs	r2, #1
 80081ca:	4979      	ldr	r1, [pc, #484]	; (80083b0 <TimeMenu+0x1f8>)
 80081cc:	4879      	ldr	r0, [pc, #484]	; (80083b4 <TimeMenu+0x1fc>)
 80081ce:	f7fa fab5 	bl	800273c <HAL_RTC_GetTime>
			wh0802_set_ddram_address(0x00);
 80081d2:	2000      	movs	r0, #0
 80081d4:	f7fc f8c9 	bl	800436a <wh0802_set_ddram_address>
			wh0802_write_data_to_ram( 0x30| ((Time.Hours>>4)&0x0F) );
 80081d8:	4b75      	ldr	r3, [pc, #468]	; (80083b0 <TimeMenu+0x1f8>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	091b      	lsrs	r3, r3, #4
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	b25b      	sxtb	r3, r3
 80081e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80081e6:	b25b      	sxtb	r3, r3
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fc f8ce 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram( 0x30| (Time.Hours&0x0F) );
 80081f0:	4b6f      	ldr	r3, [pc, #444]	; (80083b0 <TimeMenu+0x1f8>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	b25b      	sxtb	r3, r3
 80081f6:	f003 030f 	and.w	r3, r3, #15
 80081fa:	b25b      	sxtb	r3, r3
 80081fc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008200:	b25b      	sxtb	r3, r3
 8008202:	b2db      	uxtb	r3, r3
 8008204:	4618      	mov	r0, r3
 8008206:	f7fc f8c1 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(':');
 800820a:	203a      	movs	r0, #58	; 0x3a
 800820c:	f7fc f8be 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 8008210:	4b67      	ldr	r3, [pc, #412]	; (80083b0 <TimeMenu+0x1f8>)
 8008212:	785b      	ldrb	r3, [r3, #1]
 8008214:	091b      	lsrs	r3, r3, #4
 8008216:	b2db      	uxtb	r3, r3
 8008218:	b25b      	sxtb	r3, r3
 800821a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800821e:	b25b      	sxtb	r3, r3
 8008220:	b2db      	uxtb	r3, r3
 8008222:	4618      	mov	r0, r3
 8008224:	f7fc f8b2 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 8008228:	4b61      	ldr	r3, [pc, #388]	; (80083b0 <TimeMenu+0x1f8>)
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	b25b      	sxtb	r3, r3
 800822e:	f003 030f 	and.w	r3, r3, #15
 8008232:	b25b      	sxtb	r3, r3
 8008234:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008238:	b25b      	sxtb	r3, r3
 800823a:	b2db      	uxtb	r3, r3
 800823c:	4618      	mov	r0, r3
 800823e:	f7fc f8a5 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(':');
 8008242:	203a      	movs	r0, #58	; 0x3a
 8008244:	f7fc f8a2 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 8008248:	4b59      	ldr	r3, [pc, #356]	; (80083b0 <TimeMenu+0x1f8>)
 800824a:	789b      	ldrb	r3, [r3, #2]
 800824c:	091b      	lsrs	r3, r3, #4
 800824e:	b2db      	uxtb	r3, r3
 8008250:	b25b      	sxtb	r3, r3
 8008252:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008256:	b25b      	sxtb	r3, r3
 8008258:	b2db      	uxtb	r3, r3
 800825a:	4618      	mov	r0, r3
 800825c:	f7fc f896 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 8008260:	4b53      	ldr	r3, [pc, #332]	; (80083b0 <TimeMenu+0x1f8>)
 8008262:	789b      	ldrb	r3, [r3, #2]
 8008264:	b25b      	sxtb	r3, r3
 8008266:	f003 030f 	and.w	r3, r3, #15
 800826a:	b25b      	sxtb	r3, r3
 800826c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008270:	b25b      	sxtb	r3, r3
 8008272:	b2db      	uxtb	r3, r3
 8008274:	4618      	mov	r0, r3
 8008276:	f7fc f889 	bl	800438c <wh0802_write_data_to_ram>
 800827a:	e01a      	b.n	80082b2 <TimeMenu+0xfa>
		}
		else
		{
			wh0802_set_ddram_address(0x00);
 800827c:	2000      	movs	r0, #0
 800827e:	f7fc f874 	bl	800436a <wh0802_set_ddram_address>
			wh0802_write_data_to_ram(' ');
 8008282:	2020      	movs	r0, #32
 8008284:	f7fc f882 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 8008288:	2020      	movs	r0, #32
 800828a:	f7fc f87f 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 800828e:	2020      	movs	r0, #32
 8008290:	f7fc f87c 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 8008294:	2020      	movs	r0, #32
 8008296:	f7fc f879 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 800829a:	2020      	movs	r0, #32
 800829c:	f7fc f876 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 80082a0:	2020      	movs	r0, #32
 80082a2:	f7fc f873 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 80082a6:	2020      	movs	r0, #32
 80082a8:	f7fc f870 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 80082ac:	2020      	movs	r0, #32
 80082ae:	f7fc f86d 	bl	800438c <wh0802_write_data_to_ram>
		}
		if(desktop_date_state == DESKTOP_DATE_ON)
 80082b2:	4b41      	ldr	r3, [pc, #260]	; (80083b8 <TimeMenu+0x200>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d159      	bne.n	800836e <TimeMenu+0x1b6>
		{
			HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BCD);
 80082ba:	2201      	movs	r2, #1
 80082bc:	493f      	ldr	r1, [pc, #252]	; (80083bc <TimeMenu+0x204>)
 80082be:	483d      	ldr	r0, [pc, #244]	; (80083b4 <TimeMenu+0x1fc>)
 80082c0:	f7fa fbca 	bl	8002a58 <HAL_RTC_GetDate>
			wh0802_set_ddram_address(0x40);
 80082c4:	2040      	movs	r0, #64	; 0x40
 80082c6:	f7fc f850 	bl	800436a <wh0802_set_ddram_address>
			wh0802_write_data_to_ram( 0x30| ((Date.Date>>4)&0x0F) );
 80082ca:	4b3c      	ldr	r3, [pc, #240]	; (80083bc <TimeMenu+0x204>)
 80082cc:	789b      	ldrb	r3, [r3, #2]
 80082ce:	091b      	lsrs	r3, r3, #4
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	b25b      	sxtb	r3, r3
 80082d4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80082d8:	b25b      	sxtb	r3, r3
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fc f855 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram( 0x30| (Date.Date&0x0F) );
 80082e2:	4b36      	ldr	r3, [pc, #216]	; (80083bc <TimeMenu+0x204>)
 80082e4:	789b      	ldrb	r3, [r3, #2]
 80082e6:	b25b      	sxtb	r3, r3
 80082e8:	f003 030f 	and.w	r3, r3, #15
 80082ec:	b25b      	sxtb	r3, r3
 80082ee:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80082f2:	b25b      	sxtb	r3, r3
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fc f848 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram('-');
 80082fc:	202d      	movs	r0, #45	; 0x2d
 80082fe:	f7fc f845 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram( 0x30| ((Date.Month>>4)&0x0F) );
 8008302:	4b2e      	ldr	r3, [pc, #184]	; (80083bc <TimeMenu+0x204>)
 8008304:	785b      	ldrb	r3, [r3, #1]
 8008306:	091b      	lsrs	r3, r3, #4
 8008308:	b2db      	uxtb	r3, r3
 800830a:	b25b      	sxtb	r3, r3
 800830c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008310:	b25b      	sxtb	r3, r3
 8008312:	b2db      	uxtb	r3, r3
 8008314:	4618      	mov	r0, r3
 8008316:	f7fc f839 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram( 0x30| (Date.Month&0x0F) );
 800831a:	4b28      	ldr	r3, [pc, #160]	; (80083bc <TimeMenu+0x204>)
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	b25b      	sxtb	r3, r3
 8008320:	f003 030f 	and.w	r3, r3, #15
 8008324:	b25b      	sxtb	r3, r3
 8008326:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800832a:	b25b      	sxtb	r3, r3
 800832c:	b2db      	uxtb	r3, r3
 800832e:	4618      	mov	r0, r3
 8008330:	f7fc f82c 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram('-');
 8008334:	202d      	movs	r0, #45	; 0x2d
 8008336:	f7fc f829 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram( 0x30| ((Date.Year>>4)&0x0F) );
 800833a:	4b20      	ldr	r3, [pc, #128]	; (80083bc <TimeMenu+0x204>)
 800833c:	78db      	ldrb	r3, [r3, #3]
 800833e:	091b      	lsrs	r3, r3, #4
 8008340:	b2db      	uxtb	r3, r3
 8008342:	b25b      	sxtb	r3, r3
 8008344:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008348:	b25b      	sxtb	r3, r3
 800834a:	b2db      	uxtb	r3, r3
 800834c:	4618      	mov	r0, r3
 800834e:	f7fc f81d 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram( 0x30| (Date.Year&0x0F) );
 8008352:	4b1a      	ldr	r3, [pc, #104]	; (80083bc <TimeMenu+0x204>)
 8008354:	78db      	ldrb	r3, [r3, #3]
 8008356:	b25b      	sxtb	r3, r3
 8008358:	f003 030f 	and.w	r3, r3, #15
 800835c:	b25b      	sxtb	r3, r3
 800835e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008362:	b25b      	sxtb	r3, r3
 8008364:	b2db      	uxtb	r3, r3
 8008366:	4618      	mov	r0, r3
 8008368:	f7fc f810 	bl	800438c <wh0802_write_data_to_ram>
 800836c:	e01a      	b.n	80083a4 <TimeMenu+0x1ec>
		}
		else
		{
			wh0802_set_ddram_address(0x40);
 800836e:	2040      	movs	r0, #64	; 0x40
 8008370:	f7fb fffb 	bl	800436a <wh0802_set_ddram_address>
			wh0802_write_data_to_ram(' ');
 8008374:	2020      	movs	r0, #32
 8008376:	f7fc f809 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 800837a:	2020      	movs	r0, #32
 800837c:	f7fc f806 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 8008380:	2020      	movs	r0, #32
 8008382:	f7fc f803 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 8008386:	2020      	movs	r0, #32
 8008388:	f7fc f800 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 800838c:	2020      	movs	r0, #32
 800838e:	f7fb fffd 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 8008392:	2020      	movs	r0, #32
 8008394:	f7fb fffa 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 8008398:	2020      	movs	r0, #32
 800839a:	f7fb fff7 	bl	800438c <wh0802_write_data_to_ram>
			wh0802_write_data_to_ram(' ');
 800839e:	2020      	movs	r0, #32
 80083a0:	f7fb fff4 	bl	800438c <wh0802_write_data_to_ram>
		}

		osDelay(100);
 80083a4:	2064      	movs	r0, #100	; 0x64
 80083a6:	f7fc f93a 	bl	800461e <osDelay>
		if(desktop_time_state == DESKTOP_TIME_ON)
 80083aa:	e709      	b.n	80081c0 <TimeMenu+0x8>
 80083ac:	20000010 	.word	0x20000010
 80083b0:	20002c10 	.word	0x20002c10
 80083b4:	2000293c 	.word	0x2000293c
 80083b8:	20000011 	.word	0x20000011
 80083bc:	20002c08 	.word	0x20002c08

080083c0 <TimeTask>:
	}
}

// Обработчик задачи установки времени
void TimeTask(void const * argument)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	osEvent event1;
	osThreadSuspend(TimeTaskHandle); // Приостанавливаем задачу
 80083c8:	4b76      	ldr	r3, [pc, #472]	; (80085a4 <TimeTask+0x1e4>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fc fb23 	bl	8004a18 <osThreadSuspend>

	for(;;)
	{
		event1 = osMessageGet(pos_Queue, 100);
 80083d2:	4b75      	ldr	r3, [pc, #468]	; (80085a8 <TimeTask+0x1e8>)
 80083d4:	6819      	ldr	r1, [r3, #0]
 80083d6:	f107 030c 	add.w	r3, r7, #12
 80083da:	2264      	movs	r2, #100	; 0x64
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fc faa7 	bl	8004930 <osMessageGet>
		if (event1.status == osEventMessage)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b10      	cmp	r3, #16
 80083e6:	d1f4      	bne.n	80083d2 <TimeTask+0x12>
		{
			if(event1.value.v==BUTTON1_PRESSED)
			{

			}
			if(event1.value.v==BUTTON2_PRESSED)
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d11f      	bne.n	800842e <TimeTask+0x6e>
			{
				LED8_OFF;
 80083ee:	2200      	movs	r2, #0
 80083f0:	2180      	movs	r1, #128	; 0x80
 80083f2:	486e      	ldr	r0, [pc, #440]	; (80085ac <TimeTask+0x1ec>)
 80083f4:	f7f9 fa8b 	bl	800190e <HAL_GPIO_WritePin>
				wh0802_display_control(DISPLAY_ON, CURSOR_OFF, BLINKING_OFF);
 80083f8:	2200      	movs	r2, #0
 80083fa:	2100      	movs	r1, #0
 80083fc:	2004      	movs	r0, #4
 80083fe:	f7fb ff7e 	bl	80042fe <wh0802_display_control>
				HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BCD);
 8008402:	2201      	movs	r2, #1
 8008404:	496a      	ldr	r1, [pc, #424]	; (80085b0 <TimeTask+0x1f0>)
 8008406:	486b      	ldr	r0, [pc, #428]	; (80085b4 <TimeTask+0x1f4>)
 8008408:	f7fa f900 	bl	800260c <HAL_RTC_SetTime>
				osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 800840c:	4b6a      	ldr	r3, [pc, #424]	; (80085b8 <TimeTask+0x1f8>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f241 3188 	movw	r1, #5000	; 0x1388
 8008414:	4618      	mov	r0, r3
 8008416:	f7fc f94b 	bl	80046b0 <osTimerStart>
				osThreadResume(DisplayHandle);
 800841a:	4b68      	ldr	r3, [pc, #416]	; (80085bc <TimeTask+0x1fc>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4618      	mov	r0, r3
 8008420:	f7fc fb06 	bl	8004a30 <osThreadResume>
				osThreadSuspend(TimeTaskHandle);
 8008424:	4b5f      	ldr	r3, [pc, #380]	; (80085a4 <TimeTask+0x1e4>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4618      	mov	r0, r3
 800842a:	f7fc faf5 	bl	8004a18 <osThreadSuspend>

			}
			if(event1.value.v==BUTTON3_PRESSED)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	2b03      	cmp	r3, #3
 8008432:	f040 82c9 	bne.w	80089c8 <TimeTask+0x608>
			{
				if(ddram==0x01)
 8008436:	4b62      	ldr	r3, [pc, #392]	; (80085c0 <TimeTask+0x200>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d17b      	bne.n	8008536 <TimeTask+0x176>
				{
					if(Time.Hours>0x00)
 800843e:	4b5c      	ldr	r3, [pc, #368]	; (80085b0 <TimeTask+0x1f0>)
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d077      	beq.n	8008536 <TimeTask+0x176>
					{
						if((Time.Hours&0x0F)>0x00)
 8008446:	4b5a      	ldr	r3, [pc, #360]	; (80085b0 <TimeTask+0x1f0>)
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	f003 030f 	and.w	r3, r3, #15
 800844e:	2b00      	cmp	r3, #0
 8008450:	dd25      	ble.n	800849e <TimeTask+0xde>
						{
							Time.Hours--;
 8008452:	4b57      	ldr	r3, [pc, #348]	; (80085b0 <TimeTask+0x1f0>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	3b01      	subs	r3, #1
 8008458:	b2da      	uxtb	r2, r3
 800845a:	4b55      	ldr	r3, [pc, #340]	; (80085b0 <TimeTask+0x1f0>)
 800845c:	701a      	strb	r2, [r3, #0]
							wh0802_set_ddram_address(0x00);
 800845e:	2000      	movs	r0, #0
 8008460:	f7fb ff83 	bl	800436a <wh0802_set_ddram_address>
							wh0802_write_data_to_ram( 0x30| ((Time.Hours>>4)&0x0F) );
 8008464:	4b52      	ldr	r3, [pc, #328]	; (80085b0 <TimeTask+0x1f0>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	091b      	lsrs	r3, r3, #4
 800846a:	b2db      	uxtb	r3, r3
 800846c:	b25b      	sxtb	r3, r3
 800846e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008472:	b25b      	sxtb	r3, r3
 8008474:	b2db      	uxtb	r3, r3
 8008476:	4618      	mov	r0, r3
 8008478:	f7fb ff88 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_write_data_to_ram( 0x30| (Time.Hours&0x0F) );
 800847c:	4b4c      	ldr	r3, [pc, #304]	; (80085b0 <TimeTask+0x1f0>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	b25b      	sxtb	r3, r3
 8008482:	f003 030f 	and.w	r3, r3, #15
 8008486:	b25b      	sxtb	r3, r3
 8008488:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800848c:	b25b      	sxtb	r3, r3
 800848e:	b2db      	uxtb	r3, r3
 8008490:	4618      	mov	r0, r3
 8008492:	f7fb ff7b 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_set_ddram_address(0x01);
 8008496:	2001      	movs	r0, #1
 8008498:	f7fb ff67 	bl	800436a <wh0802_set_ddram_address>
 800849c:	e04b      	b.n	8008536 <TimeTask+0x176>
						}
						else
						{
							if(Time.Hours==0x20)
 800849e:	4b44      	ldr	r3, [pc, #272]	; (80085b0 <TimeTask+0x1f0>)
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	2b20      	cmp	r3, #32
 80084a4:	d121      	bne.n	80084ea <TimeTask+0x12a>
							{
								Time.Hours=0x19;
 80084a6:	4b42      	ldr	r3, [pc, #264]	; (80085b0 <TimeTask+0x1f0>)
 80084a8:	2219      	movs	r2, #25
 80084aa:	701a      	strb	r2, [r3, #0]
								wh0802_set_ddram_address(0x00);
 80084ac:	2000      	movs	r0, #0
 80084ae:	f7fb ff5c 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Hours>>4)&0x0F) );
 80084b2:	4b3f      	ldr	r3, [pc, #252]	; (80085b0 <TimeTask+0x1f0>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	091b      	lsrs	r3, r3, #4
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	b25b      	sxtb	r3, r3
 80084bc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80084c0:	b25b      	sxtb	r3, r3
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fb ff61 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Hours&0x0F) );
 80084ca:	4b39      	ldr	r3, [pc, #228]	; (80085b0 <TimeTask+0x1f0>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	b25b      	sxtb	r3, r3
 80084d0:	f003 030f 	and.w	r3, r3, #15
 80084d4:	b25b      	sxtb	r3, r3
 80084d6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80084da:	b25b      	sxtb	r3, r3
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fb ff54 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x01);
 80084e4:	2001      	movs	r0, #1
 80084e6:	f7fb ff40 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Hours==0x10)
 80084ea:	4b31      	ldr	r3, [pc, #196]	; (80085b0 <TimeTask+0x1f0>)
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b10      	cmp	r3, #16
 80084f0:	d121      	bne.n	8008536 <TimeTask+0x176>
							{
								Time.Hours=0x09;
 80084f2:	4b2f      	ldr	r3, [pc, #188]	; (80085b0 <TimeTask+0x1f0>)
 80084f4:	2209      	movs	r2, #9
 80084f6:	701a      	strb	r2, [r3, #0]
								wh0802_set_ddram_address(0x00);
 80084f8:	2000      	movs	r0, #0
 80084fa:	f7fb ff36 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Hours>>4)&0x0F) );
 80084fe:	4b2c      	ldr	r3, [pc, #176]	; (80085b0 <TimeTask+0x1f0>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	091b      	lsrs	r3, r3, #4
 8008504:	b2db      	uxtb	r3, r3
 8008506:	b25b      	sxtb	r3, r3
 8008508:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800850c:	b25b      	sxtb	r3, r3
 800850e:	b2db      	uxtb	r3, r3
 8008510:	4618      	mov	r0, r3
 8008512:	f7fb ff3b 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Hours&0x0F) );
 8008516:	4b26      	ldr	r3, [pc, #152]	; (80085b0 <TimeTask+0x1f0>)
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	b25b      	sxtb	r3, r3
 800851c:	f003 030f 	and.w	r3, r3, #15
 8008520:	b25b      	sxtb	r3, r3
 8008522:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008526:	b25b      	sxtb	r3, r3
 8008528:	b2db      	uxtb	r3, r3
 800852a:	4618      	mov	r0, r3
 800852c:	f7fb ff2e 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x01);
 8008530:	2001      	movs	r0, #1
 8008532:	f7fb ff1a 	bl	800436a <wh0802_set_ddram_address>
							}
						}
					}
				}
				if(ddram==0x04)
 8008536:	4b22      	ldr	r3, [pc, #136]	; (80085c0 <TimeTask+0x200>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b04      	cmp	r3, #4
 800853c:	f040 8126 	bne.w	800878c <TimeTask+0x3cc>
				{
					if(Time.Minutes>0x00)
 8008540:	4b1b      	ldr	r3, [pc, #108]	; (80085b0 <TimeTask+0x1f0>)
 8008542:	785b      	ldrb	r3, [r3, #1]
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 8121 	beq.w	800878c <TimeTask+0x3cc>
					{
						if((Time.Minutes&0x0F)>0x00)
 800854a:	4b19      	ldr	r3, [pc, #100]	; (80085b0 <TimeTask+0x1f0>)
 800854c:	785b      	ldrb	r3, [r3, #1]
 800854e:	f003 030f 	and.w	r3, r3, #15
 8008552:	2b00      	cmp	r3, #0
 8008554:	dd36      	ble.n	80085c4 <TimeTask+0x204>
						{
							Time.Minutes--;
 8008556:	4b16      	ldr	r3, [pc, #88]	; (80085b0 <TimeTask+0x1f0>)
 8008558:	785b      	ldrb	r3, [r3, #1]
 800855a:	3b01      	subs	r3, #1
 800855c:	b2da      	uxtb	r2, r3
 800855e:	4b14      	ldr	r3, [pc, #80]	; (80085b0 <TimeTask+0x1f0>)
 8008560:	705a      	strb	r2, [r3, #1]
							wh0802_set_ddram_address(0x03);
 8008562:	2003      	movs	r0, #3
 8008564:	f7fb ff01 	bl	800436a <wh0802_set_ddram_address>
							wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 8008568:	4b11      	ldr	r3, [pc, #68]	; (80085b0 <TimeTask+0x1f0>)
 800856a:	785b      	ldrb	r3, [r3, #1]
 800856c:	091b      	lsrs	r3, r3, #4
 800856e:	b2db      	uxtb	r3, r3
 8008570:	b25b      	sxtb	r3, r3
 8008572:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008576:	b25b      	sxtb	r3, r3
 8008578:	b2db      	uxtb	r3, r3
 800857a:	4618      	mov	r0, r3
 800857c:	f7fb ff06 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 8008580:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <TimeTask+0x1f0>)
 8008582:	785b      	ldrb	r3, [r3, #1]
 8008584:	b25b      	sxtb	r3, r3
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	b25b      	sxtb	r3, r3
 800858c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008590:	b25b      	sxtb	r3, r3
 8008592:	b2db      	uxtb	r3, r3
 8008594:	4618      	mov	r0, r3
 8008596:	f7fb fef9 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_set_ddram_address(0x04);
 800859a:	2004      	movs	r0, #4
 800859c:	f7fb fee5 	bl	800436a <wh0802_set_ddram_address>
 80085a0:	e0f4      	b.n	800878c <TimeTask+0x3cc>
 80085a2:	bf00      	nop
 80085a4:	200029b0 	.word	0x200029b0
 80085a8:	200028b4 	.word	0x200028b4
 80085ac:	40010800 	.word	0x40010800
 80085b0:	20002c10 	.word	0x20002c10
 80085b4:	2000293c 	.word	0x2000293c
 80085b8:	200028b0 	.word	0x200028b0
 80085bc:	2000295c 	.word	0x2000295c
 80085c0:	20002860 	.word	0x20002860
						}
						else
						{
							if(Time.Minutes==0x10)
 80085c4:	4b8c      	ldr	r3, [pc, #560]	; (80087f8 <TimeTask+0x438>)
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	2b10      	cmp	r3, #16
 80085ca:	d121      	bne.n	8008610 <TimeTask+0x250>
							{
								Time.Minutes=0x09;
 80085cc:	4b8a      	ldr	r3, [pc, #552]	; (80087f8 <TimeTask+0x438>)
 80085ce:	2209      	movs	r2, #9
 80085d0:	705a      	strb	r2, [r3, #1]
								wh0802_set_ddram_address(0x03);
 80085d2:	2003      	movs	r0, #3
 80085d4:	f7fb fec9 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 80085d8:	4b87      	ldr	r3, [pc, #540]	; (80087f8 <TimeTask+0x438>)
 80085da:	785b      	ldrb	r3, [r3, #1]
 80085dc:	091b      	lsrs	r3, r3, #4
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	b25b      	sxtb	r3, r3
 80085e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80085e6:	b25b      	sxtb	r3, r3
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fb fece 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 80085f0:	4b81      	ldr	r3, [pc, #516]	; (80087f8 <TimeTask+0x438>)
 80085f2:	785b      	ldrb	r3, [r3, #1]
 80085f4:	b25b      	sxtb	r3, r3
 80085f6:	f003 030f 	and.w	r3, r3, #15
 80085fa:	b25b      	sxtb	r3, r3
 80085fc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008600:	b25b      	sxtb	r3, r3
 8008602:	b2db      	uxtb	r3, r3
 8008604:	4618      	mov	r0, r3
 8008606:	f7fb fec1 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x04);
 800860a:	2004      	movs	r0, #4
 800860c:	f7fb fead 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Minutes==0x20)
 8008610:	4b79      	ldr	r3, [pc, #484]	; (80087f8 <TimeTask+0x438>)
 8008612:	785b      	ldrb	r3, [r3, #1]
 8008614:	2b20      	cmp	r3, #32
 8008616:	d121      	bne.n	800865c <TimeTask+0x29c>
							{
								Time.Minutes=0x19;
 8008618:	4b77      	ldr	r3, [pc, #476]	; (80087f8 <TimeTask+0x438>)
 800861a:	2219      	movs	r2, #25
 800861c:	705a      	strb	r2, [r3, #1]
								wh0802_set_ddram_address(0x03);
 800861e:	2003      	movs	r0, #3
 8008620:	f7fb fea3 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 8008624:	4b74      	ldr	r3, [pc, #464]	; (80087f8 <TimeTask+0x438>)
 8008626:	785b      	ldrb	r3, [r3, #1]
 8008628:	091b      	lsrs	r3, r3, #4
 800862a:	b2db      	uxtb	r3, r3
 800862c:	b25b      	sxtb	r3, r3
 800862e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008632:	b25b      	sxtb	r3, r3
 8008634:	b2db      	uxtb	r3, r3
 8008636:	4618      	mov	r0, r3
 8008638:	f7fb fea8 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 800863c:	4b6e      	ldr	r3, [pc, #440]	; (80087f8 <TimeTask+0x438>)
 800863e:	785b      	ldrb	r3, [r3, #1]
 8008640:	b25b      	sxtb	r3, r3
 8008642:	f003 030f 	and.w	r3, r3, #15
 8008646:	b25b      	sxtb	r3, r3
 8008648:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800864c:	b25b      	sxtb	r3, r3
 800864e:	b2db      	uxtb	r3, r3
 8008650:	4618      	mov	r0, r3
 8008652:	f7fb fe9b 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x04);
 8008656:	2004      	movs	r0, #4
 8008658:	f7fb fe87 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Minutes==0x30)
 800865c:	4b66      	ldr	r3, [pc, #408]	; (80087f8 <TimeTask+0x438>)
 800865e:	785b      	ldrb	r3, [r3, #1]
 8008660:	2b30      	cmp	r3, #48	; 0x30
 8008662:	d121      	bne.n	80086a8 <TimeTask+0x2e8>
							{
								Time.Minutes=0x29;
 8008664:	4b64      	ldr	r3, [pc, #400]	; (80087f8 <TimeTask+0x438>)
 8008666:	2229      	movs	r2, #41	; 0x29
 8008668:	705a      	strb	r2, [r3, #1]
								wh0802_set_ddram_address(0x03);
 800866a:	2003      	movs	r0, #3
 800866c:	f7fb fe7d 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 8008670:	4b61      	ldr	r3, [pc, #388]	; (80087f8 <TimeTask+0x438>)
 8008672:	785b      	ldrb	r3, [r3, #1]
 8008674:	091b      	lsrs	r3, r3, #4
 8008676:	b2db      	uxtb	r3, r3
 8008678:	b25b      	sxtb	r3, r3
 800867a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800867e:	b25b      	sxtb	r3, r3
 8008680:	b2db      	uxtb	r3, r3
 8008682:	4618      	mov	r0, r3
 8008684:	f7fb fe82 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 8008688:	4b5b      	ldr	r3, [pc, #364]	; (80087f8 <TimeTask+0x438>)
 800868a:	785b      	ldrb	r3, [r3, #1]
 800868c:	b25b      	sxtb	r3, r3
 800868e:	f003 030f 	and.w	r3, r3, #15
 8008692:	b25b      	sxtb	r3, r3
 8008694:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008698:	b25b      	sxtb	r3, r3
 800869a:	b2db      	uxtb	r3, r3
 800869c:	4618      	mov	r0, r3
 800869e:	f7fb fe75 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x04);
 80086a2:	2004      	movs	r0, #4
 80086a4:	f7fb fe61 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Minutes==0x40)
 80086a8:	4b53      	ldr	r3, [pc, #332]	; (80087f8 <TimeTask+0x438>)
 80086aa:	785b      	ldrb	r3, [r3, #1]
 80086ac:	2b40      	cmp	r3, #64	; 0x40
 80086ae:	d121      	bne.n	80086f4 <TimeTask+0x334>
							{
								Time.Minutes=0x39;
 80086b0:	4b51      	ldr	r3, [pc, #324]	; (80087f8 <TimeTask+0x438>)
 80086b2:	2239      	movs	r2, #57	; 0x39
 80086b4:	705a      	strb	r2, [r3, #1]
								wh0802_set_ddram_address(0x03);
 80086b6:	2003      	movs	r0, #3
 80086b8:	f7fb fe57 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 80086bc:	4b4e      	ldr	r3, [pc, #312]	; (80087f8 <TimeTask+0x438>)
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	091b      	lsrs	r3, r3, #4
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	b25b      	sxtb	r3, r3
 80086c6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80086ca:	b25b      	sxtb	r3, r3
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fb fe5c 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 80086d4:	4b48      	ldr	r3, [pc, #288]	; (80087f8 <TimeTask+0x438>)
 80086d6:	785b      	ldrb	r3, [r3, #1]
 80086d8:	b25b      	sxtb	r3, r3
 80086da:	f003 030f 	and.w	r3, r3, #15
 80086de:	b25b      	sxtb	r3, r3
 80086e0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80086e4:	b25b      	sxtb	r3, r3
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fb fe4f 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x04);
 80086ee:	2004      	movs	r0, #4
 80086f0:	f7fb fe3b 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Minutes==0x50)
 80086f4:	4b40      	ldr	r3, [pc, #256]	; (80087f8 <TimeTask+0x438>)
 80086f6:	785b      	ldrb	r3, [r3, #1]
 80086f8:	2b50      	cmp	r3, #80	; 0x50
 80086fa:	d121      	bne.n	8008740 <TimeTask+0x380>
							{
								Time.Minutes=0x49;
 80086fc:	4b3e      	ldr	r3, [pc, #248]	; (80087f8 <TimeTask+0x438>)
 80086fe:	2249      	movs	r2, #73	; 0x49
 8008700:	705a      	strb	r2, [r3, #1]
								wh0802_set_ddram_address(0x03);
 8008702:	2003      	movs	r0, #3
 8008704:	f7fb fe31 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 8008708:	4b3b      	ldr	r3, [pc, #236]	; (80087f8 <TimeTask+0x438>)
 800870a:	785b      	ldrb	r3, [r3, #1]
 800870c:	091b      	lsrs	r3, r3, #4
 800870e:	b2db      	uxtb	r3, r3
 8008710:	b25b      	sxtb	r3, r3
 8008712:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008716:	b25b      	sxtb	r3, r3
 8008718:	b2db      	uxtb	r3, r3
 800871a:	4618      	mov	r0, r3
 800871c:	f7fb fe36 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 8008720:	4b35      	ldr	r3, [pc, #212]	; (80087f8 <TimeTask+0x438>)
 8008722:	785b      	ldrb	r3, [r3, #1]
 8008724:	b25b      	sxtb	r3, r3
 8008726:	f003 030f 	and.w	r3, r3, #15
 800872a:	b25b      	sxtb	r3, r3
 800872c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008730:	b25b      	sxtb	r3, r3
 8008732:	b2db      	uxtb	r3, r3
 8008734:	4618      	mov	r0, r3
 8008736:	f7fb fe29 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x04);
 800873a:	2004      	movs	r0, #4
 800873c:	f7fb fe15 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Minutes==0x60)
 8008740:	4b2d      	ldr	r3, [pc, #180]	; (80087f8 <TimeTask+0x438>)
 8008742:	785b      	ldrb	r3, [r3, #1]
 8008744:	2b60      	cmp	r3, #96	; 0x60
 8008746:	d121      	bne.n	800878c <TimeTask+0x3cc>
							{
								Time.Minutes=0x59;
 8008748:	4b2b      	ldr	r3, [pc, #172]	; (80087f8 <TimeTask+0x438>)
 800874a:	2259      	movs	r2, #89	; 0x59
 800874c:	705a      	strb	r2, [r3, #1]
								wh0802_set_ddram_address(0x03);
 800874e:	2003      	movs	r0, #3
 8008750:	f7fb fe0b 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 8008754:	4b28      	ldr	r3, [pc, #160]	; (80087f8 <TimeTask+0x438>)
 8008756:	785b      	ldrb	r3, [r3, #1]
 8008758:	091b      	lsrs	r3, r3, #4
 800875a:	b2db      	uxtb	r3, r3
 800875c:	b25b      	sxtb	r3, r3
 800875e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008762:	b25b      	sxtb	r3, r3
 8008764:	b2db      	uxtb	r3, r3
 8008766:	4618      	mov	r0, r3
 8008768:	f7fb fe10 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 800876c:	4b22      	ldr	r3, [pc, #136]	; (80087f8 <TimeTask+0x438>)
 800876e:	785b      	ldrb	r3, [r3, #1]
 8008770:	b25b      	sxtb	r3, r3
 8008772:	f003 030f 	and.w	r3, r3, #15
 8008776:	b25b      	sxtb	r3, r3
 8008778:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800877c:	b25b      	sxtb	r3, r3
 800877e:	b2db      	uxtb	r3, r3
 8008780:	4618      	mov	r0, r3
 8008782:	f7fb fe03 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x04);
 8008786:	2004      	movs	r0, #4
 8008788:	f7fb fdef 	bl	800436a <wh0802_set_ddram_address>
							}
						}
					}
				}
				if(ddram==0x07)
 800878c:	4b1b      	ldr	r3, [pc, #108]	; (80087fc <TimeTask+0x43c>)
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b07      	cmp	r3, #7
 8008792:	f040 8119 	bne.w	80089c8 <TimeTask+0x608>
				{
					if(Time.Seconds>0x00)
 8008796:	4b18      	ldr	r3, [pc, #96]	; (80087f8 <TimeTask+0x438>)
 8008798:	789b      	ldrb	r3, [r3, #2]
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 8114 	beq.w	80089c8 <TimeTask+0x608>
					{
						if((Time.Seconds&0x0F)>0x00)
 80087a0:	4b15      	ldr	r3, [pc, #84]	; (80087f8 <TimeTask+0x438>)
 80087a2:	789b      	ldrb	r3, [r3, #2]
 80087a4:	f003 030f 	and.w	r3, r3, #15
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dd29      	ble.n	8008800 <TimeTask+0x440>
						{
							Time.Seconds--;
 80087ac:	4b12      	ldr	r3, [pc, #72]	; (80087f8 <TimeTask+0x438>)
 80087ae:	789b      	ldrb	r3, [r3, #2]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	4b10      	ldr	r3, [pc, #64]	; (80087f8 <TimeTask+0x438>)
 80087b6:	709a      	strb	r2, [r3, #2]
							wh0802_set_ddram_address(0x06);
 80087b8:	2006      	movs	r0, #6
 80087ba:	f7fb fdd6 	bl	800436a <wh0802_set_ddram_address>
							wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 80087be:	4b0e      	ldr	r3, [pc, #56]	; (80087f8 <TimeTask+0x438>)
 80087c0:	789b      	ldrb	r3, [r3, #2]
 80087c2:	091b      	lsrs	r3, r3, #4
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	b25b      	sxtb	r3, r3
 80087c8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80087cc:	b25b      	sxtb	r3, r3
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fb fddb 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 80087d6:	4b08      	ldr	r3, [pc, #32]	; (80087f8 <TimeTask+0x438>)
 80087d8:	789b      	ldrb	r3, [r3, #2]
 80087da:	b25b      	sxtb	r3, r3
 80087dc:	f003 030f 	and.w	r3, r3, #15
 80087e0:	b25b      	sxtb	r3, r3
 80087e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80087e6:	b25b      	sxtb	r3, r3
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fb fdce 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_set_ddram_address(0x07);
 80087f0:	2007      	movs	r0, #7
 80087f2:	f7fb fdba 	bl	800436a <wh0802_set_ddram_address>
 80087f6:	e0e7      	b.n	80089c8 <TimeTask+0x608>
 80087f8:	20002c10 	.word	0x20002c10
 80087fc:	20002860 	.word	0x20002860
						}
						else
						{
							if(Time.Seconds==0x10)
 8008800:	4b98      	ldr	r3, [pc, #608]	; (8008a64 <TimeTask+0x6a4>)
 8008802:	789b      	ldrb	r3, [r3, #2]
 8008804:	2b10      	cmp	r3, #16
 8008806:	d121      	bne.n	800884c <TimeTask+0x48c>
							{
								Time.Seconds=0x09;
 8008808:	4b96      	ldr	r3, [pc, #600]	; (8008a64 <TimeTask+0x6a4>)
 800880a:	2209      	movs	r2, #9
 800880c:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x06);
 800880e:	2006      	movs	r0, #6
 8008810:	f7fb fdab 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 8008814:	4b93      	ldr	r3, [pc, #588]	; (8008a64 <TimeTask+0x6a4>)
 8008816:	789b      	ldrb	r3, [r3, #2]
 8008818:	091b      	lsrs	r3, r3, #4
 800881a:	b2db      	uxtb	r3, r3
 800881c:	b25b      	sxtb	r3, r3
 800881e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008822:	b25b      	sxtb	r3, r3
 8008824:	b2db      	uxtb	r3, r3
 8008826:	4618      	mov	r0, r3
 8008828:	f7fb fdb0 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 800882c:	4b8d      	ldr	r3, [pc, #564]	; (8008a64 <TimeTask+0x6a4>)
 800882e:	789b      	ldrb	r3, [r3, #2]
 8008830:	b25b      	sxtb	r3, r3
 8008832:	f003 030f 	and.w	r3, r3, #15
 8008836:	b25b      	sxtb	r3, r3
 8008838:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800883c:	b25b      	sxtb	r3, r3
 800883e:	b2db      	uxtb	r3, r3
 8008840:	4618      	mov	r0, r3
 8008842:	f7fb fda3 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 8008846:	2007      	movs	r0, #7
 8008848:	f7fb fd8f 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Seconds==0x20)
 800884c:	4b85      	ldr	r3, [pc, #532]	; (8008a64 <TimeTask+0x6a4>)
 800884e:	789b      	ldrb	r3, [r3, #2]
 8008850:	2b20      	cmp	r3, #32
 8008852:	d121      	bne.n	8008898 <TimeTask+0x4d8>
							{
								Time.Seconds=0x19;
 8008854:	4b83      	ldr	r3, [pc, #524]	; (8008a64 <TimeTask+0x6a4>)
 8008856:	2219      	movs	r2, #25
 8008858:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x06);
 800885a:	2006      	movs	r0, #6
 800885c:	f7fb fd85 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 8008860:	4b80      	ldr	r3, [pc, #512]	; (8008a64 <TimeTask+0x6a4>)
 8008862:	789b      	ldrb	r3, [r3, #2]
 8008864:	091b      	lsrs	r3, r3, #4
 8008866:	b2db      	uxtb	r3, r3
 8008868:	b25b      	sxtb	r3, r3
 800886a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800886e:	b25b      	sxtb	r3, r3
 8008870:	b2db      	uxtb	r3, r3
 8008872:	4618      	mov	r0, r3
 8008874:	f7fb fd8a 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 8008878:	4b7a      	ldr	r3, [pc, #488]	; (8008a64 <TimeTask+0x6a4>)
 800887a:	789b      	ldrb	r3, [r3, #2]
 800887c:	b25b      	sxtb	r3, r3
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	b25b      	sxtb	r3, r3
 8008884:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008888:	b25b      	sxtb	r3, r3
 800888a:	b2db      	uxtb	r3, r3
 800888c:	4618      	mov	r0, r3
 800888e:	f7fb fd7d 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 8008892:	2007      	movs	r0, #7
 8008894:	f7fb fd69 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Seconds==0x30)
 8008898:	4b72      	ldr	r3, [pc, #456]	; (8008a64 <TimeTask+0x6a4>)
 800889a:	789b      	ldrb	r3, [r3, #2]
 800889c:	2b30      	cmp	r3, #48	; 0x30
 800889e:	d121      	bne.n	80088e4 <TimeTask+0x524>
							{
								Time.Seconds=0x29;
 80088a0:	4b70      	ldr	r3, [pc, #448]	; (8008a64 <TimeTask+0x6a4>)
 80088a2:	2229      	movs	r2, #41	; 0x29
 80088a4:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x06);
 80088a6:	2006      	movs	r0, #6
 80088a8:	f7fb fd5f 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 80088ac:	4b6d      	ldr	r3, [pc, #436]	; (8008a64 <TimeTask+0x6a4>)
 80088ae:	789b      	ldrb	r3, [r3, #2]
 80088b0:	091b      	lsrs	r3, r3, #4
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	b25b      	sxtb	r3, r3
 80088b6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80088ba:	b25b      	sxtb	r3, r3
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fb fd64 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 80088c4:	4b67      	ldr	r3, [pc, #412]	; (8008a64 <TimeTask+0x6a4>)
 80088c6:	789b      	ldrb	r3, [r3, #2]
 80088c8:	b25b      	sxtb	r3, r3
 80088ca:	f003 030f 	and.w	r3, r3, #15
 80088ce:	b25b      	sxtb	r3, r3
 80088d0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80088d4:	b25b      	sxtb	r3, r3
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fb fd57 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 80088de:	2007      	movs	r0, #7
 80088e0:	f7fb fd43 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Seconds==0x40)
 80088e4:	4b5f      	ldr	r3, [pc, #380]	; (8008a64 <TimeTask+0x6a4>)
 80088e6:	789b      	ldrb	r3, [r3, #2]
 80088e8:	2b40      	cmp	r3, #64	; 0x40
 80088ea:	d121      	bne.n	8008930 <TimeTask+0x570>
							{
								Time.Seconds=0x39;
 80088ec:	4b5d      	ldr	r3, [pc, #372]	; (8008a64 <TimeTask+0x6a4>)
 80088ee:	2239      	movs	r2, #57	; 0x39
 80088f0:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x06);
 80088f2:	2006      	movs	r0, #6
 80088f4:	f7fb fd39 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 80088f8:	4b5a      	ldr	r3, [pc, #360]	; (8008a64 <TimeTask+0x6a4>)
 80088fa:	789b      	ldrb	r3, [r3, #2]
 80088fc:	091b      	lsrs	r3, r3, #4
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	b25b      	sxtb	r3, r3
 8008902:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008906:	b25b      	sxtb	r3, r3
 8008908:	b2db      	uxtb	r3, r3
 800890a:	4618      	mov	r0, r3
 800890c:	f7fb fd3e 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 8008910:	4b54      	ldr	r3, [pc, #336]	; (8008a64 <TimeTask+0x6a4>)
 8008912:	789b      	ldrb	r3, [r3, #2]
 8008914:	b25b      	sxtb	r3, r3
 8008916:	f003 030f 	and.w	r3, r3, #15
 800891a:	b25b      	sxtb	r3, r3
 800891c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008920:	b25b      	sxtb	r3, r3
 8008922:	b2db      	uxtb	r3, r3
 8008924:	4618      	mov	r0, r3
 8008926:	f7fb fd31 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 800892a:	2007      	movs	r0, #7
 800892c:	f7fb fd1d 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Seconds==0x50)
 8008930:	4b4c      	ldr	r3, [pc, #304]	; (8008a64 <TimeTask+0x6a4>)
 8008932:	789b      	ldrb	r3, [r3, #2]
 8008934:	2b50      	cmp	r3, #80	; 0x50
 8008936:	d121      	bne.n	800897c <TimeTask+0x5bc>
							{
								Time.Seconds=0x49;
 8008938:	4b4a      	ldr	r3, [pc, #296]	; (8008a64 <TimeTask+0x6a4>)
 800893a:	2249      	movs	r2, #73	; 0x49
 800893c:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x06);
 800893e:	2006      	movs	r0, #6
 8008940:	f7fb fd13 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 8008944:	4b47      	ldr	r3, [pc, #284]	; (8008a64 <TimeTask+0x6a4>)
 8008946:	789b      	ldrb	r3, [r3, #2]
 8008948:	091b      	lsrs	r3, r3, #4
 800894a:	b2db      	uxtb	r3, r3
 800894c:	b25b      	sxtb	r3, r3
 800894e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008952:	b25b      	sxtb	r3, r3
 8008954:	b2db      	uxtb	r3, r3
 8008956:	4618      	mov	r0, r3
 8008958:	f7fb fd18 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 800895c:	4b41      	ldr	r3, [pc, #260]	; (8008a64 <TimeTask+0x6a4>)
 800895e:	789b      	ldrb	r3, [r3, #2]
 8008960:	b25b      	sxtb	r3, r3
 8008962:	f003 030f 	and.w	r3, r3, #15
 8008966:	b25b      	sxtb	r3, r3
 8008968:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800896c:	b25b      	sxtb	r3, r3
 800896e:	b2db      	uxtb	r3, r3
 8008970:	4618      	mov	r0, r3
 8008972:	f7fb fd0b 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 8008976:	2007      	movs	r0, #7
 8008978:	f7fb fcf7 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Seconds==0x60)
 800897c:	4b39      	ldr	r3, [pc, #228]	; (8008a64 <TimeTask+0x6a4>)
 800897e:	789b      	ldrb	r3, [r3, #2]
 8008980:	2b60      	cmp	r3, #96	; 0x60
 8008982:	d121      	bne.n	80089c8 <TimeTask+0x608>
							{
								Time.Seconds=0x59;
 8008984:	4b37      	ldr	r3, [pc, #220]	; (8008a64 <TimeTask+0x6a4>)
 8008986:	2259      	movs	r2, #89	; 0x59
 8008988:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x06);
 800898a:	2006      	movs	r0, #6
 800898c:	f7fb fced 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 8008990:	4b34      	ldr	r3, [pc, #208]	; (8008a64 <TimeTask+0x6a4>)
 8008992:	789b      	ldrb	r3, [r3, #2]
 8008994:	091b      	lsrs	r3, r3, #4
 8008996:	b2db      	uxtb	r3, r3
 8008998:	b25b      	sxtb	r3, r3
 800899a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800899e:	b25b      	sxtb	r3, r3
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fb fcf2 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 80089a8:	4b2e      	ldr	r3, [pc, #184]	; (8008a64 <TimeTask+0x6a4>)
 80089aa:	789b      	ldrb	r3, [r3, #2]
 80089ac:	b25b      	sxtb	r3, r3
 80089ae:	f003 030f 	and.w	r3, r3, #15
 80089b2:	b25b      	sxtb	r3, r3
 80089b4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80089b8:	b25b      	sxtb	r3, r3
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fb fce5 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 80089c2:	2007      	movs	r0, #7
 80089c4:	f7fb fcd1 	bl	800436a <wh0802_set_ddram_address>
							}
						}
					}
				}
			}
			if(event1.value.v==BUTTON4_PRESSED)
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	2b04      	cmp	r3, #4
 80089cc:	d112      	bne.n	80089f4 <TimeTask+0x634>
			{
				if((ddram==0x04||ddram==0x07))
 80089ce:	4b26      	ldr	r3, [pc, #152]	; (8008a68 <TimeTask+0x6a8>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	2b04      	cmp	r3, #4
 80089d4:	d003      	beq.n	80089de <TimeTask+0x61e>
 80089d6:	4b24      	ldr	r3, [pc, #144]	; (8008a68 <TimeTask+0x6a8>)
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b07      	cmp	r3, #7
 80089dc:	d105      	bne.n	80089ea <TimeTask+0x62a>
				{
					ddram=ddram-0x03;
 80089de:	4b22      	ldr	r3, [pc, #136]	; (8008a68 <TimeTask+0x6a8>)
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	3b03      	subs	r3, #3
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	4b20      	ldr	r3, [pc, #128]	; (8008a68 <TimeTask+0x6a8>)
 80089e8:	701a      	strb	r2, [r3, #0]
				}
				wh0802_set_ddram_address(ddram);
 80089ea:	4b1f      	ldr	r3, [pc, #124]	; (8008a68 <TimeTask+0x6a8>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fb fcbb 	bl	800436a <wh0802_set_ddram_address>
			}
			if(event1.value.v==BUTTON5_PRESSED)
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2b05      	cmp	r3, #5
 80089f8:	f040 8274 	bne.w	8008ee4 <TimeTask+0xb24>
			{
				if(ddram==0x01)
 80089fc:	4b1a      	ldr	r3, [pc, #104]	; (8008a68 <TimeTask+0x6a8>)
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d17f      	bne.n	8008b04 <TimeTask+0x744>
				{
					if(Time.Hours<0x23)
 8008a04:	4b17      	ldr	r3, [pc, #92]	; (8008a64 <TimeTask+0x6a4>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b22      	cmp	r3, #34	; 0x22
 8008a0a:	d87b      	bhi.n	8008b04 <TimeTask+0x744>
					{
						if((Time.Hours&0x0F)<0x09)
 8008a0c:	4b15      	ldr	r3, [pc, #84]	; (8008a64 <TimeTask+0x6a4>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	f003 030f 	and.w	r3, r3, #15
 8008a14:	2b08      	cmp	r3, #8
 8008a16:	dc29      	bgt.n	8008a6c <TimeTask+0x6ac>
						{
							Time.Hours++;
 8008a18:	4b12      	ldr	r3, [pc, #72]	; (8008a64 <TimeTask+0x6a4>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	4b10      	ldr	r3, [pc, #64]	; (8008a64 <TimeTask+0x6a4>)
 8008a22:	701a      	strb	r2, [r3, #0]
							wh0802_set_ddram_address(0x00);
 8008a24:	2000      	movs	r0, #0
 8008a26:	f7fb fca0 	bl	800436a <wh0802_set_ddram_address>
							wh0802_write_data_to_ram( 0x30| ((Time.Hours>>4)&0x0F) );
 8008a2a:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <TimeTask+0x6a4>)
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	091b      	lsrs	r3, r3, #4
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	b25b      	sxtb	r3, r3
 8008a34:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008a38:	b25b      	sxtb	r3, r3
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fb fca5 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_write_data_to_ram( 0x30| (Time.Hours&0x0F) );
 8008a42:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <TimeTask+0x6a4>)
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	b25b      	sxtb	r3, r3
 8008a48:	f003 030f 	and.w	r3, r3, #15
 8008a4c:	b25b      	sxtb	r3, r3
 8008a4e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008a52:	b25b      	sxtb	r3, r3
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fb fc98 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_set_ddram_address(0x01);
 8008a5c:	2001      	movs	r0, #1
 8008a5e:	f7fb fc84 	bl	800436a <wh0802_set_ddram_address>
 8008a62:	e04f      	b.n	8008b04 <TimeTask+0x744>
 8008a64:	20002c10 	.word	0x20002c10
 8008a68:	20002860 	.word	0x20002860
						}
						else
						{
							if(Time.Hours==0x09)
 8008a6c:	4b40      	ldr	r3, [pc, #256]	; (8008b70 <TimeTask+0x7b0>)
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	2b09      	cmp	r3, #9
 8008a72:	d121      	bne.n	8008ab8 <TimeTask+0x6f8>
							{
								Time.Hours=0x10;
 8008a74:	4b3e      	ldr	r3, [pc, #248]	; (8008b70 <TimeTask+0x7b0>)
 8008a76:	2210      	movs	r2, #16
 8008a78:	701a      	strb	r2, [r3, #0]
								wh0802_set_ddram_address(0x00);
 8008a7a:	2000      	movs	r0, #0
 8008a7c:	f7fb fc75 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Hours>>4)&0x0F) );
 8008a80:	4b3b      	ldr	r3, [pc, #236]	; (8008b70 <TimeTask+0x7b0>)
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	091b      	lsrs	r3, r3, #4
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	b25b      	sxtb	r3, r3
 8008a8a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008a8e:	b25b      	sxtb	r3, r3
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fb fc7a 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Hours&0x0F) );
 8008a98:	4b35      	ldr	r3, [pc, #212]	; (8008b70 <TimeTask+0x7b0>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	b25b      	sxtb	r3, r3
 8008a9e:	f003 030f 	and.w	r3, r3, #15
 8008aa2:	b25b      	sxtb	r3, r3
 8008aa4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008aa8:	b25b      	sxtb	r3, r3
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fb fc6d 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x01);
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	f7fb fc59 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Hours==0x19)
 8008ab8:	4b2d      	ldr	r3, [pc, #180]	; (8008b70 <TimeTask+0x7b0>)
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	2b19      	cmp	r3, #25
 8008abe:	d121      	bne.n	8008b04 <TimeTask+0x744>
							{
								Time.Hours=0x20;
 8008ac0:	4b2b      	ldr	r3, [pc, #172]	; (8008b70 <TimeTask+0x7b0>)
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	701a      	strb	r2, [r3, #0]
								wh0802_set_ddram_address(0x00);
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	f7fb fc4f 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Hours>>4)&0x0F) );
 8008acc:	4b28      	ldr	r3, [pc, #160]	; (8008b70 <TimeTask+0x7b0>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	091b      	lsrs	r3, r3, #4
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	b25b      	sxtb	r3, r3
 8008ad6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008ada:	b25b      	sxtb	r3, r3
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7fb fc54 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Hours&0x0F) );
 8008ae4:	4b22      	ldr	r3, [pc, #136]	; (8008b70 <TimeTask+0x7b0>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	b25b      	sxtb	r3, r3
 8008aea:	f003 030f 	and.w	r3, r3, #15
 8008aee:	b25b      	sxtb	r3, r3
 8008af0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008af4:	b25b      	sxtb	r3, r3
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	4618      	mov	r0, r3
 8008afa:	f7fb fc47 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x01);
 8008afe:	2001      	movs	r0, #1
 8008b00:	f7fb fc33 	bl	800436a <wh0802_set_ddram_address>
							}
						}
					}
				}
				if(ddram==0x04)
 8008b04:	4b1b      	ldr	r3, [pc, #108]	; (8008b74 <TimeTask+0x7b4>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	f040 80f3 	bne.w	8008cf4 <TimeTask+0x934>
				{
					if(Time.Minutes<0x59)
 8008b0e:	4b18      	ldr	r3, [pc, #96]	; (8008b70 <TimeTask+0x7b0>)
 8008b10:	785b      	ldrb	r3, [r3, #1]
 8008b12:	2b58      	cmp	r3, #88	; 0x58
 8008b14:	f200 80ee 	bhi.w	8008cf4 <TimeTask+0x934>
					{
						if((Time.Minutes&0x0F)<0x09)
 8008b18:	4b15      	ldr	r3, [pc, #84]	; (8008b70 <TimeTask+0x7b0>)
 8008b1a:	785b      	ldrb	r3, [r3, #1]
 8008b1c:	f003 030f 	and.w	r3, r3, #15
 8008b20:	2b08      	cmp	r3, #8
 8008b22:	dc29      	bgt.n	8008b78 <TimeTask+0x7b8>
						{
							Time.Minutes++;
 8008b24:	4b12      	ldr	r3, [pc, #72]	; (8008b70 <TimeTask+0x7b0>)
 8008b26:	785b      	ldrb	r3, [r3, #1]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	4b10      	ldr	r3, [pc, #64]	; (8008b70 <TimeTask+0x7b0>)
 8008b2e:	705a      	strb	r2, [r3, #1]
							wh0802_set_ddram_address(0x03);
 8008b30:	2003      	movs	r0, #3
 8008b32:	f7fb fc1a 	bl	800436a <wh0802_set_ddram_address>
							wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 8008b36:	4b0e      	ldr	r3, [pc, #56]	; (8008b70 <TimeTask+0x7b0>)
 8008b38:	785b      	ldrb	r3, [r3, #1]
 8008b3a:	091b      	lsrs	r3, r3, #4
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	b25b      	sxtb	r3, r3
 8008b40:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008b44:	b25b      	sxtb	r3, r3
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fb fc1f 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 8008b4e:	4b08      	ldr	r3, [pc, #32]	; (8008b70 <TimeTask+0x7b0>)
 8008b50:	785b      	ldrb	r3, [r3, #1]
 8008b52:	b25b      	sxtb	r3, r3
 8008b54:	f003 030f 	and.w	r3, r3, #15
 8008b58:	b25b      	sxtb	r3, r3
 8008b5a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008b5e:	b25b      	sxtb	r3, r3
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fb fc12 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_set_ddram_address(0x04);
 8008b68:	2004      	movs	r0, #4
 8008b6a:	f7fb fbfe 	bl	800436a <wh0802_set_ddram_address>
 8008b6e:	e0c1      	b.n	8008cf4 <TimeTask+0x934>
 8008b70:	20002c10 	.word	0x20002c10
 8008b74:	20002860 	.word	0x20002860
						}
						else
						{
							if(Time.Minutes==0x09)
 8008b78:	4b79      	ldr	r3, [pc, #484]	; (8008d60 <TimeTask+0x9a0>)
 8008b7a:	785b      	ldrb	r3, [r3, #1]
 8008b7c:	2b09      	cmp	r3, #9
 8008b7e:	d121      	bne.n	8008bc4 <TimeTask+0x804>
							{
								Time.Minutes=0x10;
 8008b80:	4b77      	ldr	r3, [pc, #476]	; (8008d60 <TimeTask+0x9a0>)
 8008b82:	2210      	movs	r2, #16
 8008b84:	705a      	strb	r2, [r3, #1]
								wh0802_set_ddram_address(0x03);
 8008b86:	2003      	movs	r0, #3
 8008b88:	f7fb fbef 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 8008b8c:	4b74      	ldr	r3, [pc, #464]	; (8008d60 <TimeTask+0x9a0>)
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	091b      	lsrs	r3, r3, #4
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	b25b      	sxtb	r3, r3
 8008b96:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008b9a:	b25b      	sxtb	r3, r3
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fb fbf4 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 8008ba4:	4b6e      	ldr	r3, [pc, #440]	; (8008d60 <TimeTask+0x9a0>)
 8008ba6:	785b      	ldrb	r3, [r3, #1]
 8008ba8:	b25b      	sxtb	r3, r3
 8008baa:	f003 030f 	and.w	r3, r3, #15
 8008bae:	b25b      	sxtb	r3, r3
 8008bb0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008bb4:	b25b      	sxtb	r3, r3
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fb fbe7 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x04);
 8008bbe:	2004      	movs	r0, #4
 8008bc0:	f7fb fbd3 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Minutes==0x19)
 8008bc4:	4b66      	ldr	r3, [pc, #408]	; (8008d60 <TimeTask+0x9a0>)
 8008bc6:	785b      	ldrb	r3, [r3, #1]
 8008bc8:	2b19      	cmp	r3, #25
 8008bca:	d121      	bne.n	8008c10 <TimeTask+0x850>
							{
								Time.Minutes=0x20;
 8008bcc:	4b64      	ldr	r3, [pc, #400]	; (8008d60 <TimeTask+0x9a0>)
 8008bce:	2220      	movs	r2, #32
 8008bd0:	705a      	strb	r2, [r3, #1]
								wh0802_set_ddram_address(0x03);
 8008bd2:	2003      	movs	r0, #3
 8008bd4:	f7fb fbc9 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 8008bd8:	4b61      	ldr	r3, [pc, #388]	; (8008d60 <TimeTask+0x9a0>)
 8008bda:	785b      	ldrb	r3, [r3, #1]
 8008bdc:	091b      	lsrs	r3, r3, #4
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	b25b      	sxtb	r3, r3
 8008be2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008be6:	b25b      	sxtb	r3, r3
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fb fbce 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 8008bf0:	4b5b      	ldr	r3, [pc, #364]	; (8008d60 <TimeTask+0x9a0>)
 8008bf2:	785b      	ldrb	r3, [r3, #1]
 8008bf4:	b25b      	sxtb	r3, r3
 8008bf6:	f003 030f 	and.w	r3, r3, #15
 8008bfa:	b25b      	sxtb	r3, r3
 8008bfc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008c00:	b25b      	sxtb	r3, r3
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fb fbc1 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x04);
 8008c0a:	2004      	movs	r0, #4
 8008c0c:	f7fb fbad 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Minutes==0x29)
 8008c10:	4b53      	ldr	r3, [pc, #332]	; (8008d60 <TimeTask+0x9a0>)
 8008c12:	785b      	ldrb	r3, [r3, #1]
 8008c14:	2b29      	cmp	r3, #41	; 0x29
 8008c16:	d121      	bne.n	8008c5c <TimeTask+0x89c>
							{
								Time.Minutes=0x30;
 8008c18:	4b51      	ldr	r3, [pc, #324]	; (8008d60 <TimeTask+0x9a0>)
 8008c1a:	2230      	movs	r2, #48	; 0x30
 8008c1c:	705a      	strb	r2, [r3, #1]
								wh0802_set_ddram_address(0x03);
 8008c1e:	2003      	movs	r0, #3
 8008c20:	f7fb fba3 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 8008c24:	4b4e      	ldr	r3, [pc, #312]	; (8008d60 <TimeTask+0x9a0>)
 8008c26:	785b      	ldrb	r3, [r3, #1]
 8008c28:	091b      	lsrs	r3, r3, #4
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	b25b      	sxtb	r3, r3
 8008c2e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008c32:	b25b      	sxtb	r3, r3
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fb fba8 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 8008c3c:	4b48      	ldr	r3, [pc, #288]	; (8008d60 <TimeTask+0x9a0>)
 8008c3e:	785b      	ldrb	r3, [r3, #1]
 8008c40:	b25b      	sxtb	r3, r3
 8008c42:	f003 030f 	and.w	r3, r3, #15
 8008c46:	b25b      	sxtb	r3, r3
 8008c48:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008c4c:	b25b      	sxtb	r3, r3
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fb fb9b 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x04);
 8008c56:	2004      	movs	r0, #4
 8008c58:	f7fb fb87 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Minutes==0x39)
 8008c5c:	4b40      	ldr	r3, [pc, #256]	; (8008d60 <TimeTask+0x9a0>)
 8008c5e:	785b      	ldrb	r3, [r3, #1]
 8008c60:	2b39      	cmp	r3, #57	; 0x39
 8008c62:	d121      	bne.n	8008ca8 <TimeTask+0x8e8>
							{
								Time.Minutes=0x40;
 8008c64:	4b3e      	ldr	r3, [pc, #248]	; (8008d60 <TimeTask+0x9a0>)
 8008c66:	2240      	movs	r2, #64	; 0x40
 8008c68:	705a      	strb	r2, [r3, #1]
								wh0802_set_ddram_address(0x03);
 8008c6a:	2003      	movs	r0, #3
 8008c6c:	f7fb fb7d 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 8008c70:	4b3b      	ldr	r3, [pc, #236]	; (8008d60 <TimeTask+0x9a0>)
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	091b      	lsrs	r3, r3, #4
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	b25b      	sxtb	r3, r3
 8008c7a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008c7e:	b25b      	sxtb	r3, r3
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fb fb82 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 8008c88:	4b35      	ldr	r3, [pc, #212]	; (8008d60 <TimeTask+0x9a0>)
 8008c8a:	785b      	ldrb	r3, [r3, #1]
 8008c8c:	b25b      	sxtb	r3, r3
 8008c8e:	f003 030f 	and.w	r3, r3, #15
 8008c92:	b25b      	sxtb	r3, r3
 8008c94:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008c98:	b25b      	sxtb	r3, r3
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7fb fb75 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x04);
 8008ca2:	2004      	movs	r0, #4
 8008ca4:	f7fb fb61 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Minutes==0x49)
 8008ca8:	4b2d      	ldr	r3, [pc, #180]	; (8008d60 <TimeTask+0x9a0>)
 8008caa:	785b      	ldrb	r3, [r3, #1]
 8008cac:	2b49      	cmp	r3, #73	; 0x49
 8008cae:	d121      	bne.n	8008cf4 <TimeTask+0x934>
							{
								Time.Minutes=0x50;
 8008cb0:	4b2b      	ldr	r3, [pc, #172]	; (8008d60 <TimeTask+0x9a0>)
 8008cb2:	2250      	movs	r2, #80	; 0x50
 8008cb4:	705a      	strb	r2, [r3, #1]
								wh0802_set_ddram_address(0x03);
 8008cb6:	2003      	movs	r0, #3
 8008cb8:	f7fb fb57 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Minutes>>4)&0x0F) );
 8008cbc:	4b28      	ldr	r3, [pc, #160]	; (8008d60 <TimeTask+0x9a0>)
 8008cbe:	785b      	ldrb	r3, [r3, #1]
 8008cc0:	091b      	lsrs	r3, r3, #4
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	b25b      	sxtb	r3, r3
 8008cc6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008cca:	b25b      	sxtb	r3, r3
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7fb fb5c 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Minutes&0x0F) );
 8008cd4:	4b22      	ldr	r3, [pc, #136]	; (8008d60 <TimeTask+0x9a0>)
 8008cd6:	785b      	ldrb	r3, [r3, #1]
 8008cd8:	b25b      	sxtb	r3, r3
 8008cda:	f003 030f 	and.w	r3, r3, #15
 8008cde:	b25b      	sxtb	r3, r3
 8008ce0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008ce4:	b25b      	sxtb	r3, r3
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7fb fb4f 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x04);
 8008cee:	2004      	movs	r0, #4
 8008cf0:	f7fb fb3b 	bl	800436a <wh0802_set_ddram_address>
							}
						}
					}
				}
				if(ddram==0x07)
 8008cf4:	4b1b      	ldr	r3, [pc, #108]	; (8008d64 <TimeTask+0x9a4>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b07      	cmp	r3, #7
 8008cfa:	f040 80f3 	bne.w	8008ee4 <TimeTask+0xb24>
				{
					if(Time.Seconds<0x59)
 8008cfe:	4b18      	ldr	r3, [pc, #96]	; (8008d60 <TimeTask+0x9a0>)
 8008d00:	789b      	ldrb	r3, [r3, #2]
 8008d02:	2b58      	cmp	r3, #88	; 0x58
 8008d04:	f200 80ee 	bhi.w	8008ee4 <TimeTask+0xb24>
					{
						if((Time.Seconds&0x0F)<0x09)
 8008d08:	4b15      	ldr	r3, [pc, #84]	; (8008d60 <TimeTask+0x9a0>)
 8008d0a:	789b      	ldrb	r3, [r3, #2]
 8008d0c:	f003 030f 	and.w	r3, r3, #15
 8008d10:	2b08      	cmp	r3, #8
 8008d12:	dc29      	bgt.n	8008d68 <TimeTask+0x9a8>
						{
							Time.Seconds++;
 8008d14:	4b12      	ldr	r3, [pc, #72]	; (8008d60 <TimeTask+0x9a0>)
 8008d16:	789b      	ldrb	r3, [r3, #2]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	4b10      	ldr	r3, [pc, #64]	; (8008d60 <TimeTask+0x9a0>)
 8008d1e:	709a      	strb	r2, [r3, #2]
							wh0802_set_ddram_address(0x06);
 8008d20:	2006      	movs	r0, #6
 8008d22:	f7fb fb22 	bl	800436a <wh0802_set_ddram_address>
							wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 8008d26:	4b0e      	ldr	r3, [pc, #56]	; (8008d60 <TimeTask+0x9a0>)
 8008d28:	789b      	ldrb	r3, [r3, #2]
 8008d2a:	091b      	lsrs	r3, r3, #4
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	b25b      	sxtb	r3, r3
 8008d30:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008d34:	b25b      	sxtb	r3, r3
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f7fb fb27 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 8008d3e:	4b08      	ldr	r3, [pc, #32]	; (8008d60 <TimeTask+0x9a0>)
 8008d40:	789b      	ldrb	r3, [r3, #2]
 8008d42:	b25b      	sxtb	r3, r3
 8008d44:	f003 030f 	and.w	r3, r3, #15
 8008d48:	b25b      	sxtb	r3, r3
 8008d4a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008d4e:	b25b      	sxtb	r3, r3
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fb fb1a 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_set_ddram_address(0x07);
 8008d58:	2007      	movs	r0, #7
 8008d5a:	f7fb fb06 	bl	800436a <wh0802_set_ddram_address>
 8008d5e:	e0c1      	b.n	8008ee4 <TimeTask+0xb24>
 8008d60:	20002c10 	.word	0x20002c10
 8008d64:	20002860 	.word	0x20002860
						}
						else
						{
							if(Time.Seconds==0x09)
 8008d68:	4b6b      	ldr	r3, [pc, #428]	; (8008f18 <TimeTask+0xb58>)
 8008d6a:	789b      	ldrb	r3, [r3, #2]
 8008d6c:	2b09      	cmp	r3, #9
 8008d6e:	d121      	bne.n	8008db4 <TimeTask+0x9f4>
							{
								Time.Seconds=0x10;
 8008d70:	4b69      	ldr	r3, [pc, #420]	; (8008f18 <TimeTask+0xb58>)
 8008d72:	2210      	movs	r2, #16
 8008d74:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x06);
 8008d76:	2006      	movs	r0, #6
 8008d78:	f7fb faf7 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 8008d7c:	4b66      	ldr	r3, [pc, #408]	; (8008f18 <TimeTask+0xb58>)
 8008d7e:	789b      	ldrb	r3, [r3, #2]
 8008d80:	091b      	lsrs	r3, r3, #4
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	b25b      	sxtb	r3, r3
 8008d86:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008d8a:	b25b      	sxtb	r3, r3
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fb fafc 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 8008d94:	4b60      	ldr	r3, [pc, #384]	; (8008f18 <TimeTask+0xb58>)
 8008d96:	789b      	ldrb	r3, [r3, #2]
 8008d98:	b25b      	sxtb	r3, r3
 8008d9a:	f003 030f 	and.w	r3, r3, #15
 8008d9e:	b25b      	sxtb	r3, r3
 8008da0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008da4:	b25b      	sxtb	r3, r3
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fb faef 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 8008dae:	2007      	movs	r0, #7
 8008db0:	f7fb fadb 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Seconds==0x19)
 8008db4:	4b58      	ldr	r3, [pc, #352]	; (8008f18 <TimeTask+0xb58>)
 8008db6:	789b      	ldrb	r3, [r3, #2]
 8008db8:	2b19      	cmp	r3, #25
 8008dba:	d121      	bne.n	8008e00 <TimeTask+0xa40>
							{
								Time.Seconds=0x20;
 8008dbc:	4b56      	ldr	r3, [pc, #344]	; (8008f18 <TimeTask+0xb58>)
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x06);
 8008dc2:	2006      	movs	r0, #6
 8008dc4:	f7fb fad1 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 8008dc8:	4b53      	ldr	r3, [pc, #332]	; (8008f18 <TimeTask+0xb58>)
 8008dca:	789b      	ldrb	r3, [r3, #2]
 8008dcc:	091b      	lsrs	r3, r3, #4
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	b25b      	sxtb	r3, r3
 8008dd2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008dd6:	b25b      	sxtb	r3, r3
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7fb fad6 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 8008de0:	4b4d      	ldr	r3, [pc, #308]	; (8008f18 <TimeTask+0xb58>)
 8008de2:	789b      	ldrb	r3, [r3, #2]
 8008de4:	b25b      	sxtb	r3, r3
 8008de6:	f003 030f 	and.w	r3, r3, #15
 8008dea:	b25b      	sxtb	r3, r3
 8008dec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008df0:	b25b      	sxtb	r3, r3
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7fb fac9 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 8008dfa:	2007      	movs	r0, #7
 8008dfc:	f7fb fab5 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Seconds==0x29)
 8008e00:	4b45      	ldr	r3, [pc, #276]	; (8008f18 <TimeTask+0xb58>)
 8008e02:	789b      	ldrb	r3, [r3, #2]
 8008e04:	2b29      	cmp	r3, #41	; 0x29
 8008e06:	d121      	bne.n	8008e4c <TimeTask+0xa8c>
							{
								Time.Seconds=0x30;
 8008e08:	4b43      	ldr	r3, [pc, #268]	; (8008f18 <TimeTask+0xb58>)
 8008e0a:	2230      	movs	r2, #48	; 0x30
 8008e0c:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x06);
 8008e0e:	2006      	movs	r0, #6
 8008e10:	f7fb faab 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 8008e14:	4b40      	ldr	r3, [pc, #256]	; (8008f18 <TimeTask+0xb58>)
 8008e16:	789b      	ldrb	r3, [r3, #2]
 8008e18:	091b      	lsrs	r3, r3, #4
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	b25b      	sxtb	r3, r3
 8008e1e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008e22:	b25b      	sxtb	r3, r3
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fb fab0 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 8008e2c:	4b3a      	ldr	r3, [pc, #232]	; (8008f18 <TimeTask+0xb58>)
 8008e2e:	789b      	ldrb	r3, [r3, #2]
 8008e30:	b25b      	sxtb	r3, r3
 8008e32:	f003 030f 	and.w	r3, r3, #15
 8008e36:	b25b      	sxtb	r3, r3
 8008e38:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008e3c:	b25b      	sxtb	r3, r3
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fb faa3 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 8008e46:	2007      	movs	r0, #7
 8008e48:	f7fb fa8f 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Seconds==0x39)
 8008e4c:	4b32      	ldr	r3, [pc, #200]	; (8008f18 <TimeTask+0xb58>)
 8008e4e:	789b      	ldrb	r3, [r3, #2]
 8008e50:	2b39      	cmp	r3, #57	; 0x39
 8008e52:	d121      	bne.n	8008e98 <TimeTask+0xad8>
							{
								Time.Seconds=0x40;
 8008e54:	4b30      	ldr	r3, [pc, #192]	; (8008f18 <TimeTask+0xb58>)
 8008e56:	2240      	movs	r2, #64	; 0x40
 8008e58:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x06);
 8008e5a:	2006      	movs	r0, #6
 8008e5c:	f7fb fa85 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 8008e60:	4b2d      	ldr	r3, [pc, #180]	; (8008f18 <TimeTask+0xb58>)
 8008e62:	789b      	ldrb	r3, [r3, #2]
 8008e64:	091b      	lsrs	r3, r3, #4
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	b25b      	sxtb	r3, r3
 8008e6a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008e6e:	b25b      	sxtb	r3, r3
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fb fa8a 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 8008e78:	4b27      	ldr	r3, [pc, #156]	; (8008f18 <TimeTask+0xb58>)
 8008e7a:	789b      	ldrb	r3, [r3, #2]
 8008e7c:	b25b      	sxtb	r3, r3
 8008e7e:	f003 030f 	and.w	r3, r3, #15
 8008e82:	b25b      	sxtb	r3, r3
 8008e84:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008e88:	b25b      	sxtb	r3, r3
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fb fa7d 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 8008e92:	2007      	movs	r0, #7
 8008e94:	f7fb fa69 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Time.Seconds==0x49)
 8008e98:	4b1f      	ldr	r3, [pc, #124]	; (8008f18 <TimeTask+0xb58>)
 8008e9a:	789b      	ldrb	r3, [r3, #2]
 8008e9c:	2b49      	cmp	r3, #73	; 0x49
 8008e9e:	d121      	bne.n	8008ee4 <TimeTask+0xb24>
							{
								Time.Seconds=0x50;
 8008ea0:	4b1d      	ldr	r3, [pc, #116]	; (8008f18 <TimeTask+0xb58>)
 8008ea2:	2250      	movs	r2, #80	; 0x50
 8008ea4:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x06);
 8008ea6:	2006      	movs	r0, #6
 8008ea8:	f7fb fa5f 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Time.Seconds>>4)&0x0F) );
 8008eac:	4b1a      	ldr	r3, [pc, #104]	; (8008f18 <TimeTask+0xb58>)
 8008eae:	789b      	ldrb	r3, [r3, #2]
 8008eb0:	091b      	lsrs	r3, r3, #4
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	b25b      	sxtb	r3, r3
 8008eb6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008eba:	b25b      	sxtb	r3, r3
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fb fa64 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Time.Seconds&0x0F) );
 8008ec4:	4b14      	ldr	r3, [pc, #80]	; (8008f18 <TimeTask+0xb58>)
 8008ec6:	789b      	ldrb	r3, [r3, #2]
 8008ec8:	b25b      	sxtb	r3, r3
 8008eca:	f003 030f 	and.w	r3, r3, #15
 8008ece:	b25b      	sxtb	r3, r3
 8008ed0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008ed4:	b25b      	sxtb	r3, r3
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fb fa57 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 8008ede:	2007      	movs	r0, #7
 8008ee0:	f7fb fa43 	bl	800436a <wh0802_set_ddram_address>
							}
						}
					}
				}
			}
			if(event1.value.v==BUTTON6_PRESSED)
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	2b06      	cmp	r3, #6
 8008ee8:	f47f aa73 	bne.w	80083d2 <TimeTask+0x12>
			{
				if((ddram==0x01||ddram==0x04))
 8008eec:	4b0b      	ldr	r3, [pc, #44]	; (8008f1c <TimeTask+0xb5c>)
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d003      	beq.n	8008efc <TimeTask+0xb3c>
 8008ef4:	4b09      	ldr	r3, [pc, #36]	; (8008f1c <TimeTask+0xb5c>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d105      	bne.n	8008f08 <TimeTask+0xb48>
				{
					ddram=ddram+0x03;
 8008efc:	4b07      	ldr	r3, [pc, #28]	; (8008f1c <TimeTask+0xb5c>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	3303      	adds	r3, #3
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	4b05      	ldr	r3, [pc, #20]	; (8008f1c <TimeTask+0xb5c>)
 8008f06:	701a      	strb	r2, [r3, #0]
				}
				wh0802_set_ddram_address(ddram);
 8008f08:	4b04      	ldr	r3, [pc, #16]	; (8008f1c <TimeTask+0xb5c>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7fb fa2c 	bl	800436a <wh0802_set_ddram_address>
		event1 = osMessageGet(pos_Queue, 100);
 8008f12:	f7ff ba5e 	b.w	80083d2 <TimeTask+0x12>
 8008f16:	bf00      	nop
 8008f18:	20002c10 	.word	0x20002c10
 8008f1c:	20002860 	.word	0x20002860

08008f20 <DateTask>:

}

// Обработчик задачи установки даты
void DateTask(void const * argument)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
	osEvent event2;
	osThreadSuspend(DateTaskHandle); // Приостанавливаем задачу
 8008f28:	4b89      	ldr	r3, [pc, #548]	; (8009150 <DateTask+0x230>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f7fb fd73 	bl	8004a18 <osThreadSuspend>

	for(;;)
	{
		event2 = osMessageGet(pos_Queue, 100);
 8008f32:	4b88      	ldr	r3, [pc, #544]	; (8009154 <DateTask+0x234>)
 8008f34:	6819      	ldr	r1, [r3, #0]
 8008f36:	f107 030c 	add.w	r3, r7, #12
 8008f3a:	2264      	movs	r2, #100	; 0x64
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fb fcf7 	bl	8004930 <osMessageGet>
		if (event2.status == osEventMessage)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b10      	cmp	r3, #16
 8008f46:	d1f4      	bne.n	8008f32 <DateTask+0x12>
		{
			if(event2.value.v==BUTTON1_PRESSED)
			{

			}
			if(event2.value.v==BUTTON2_PRESSED)
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	2b02      	cmp	r3, #2
 8008f4c:	d11f      	bne.n	8008f8e <DateTask+0x6e>
			{
				LED8_OFF;
 8008f4e:	2200      	movs	r2, #0
 8008f50:	2180      	movs	r1, #128	; 0x80
 8008f52:	4881      	ldr	r0, [pc, #516]	; (8009158 <DateTask+0x238>)
 8008f54:	f7f8 fcdb 	bl	800190e <HAL_GPIO_WritePin>
				wh0802_display_control(DISPLAY_ON, CURSOR_OFF, BLINKING_OFF);
 8008f58:	2200      	movs	r2, #0
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	2004      	movs	r0, #4
 8008f5e:	f7fb f9ce 	bl	80042fe <wh0802_display_control>
				HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BCD);
 8008f62:	2201      	movs	r2, #1
 8008f64:	497d      	ldr	r1, [pc, #500]	; (800915c <DateTask+0x23c>)
 8008f66:	487e      	ldr	r0, [pc, #504]	; (8009160 <DateTask+0x240>)
 8008f68:	f7f9 fcc0 	bl	80028ec <HAL_RTC_SetDate>
				osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 8008f6c:	4b7d      	ldr	r3, [pc, #500]	; (8009164 <DateTask+0x244>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f241 3188 	movw	r1, #5000	; 0x1388
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fb fb9b 	bl	80046b0 <osTimerStart>
				osThreadResume(DisplayHandle);
 8008f7a:	4b7b      	ldr	r3, [pc, #492]	; (8009168 <DateTask+0x248>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fb fd56 	bl	8004a30 <osThreadResume>
				osThreadSuspend(DateTaskHandle);
 8008f84:	4b72      	ldr	r3, [pc, #456]	; (8009150 <DateTask+0x230>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fb fd45 	bl	8004a18 <osThreadSuspend>
			}
			if(event2.value.v==BUTTON3_PRESSED)
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b03      	cmp	r3, #3
 8008f92:	f040 81bb 	bne.w	800930c <DateTask+0x3ec>
			{
				if(ddram==0x01)
 8008f96:	4b75      	ldr	r3, [pc, #468]	; (800916c <DateTask+0x24c>)
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	f040 80a3 	bne.w	80090e6 <DateTask+0x1c6>
				{
					if(Date.Date>0x01)
 8008fa0:	4b6e      	ldr	r3, [pc, #440]	; (800915c <DateTask+0x23c>)
 8008fa2:	789b      	ldrb	r3, [r3, #2]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	f240 809e 	bls.w	80090e6 <DateTask+0x1c6>
					{
						if((Date.Date&0x0F)>0x00)
 8008faa:	4b6c      	ldr	r3, [pc, #432]	; (800915c <DateTask+0x23c>)
 8008fac:	789b      	ldrb	r3, [r3, #2]
 8008fae:	f003 030f 	and.w	r3, r3, #15
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dd25      	ble.n	8009002 <DateTask+0xe2>
						{
							Date.Date--;
 8008fb6:	4b69      	ldr	r3, [pc, #420]	; (800915c <DateTask+0x23c>)
 8008fb8:	789b      	ldrb	r3, [r3, #2]
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	4b67      	ldr	r3, [pc, #412]	; (800915c <DateTask+0x23c>)
 8008fc0:	709a      	strb	r2, [r3, #2]
							wh0802_set_ddram_address(0x00);
 8008fc2:	2000      	movs	r0, #0
 8008fc4:	f7fb f9d1 	bl	800436a <wh0802_set_ddram_address>
							wh0802_write_data_to_ram( 0x30| ((Date.Date>>4)&0x0F) );
 8008fc8:	4b64      	ldr	r3, [pc, #400]	; (800915c <DateTask+0x23c>)
 8008fca:	789b      	ldrb	r3, [r3, #2]
 8008fcc:	091b      	lsrs	r3, r3, #4
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	b25b      	sxtb	r3, r3
 8008fd2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008fd6:	b25b      	sxtb	r3, r3
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fb f9d6 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_write_data_to_ram( 0x30| (Date.Date&0x0F) );
 8008fe0:	4b5e      	ldr	r3, [pc, #376]	; (800915c <DateTask+0x23c>)
 8008fe2:	789b      	ldrb	r3, [r3, #2]
 8008fe4:	b25b      	sxtb	r3, r3
 8008fe6:	f003 030f 	and.w	r3, r3, #15
 8008fea:	b25b      	sxtb	r3, r3
 8008fec:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008ff0:	b25b      	sxtb	r3, r3
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fb f9c9 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_set_ddram_address(0x01);
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	f7fb f9b5 	bl	800436a <wh0802_set_ddram_address>
 8009000:	e071      	b.n	80090e6 <DateTask+0x1c6>
						}
						else
						{
							if(Date.Date==0x30)
 8009002:	4b56      	ldr	r3, [pc, #344]	; (800915c <DateTask+0x23c>)
 8009004:	789b      	ldrb	r3, [r3, #2]
 8009006:	2b30      	cmp	r3, #48	; 0x30
 8009008:	d121      	bne.n	800904e <DateTask+0x12e>
							{
								Date.Date=0x29;
 800900a:	4b54      	ldr	r3, [pc, #336]	; (800915c <DateTask+0x23c>)
 800900c:	2229      	movs	r2, #41	; 0x29
 800900e:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x00);
 8009010:	2000      	movs	r0, #0
 8009012:	f7fb f9aa 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Date>>4)&0x0F) );
 8009016:	4b51      	ldr	r3, [pc, #324]	; (800915c <DateTask+0x23c>)
 8009018:	789b      	ldrb	r3, [r3, #2]
 800901a:	091b      	lsrs	r3, r3, #4
 800901c:	b2db      	uxtb	r3, r3
 800901e:	b25b      	sxtb	r3, r3
 8009020:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009024:	b25b      	sxtb	r3, r3
 8009026:	b2db      	uxtb	r3, r3
 8009028:	4618      	mov	r0, r3
 800902a:	f7fb f9af 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Date&0x0F) );
 800902e:	4b4b      	ldr	r3, [pc, #300]	; (800915c <DateTask+0x23c>)
 8009030:	789b      	ldrb	r3, [r3, #2]
 8009032:	b25b      	sxtb	r3, r3
 8009034:	f003 030f 	and.w	r3, r3, #15
 8009038:	b25b      	sxtb	r3, r3
 800903a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800903e:	b25b      	sxtb	r3, r3
 8009040:	b2db      	uxtb	r3, r3
 8009042:	4618      	mov	r0, r3
 8009044:	f7fb f9a2 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x01);
 8009048:	2001      	movs	r0, #1
 800904a:	f7fb f98e 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Date.Date==0x20)
 800904e:	4b43      	ldr	r3, [pc, #268]	; (800915c <DateTask+0x23c>)
 8009050:	789b      	ldrb	r3, [r3, #2]
 8009052:	2b20      	cmp	r3, #32
 8009054:	d121      	bne.n	800909a <DateTask+0x17a>
							{
								Date.Date=0x19;
 8009056:	4b41      	ldr	r3, [pc, #260]	; (800915c <DateTask+0x23c>)
 8009058:	2219      	movs	r2, #25
 800905a:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x00);
 800905c:	2000      	movs	r0, #0
 800905e:	f7fb f984 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Date>>4)&0x0F) );
 8009062:	4b3e      	ldr	r3, [pc, #248]	; (800915c <DateTask+0x23c>)
 8009064:	789b      	ldrb	r3, [r3, #2]
 8009066:	091b      	lsrs	r3, r3, #4
 8009068:	b2db      	uxtb	r3, r3
 800906a:	b25b      	sxtb	r3, r3
 800906c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009070:	b25b      	sxtb	r3, r3
 8009072:	b2db      	uxtb	r3, r3
 8009074:	4618      	mov	r0, r3
 8009076:	f7fb f989 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Date&0x0F) );
 800907a:	4b38      	ldr	r3, [pc, #224]	; (800915c <DateTask+0x23c>)
 800907c:	789b      	ldrb	r3, [r3, #2]
 800907e:	b25b      	sxtb	r3, r3
 8009080:	f003 030f 	and.w	r3, r3, #15
 8009084:	b25b      	sxtb	r3, r3
 8009086:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800908a:	b25b      	sxtb	r3, r3
 800908c:	b2db      	uxtb	r3, r3
 800908e:	4618      	mov	r0, r3
 8009090:	f7fb f97c 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x01);
 8009094:	2001      	movs	r0, #1
 8009096:	f7fb f968 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Date.Date==0x10)
 800909a:	4b30      	ldr	r3, [pc, #192]	; (800915c <DateTask+0x23c>)
 800909c:	789b      	ldrb	r3, [r3, #2]
 800909e:	2b10      	cmp	r3, #16
 80090a0:	d121      	bne.n	80090e6 <DateTask+0x1c6>
							{
								Date.Date=0x09;
 80090a2:	4b2e      	ldr	r3, [pc, #184]	; (800915c <DateTask+0x23c>)
 80090a4:	2209      	movs	r2, #9
 80090a6:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x00);
 80090a8:	2000      	movs	r0, #0
 80090aa:	f7fb f95e 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Date>>4)&0x0F) );
 80090ae:	4b2b      	ldr	r3, [pc, #172]	; (800915c <DateTask+0x23c>)
 80090b0:	789b      	ldrb	r3, [r3, #2]
 80090b2:	091b      	lsrs	r3, r3, #4
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	b25b      	sxtb	r3, r3
 80090b8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80090bc:	b25b      	sxtb	r3, r3
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fb f963 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Date&0x0F) );
 80090c6:	4b25      	ldr	r3, [pc, #148]	; (800915c <DateTask+0x23c>)
 80090c8:	789b      	ldrb	r3, [r3, #2]
 80090ca:	b25b      	sxtb	r3, r3
 80090cc:	f003 030f 	and.w	r3, r3, #15
 80090d0:	b25b      	sxtb	r3, r3
 80090d2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80090d6:	b25b      	sxtb	r3, r3
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fb f956 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x01);
 80090e0:	2001      	movs	r0, #1
 80090e2:	f7fb f942 	bl	800436a <wh0802_set_ddram_address>
							}
						}
					}
				}
				if(ddram==0x04)
 80090e6:	4b21      	ldr	r3, [pc, #132]	; (800916c <DateTask+0x24c>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	2b04      	cmp	r3, #4
 80090ec:	d166      	bne.n	80091bc <DateTask+0x29c>
				{
					if(Date.Month>0x01)
 80090ee:	4b1b      	ldr	r3, [pc, #108]	; (800915c <DateTask+0x23c>)
 80090f0:	785b      	ldrb	r3, [r3, #1]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d962      	bls.n	80091bc <DateTask+0x29c>
					{
						if((Date.Month&0x0F)>0x00)
 80090f6:	4b19      	ldr	r3, [pc, #100]	; (800915c <DateTask+0x23c>)
 80090f8:	785b      	ldrb	r3, [r3, #1]
 80090fa:	f003 030f 	and.w	r3, r3, #15
 80090fe:	2b00      	cmp	r3, #0
 8009100:	dd36      	ble.n	8009170 <DateTask+0x250>
						{
							Date.Month--;
 8009102:	4b16      	ldr	r3, [pc, #88]	; (800915c <DateTask+0x23c>)
 8009104:	785b      	ldrb	r3, [r3, #1]
 8009106:	3b01      	subs	r3, #1
 8009108:	b2da      	uxtb	r2, r3
 800910a:	4b14      	ldr	r3, [pc, #80]	; (800915c <DateTask+0x23c>)
 800910c:	705a      	strb	r2, [r3, #1]
							wh0802_set_ddram_address(0x03);
 800910e:	2003      	movs	r0, #3
 8009110:	f7fb f92b 	bl	800436a <wh0802_set_ddram_address>
							wh0802_write_data_to_ram( 0x30| ((Date.Month>>4)&0x0F) );
 8009114:	4b11      	ldr	r3, [pc, #68]	; (800915c <DateTask+0x23c>)
 8009116:	785b      	ldrb	r3, [r3, #1]
 8009118:	091b      	lsrs	r3, r3, #4
 800911a:	b2db      	uxtb	r3, r3
 800911c:	b25b      	sxtb	r3, r3
 800911e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009122:	b25b      	sxtb	r3, r3
 8009124:	b2db      	uxtb	r3, r3
 8009126:	4618      	mov	r0, r3
 8009128:	f7fb f930 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_write_data_to_ram( 0x30| (Date.Month&0x0F) );
 800912c:	4b0b      	ldr	r3, [pc, #44]	; (800915c <DateTask+0x23c>)
 800912e:	785b      	ldrb	r3, [r3, #1]
 8009130:	b25b      	sxtb	r3, r3
 8009132:	f003 030f 	and.w	r3, r3, #15
 8009136:	b25b      	sxtb	r3, r3
 8009138:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800913c:	b25b      	sxtb	r3, r3
 800913e:	b2db      	uxtb	r3, r3
 8009140:	4618      	mov	r0, r3
 8009142:	f7fb f923 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_set_ddram_address(0x04);
 8009146:	2004      	movs	r0, #4
 8009148:	f7fb f90f 	bl	800436a <wh0802_set_ddram_address>
 800914c:	e036      	b.n	80091bc <DateTask+0x29c>
 800914e:	bf00      	nop
 8009150:	20002938 	.word	0x20002938
 8009154:	200028b4 	.word	0x200028b4
 8009158:	40010800 	.word	0x40010800
 800915c:	20002c08 	.word	0x20002c08
 8009160:	2000293c 	.word	0x2000293c
 8009164:	200028b0 	.word	0x200028b0
 8009168:	2000295c 	.word	0x2000295c
 800916c:	20002860 	.word	0x20002860
						}
						else
						{
							if(Date.Month==0x10)
 8009170:	4b9d      	ldr	r3, [pc, #628]	; (80093e8 <DateTask+0x4c8>)
 8009172:	785b      	ldrb	r3, [r3, #1]
 8009174:	2b10      	cmp	r3, #16
 8009176:	d121      	bne.n	80091bc <DateTask+0x29c>
							{
								Date.Month=0x09;
 8009178:	4b9b      	ldr	r3, [pc, #620]	; (80093e8 <DateTask+0x4c8>)
 800917a:	2209      	movs	r2, #9
 800917c:	705a      	strb	r2, [r3, #1]
								wh0802_set_ddram_address(0x03);
 800917e:	2003      	movs	r0, #3
 8009180:	f7fb f8f3 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Month>>4)&0x0F) );
 8009184:	4b98      	ldr	r3, [pc, #608]	; (80093e8 <DateTask+0x4c8>)
 8009186:	785b      	ldrb	r3, [r3, #1]
 8009188:	091b      	lsrs	r3, r3, #4
 800918a:	b2db      	uxtb	r3, r3
 800918c:	b25b      	sxtb	r3, r3
 800918e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009192:	b25b      	sxtb	r3, r3
 8009194:	b2db      	uxtb	r3, r3
 8009196:	4618      	mov	r0, r3
 8009198:	f7fb f8f8 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Month&0x0F) );
 800919c:	4b92      	ldr	r3, [pc, #584]	; (80093e8 <DateTask+0x4c8>)
 800919e:	785b      	ldrb	r3, [r3, #1]
 80091a0:	b25b      	sxtb	r3, r3
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	b25b      	sxtb	r3, r3
 80091a8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80091ac:	b25b      	sxtb	r3, r3
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fb f8eb 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x04);
 80091b6:	2004      	movs	r0, #4
 80091b8:	f7fb f8d7 	bl	800436a <wh0802_set_ddram_address>
							}
						}
					}
				}
				if(ddram==0x07)
 80091bc:	4b8b      	ldr	r3, [pc, #556]	; (80093ec <DateTask+0x4cc>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b07      	cmp	r3, #7
 80091c2:	f040 80a3 	bne.w	800930c <DateTask+0x3ec>
				{
					if(Date.Year>0x00)
 80091c6:	4b88      	ldr	r3, [pc, #544]	; (80093e8 <DateTask+0x4c8>)
 80091c8:	78db      	ldrb	r3, [r3, #3]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 809e 	beq.w	800930c <DateTask+0x3ec>
					{
						if((Date.Year&0x0F)>0x00)
 80091d0:	4b85      	ldr	r3, [pc, #532]	; (80093e8 <DateTask+0x4c8>)
 80091d2:	78db      	ldrb	r3, [r3, #3]
 80091d4:	f003 030f 	and.w	r3, r3, #15
 80091d8:	2b00      	cmp	r3, #0
 80091da:	dd25      	ble.n	8009228 <DateTask+0x308>
						{
							Date.Year--;
 80091dc:	4b82      	ldr	r3, [pc, #520]	; (80093e8 <DateTask+0x4c8>)
 80091de:	78db      	ldrb	r3, [r3, #3]
 80091e0:	3b01      	subs	r3, #1
 80091e2:	b2da      	uxtb	r2, r3
 80091e4:	4b80      	ldr	r3, [pc, #512]	; (80093e8 <DateTask+0x4c8>)
 80091e6:	70da      	strb	r2, [r3, #3]
							wh0802_set_ddram_address(0x06);
 80091e8:	2006      	movs	r0, #6
 80091ea:	f7fb f8be 	bl	800436a <wh0802_set_ddram_address>
							wh0802_write_data_to_ram( 0x30| ((Date.Year>>4)&0x0F) );
 80091ee:	4b7e      	ldr	r3, [pc, #504]	; (80093e8 <DateTask+0x4c8>)
 80091f0:	78db      	ldrb	r3, [r3, #3]
 80091f2:	091b      	lsrs	r3, r3, #4
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	b25b      	sxtb	r3, r3
 80091f8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80091fc:	b25b      	sxtb	r3, r3
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	4618      	mov	r0, r3
 8009202:	f7fb f8c3 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_write_data_to_ram( 0x30| (Date.Year&0x0F) );
 8009206:	4b78      	ldr	r3, [pc, #480]	; (80093e8 <DateTask+0x4c8>)
 8009208:	78db      	ldrb	r3, [r3, #3]
 800920a:	b25b      	sxtb	r3, r3
 800920c:	f003 030f 	and.w	r3, r3, #15
 8009210:	b25b      	sxtb	r3, r3
 8009212:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009216:	b25b      	sxtb	r3, r3
 8009218:	b2db      	uxtb	r3, r3
 800921a:	4618      	mov	r0, r3
 800921c:	f7fb f8b6 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_set_ddram_address(0x07);
 8009220:	2007      	movs	r0, #7
 8009222:	f7fb f8a2 	bl	800436a <wh0802_set_ddram_address>
 8009226:	e071      	b.n	800930c <DateTask+0x3ec>
						}
						else
						{
							if(Date.Year==0x30)
 8009228:	4b6f      	ldr	r3, [pc, #444]	; (80093e8 <DateTask+0x4c8>)
 800922a:	78db      	ldrb	r3, [r3, #3]
 800922c:	2b30      	cmp	r3, #48	; 0x30
 800922e:	d121      	bne.n	8009274 <DateTask+0x354>
							{
								Date.Year=0x29;
 8009230:	4b6d      	ldr	r3, [pc, #436]	; (80093e8 <DateTask+0x4c8>)
 8009232:	2229      	movs	r2, #41	; 0x29
 8009234:	70da      	strb	r2, [r3, #3]
								wh0802_set_ddram_address(0x06);
 8009236:	2006      	movs	r0, #6
 8009238:	f7fb f897 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Year>>4)&0x0F) );
 800923c:	4b6a      	ldr	r3, [pc, #424]	; (80093e8 <DateTask+0x4c8>)
 800923e:	78db      	ldrb	r3, [r3, #3]
 8009240:	091b      	lsrs	r3, r3, #4
 8009242:	b2db      	uxtb	r3, r3
 8009244:	b25b      	sxtb	r3, r3
 8009246:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800924a:	b25b      	sxtb	r3, r3
 800924c:	b2db      	uxtb	r3, r3
 800924e:	4618      	mov	r0, r3
 8009250:	f7fb f89c 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Year&0x0F) );
 8009254:	4b64      	ldr	r3, [pc, #400]	; (80093e8 <DateTask+0x4c8>)
 8009256:	78db      	ldrb	r3, [r3, #3]
 8009258:	b25b      	sxtb	r3, r3
 800925a:	f003 030f 	and.w	r3, r3, #15
 800925e:	b25b      	sxtb	r3, r3
 8009260:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009264:	b25b      	sxtb	r3, r3
 8009266:	b2db      	uxtb	r3, r3
 8009268:	4618      	mov	r0, r3
 800926a:	f7fb f88f 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 800926e:	2007      	movs	r0, #7
 8009270:	f7fb f87b 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Date.Year==0x20)
 8009274:	4b5c      	ldr	r3, [pc, #368]	; (80093e8 <DateTask+0x4c8>)
 8009276:	78db      	ldrb	r3, [r3, #3]
 8009278:	2b20      	cmp	r3, #32
 800927a:	d121      	bne.n	80092c0 <DateTask+0x3a0>
							{
								Date.Year=0x19;
 800927c:	4b5a      	ldr	r3, [pc, #360]	; (80093e8 <DateTask+0x4c8>)
 800927e:	2219      	movs	r2, #25
 8009280:	70da      	strb	r2, [r3, #3]
								wh0802_set_ddram_address(0x06);
 8009282:	2006      	movs	r0, #6
 8009284:	f7fb f871 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Year>>4)&0x0F) );
 8009288:	4b57      	ldr	r3, [pc, #348]	; (80093e8 <DateTask+0x4c8>)
 800928a:	78db      	ldrb	r3, [r3, #3]
 800928c:	091b      	lsrs	r3, r3, #4
 800928e:	b2db      	uxtb	r3, r3
 8009290:	b25b      	sxtb	r3, r3
 8009292:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009296:	b25b      	sxtb	r3, r3
 8009298:	b2db      	uxtb	r3, r3
 800929a:	4618      	mov	r0, r3
 800929c:	f7fb f876 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Year&0x0F) );
 80092a0:	4b51      	ldr	r3, [pc, #324]	; (80093e8 <DateTask+0x4c8>)
 80092a2:	78db      	ldrb	r3, [r3, #3]
 80092a4:	b25b      	sxtb	r3, r3
 80092a6:	f003 030f 	and.w	r3, r3, #15
 80092aa:	b25b      	sxtb	r3, r3
 80092ac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80092b0:	b25b      	sxtb	r3, r3
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fb f869 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 80092ba:	2007      	movs	r0, #7
 80092bc:	f7fb f855 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Date.Year==0x10)
 80092c0:	4b49      	ldr	r3, [pc, #292]	; (80093e8 <DateTask+0x4c8>)
 80092c2:	78db      	ldrb	r3, [r3, #3]
 80092c4:	2b10      	cmp	r3, #16
 80092c6:	d121      	bne.n	800930c <DateTask+0x3ec>
							{
								Date.Year=0x09;
 80092c8:	4b47      	ldr	r3, [pc, #284]	; (80093e8 <DateTask+0x4c8>)
 80092ca:	2209      	movs	r2, #9
 80092cc:	70da      	strb	r2, [r3, #3]
								wh0802_set_ddram_address(0x06);
 80092ce:	2006      	movs	r0, #6
 80092d0:	f7fb f84b 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Year>>4)&0x0F) );
 80092d4:	4b44      	ldr	r3, [pc, #272]	; (80093e8 <DateTask+0x4c8>)
 80092d6:	78db      	ldrb	r3, [r3, #3]
 80092d8:	091b      	lsrs	r3, r3, #4
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	b25b      	sxtb	r3, r3
 80092de:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80092e2:	b25b      	sxtb	r3, r3
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7fb f850 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Year&0x0F) );
 80092ec:	4b3e      	ldr	r3, [pc, #248]	; (80093e8 <DateTask+0x4c8>)
 80092ee:	78db      	ldrb	r3, [r3, #3]
 80092f0:	b25b      	sxtb	r3, r3
 80092f2:	f003 030f 	and.w	r3, r3, #15
 80092f6:	b25b      	sxtb	r3, r3
 80092f8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80092fc:	b25b      	sxtb	r3, r3
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	4618      	mov	r0, r3
 8009302:	f7fb f843 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 8009306:	2007      	movs	r0, #7
 8009308:	f7fb f82f 	bl	800436a <wh0802_set_ddram_address>
							}
						}
					}
				}
			}
			if(event2.value.v==BUTTON4_PRESSED)
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	2b04      	cmp	r3, #4
 8009310:	d112      	bne.n	8009338 <DateTask+0x418>
			{
				if((ddram==0x04||ddram==0x07))
 8009312:	4b36      	ldr	r3, [pc, #216]	; (80093ec <DateTask+0x4cc>)
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	2b04      	cmp	r3, #4
 8009318:	d003      	beq.n	8009322 <DateTask+0x402>
 800931a:	4b34      	ldr	r3, [pc, #208]	; (80093ec <DateTask+0x4cc>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b07      	cmp	r3, #7
 8009320:	d105      	bne.n	800932e <DateTask+0x40e>
				{
					ddram=ddram-0x03;
 8009322:	4b32      	ldr	r3, [pc, #200]	; (80093ec <DateTask+0x4cc>)
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	3b03      	subs	r3, #3
 8009328:	b2da      	uxtb	r2, r3
 800932a:	4b30      	ldr	r3, [pc, #192]	; (80093ec <DateTask+0x4cc>)
 800932c:	701a      	strb	r2, [r3, #0]
				}
				wh0802_set_ddram_address(ddram);
 800932e:	4b2f      	ldr	r3, [pc, #188]	; (80093ec <DateTask+0x4cc>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	4618      	mov	r0, r3
 8009334:	f7fb f819 	bl	800436a <wh0802_set_ddram_address>
			}
			if(event2.value.v==BUTTON5_PRESSED)
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	2b05      	cmp	r3, #5
 800933c:	f040 81d0 	bne.w	80096e0 <DateTask+0x7c0>
			{
				if(ddram==0x01)
 8009340:	4b2a      	ldr	r3, [pc, #168]	; (80093ec <DateTask+0x4cc>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	2b01      	cmp	r3, #1
 8009346:	f040 80c5 	bne.w	80094d4 <DateTask+0x5b4>
				{
					if( (Date.Date<0x31)&&( (Date.Month==0x01)||(Date.Month==0x03)||(Date.Month==0x05)||(Date.Month==0x07)||(Date.Month==0x08)||(Date.Month==0x10)||(Date.Month==0x12) ) )
 800934a:	4b27      	ldr	r3, [pc, #156]	; (80093e8 <DateTask+0x4c8>)
 800934c:	789b      	ldrb	r3, [r3, #2]
 800934e:	2b30      	cmp	r3, #48	; 0x30
 8009350:	f200 80c0 	bhi.w	80094d4 <DateTask+0x5b4>
 8009354:	4b24      	ldr	r3, [pc, #144]	; (80093e8 <DateTask+0x4c8>)
 8009356:	785b      	ldrb	r3, [r3, #1]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d018      	beq.n	800938e <DateTask+0x46e>
 800935c:	4b22      	ldr	r3, [pc, #136]	; (80093e8 <DateTask+0x4c8>)
 800935e:	785b      	ldrb	r3, [r3, #1]
 8009360:	2b03      	cmp	r3, #3
 8009362:	d014      	beq.n	800938e <DateTask+0x46e>
 8009364:	4b20      	ldr	r3, [pc, #128]	; (80093e8 <DateTask+0x4c8>)
 8009366:	785b      	ldrb	r3, [r3, #1]
 8009368:	2b05      	cmp	r3, #5
 800936a:	d010      	beq.n	800938e <DateTask+0x46e>
 800936c:	4b1e      	ldr	r3, [pc, #120]	; (80093e8 <DateTask+0x4c8>)
 800936e:	785b      	ldrb	r3, [r3, #1]
 8009370:	2b07      	cmp	r3, #7
 8009372:	d00c      	beq.n	800938e <DateTask+0x46e>
 8009374:	4b1c      	ldr	r3, [pc, #112]	; (80093e8 <DateTask+0x4c8>)
 8009376:	785b      	ldrb	r3, [r3, #1]
 8009378:	2b08      	cmp	r3, #8
 800937a:	d008      	beq.n	800938e <DateTask+0x46e>
 800937c:	4b1a      	ldr	r3, [pc, #104]	; (80093e8 <DateTask+0x4c8>)
 800937e:	785b      	ldrb	r3, [r3, #1]
 8009380:	2b10      	cmp	r3, #16
 8009382:	d004      	beq.n	800938e <DateTask+0x46e>
 8009384:	4b18      	ldr	r3, [pc, #96]	; (80093e8 <DateTask+0x4c8>)
 8009386:	785b      	ldrb	r3, [r3, #1]
 8009388:	2b12      	cmp	r3, #18
 800938a:	f040 80a3 	bne.w	80094d4 <DateTask+0x5b4>
					{
						if((Date.Date&0x0F)<0x09)
 800938e:	4b16      	ldr	r3, [pc, #88]	; (80093e8 <DateTask+0x4c8>)
 8009390:	789b      	ldrb	r3, [r3, #2]
 8009392:	f003 030f 	and.w	r3, r3, #15
 8009396:	2b08      	cmp	r3, #8
 8009398:	dc2a      	bgt.n	80093f0 <DateTask+0x4d0>
						{
							Date.Date++;
 800939a:	4b13      	ldr	r3, [pc, #76]	; (80093e8 <DateTask+0x4c8>)
 800939c:	789b      	ldrb	r3, [r3, #2]
 800939e:	3301      	adds	r3, #1
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	4b11      	ldr	r3, [pc, #68]	; (80093e8 <DateTask+0x4c8>)
 80093a4:	709a      	strb	r2, [r3, #2]
							wh0802_set_ddram_address(0x00);
 80093a6:	2000      	movs	r0, #0
 80093a8:	f7fa ffdf 	bl	800436a <wh0802_set_ddram_address>
							wh0802_write_data_to_ram( 0x30| ((Date.Date>>4)&0x0F) );
 80093ac:	4b0e      	ldr	r3, [pc, #56]	; (80093e8 <DateTask+0x4c8>)
 80093ae:	789b      	ldrb	r3, [r3, #2]
 80093b0:	091b      	lsrs	r3, r3, #4
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	b25b      	sxtb	r3, r3
 80093b6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80093ba:	b25b      	sxtb	r3, r3
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fa ffe4 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_write_data_to_ram( 0x30| (Date.Date&0x0F) );
 80093c4:	4b08      	ldr	r3, [pc, #32]	; (80093e8 <DateTask+0x4c8>)
 80093c6:	789b      	ldrb	r3, [r3, #2]
 80093c8:	b25b      	sxtb	r3, r3
 80093ca:	f003 030f 	and.w	r3, r3, #15
 80093ce:	b25b      	sxtb	r3, r3
 80093d0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80093d4:	b25b      	sxtb	r3, r3
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fa ffd7 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_set_ddram_address(0x01);
 80093de:	2001      	movs	r0, #1
 80093e0:	f7fa ffc3 	bl	800436a <wh0802_set_ddram_address>
 80093e4:	e076      	b.n	80094d4 <DateTask+0x5b4>
 80093e6:	bf00      	nop
 80093e8:	20002c08 	.word	0x20002c08
 80093ec:	20002860 	.word	0x20002860
						}
						else
						{
							if(Date.Date==0x09)
 80093f0:	4b80      	ldr	r3, [pc, #512]	; (80095f4 <DateTask+0x6d4>)
 80093f2:	789b      	ldrb	r3, [r3, #2]
 80093f4:	2b09      	cmp	r3, #9
 80093f6:	d121      	bne.n	800943c <DateTask+0x51c>
							{
								Date.Date=0x10;
 80093f8:	4b7e      	ldr	r3, [pc, #504]	; (80095f4 <DateTask+0x6d4>)
 80093fa:	2210      	movs	r2, #16
 80093fc:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x00);
 80093fe:	2000      	movs	r0, #0
 8009400:	f7fa ffb3 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Date>>4)&0x0F) );
 8009404:	4b7b      	ldr	r3, [pc, #492]	; (80095f4 <DateTask+0x6d4>)
 8009406:	789b      	ldrb	r3, [r3, #2]
 8009408:	091b      	lsrs	r3, r3, #4
 800940a:	b2db      	uxtb	r3, r3
 800940c:	b25b      	sxtb	r3, r3
 800940e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009412:	b25b      	sxtb	r3, r3
 8009414:	b2db      	uxtb	r3, r3
 8009416:	4618      	mov	r0, r3
 8009418:	f7fa ffb8 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Date&0x0F) );
 800941c:	4b75      	ldr	r3, [pc, #468]	; (80095f4 <DateTask+0x6d4>)
 800941e:	789b      	ldrb	r3, [r3, #2]
 8009420:	b25b      	sxtb	r3, r3
 8009422:	f003 030f 	and.w	r3, r3, #15
 8009426:	b25b      	sxtb	r3, r3
 8009428:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800942c:	b25b      	sxtb	r3, r3
 800942e:	b2db      	uxtb	r3, r3
 8009430:	4618      	mov	r0, r3
 8009432:	f7fa ffab 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x01);
 8009436:	2001      	movs	r0, #1
 8009438:	f7fa ff97 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Date.Date==0x19)
 800943c:	4b6d      	ldr	r3, [pc, #436]	; (80095f4 <DateTask+0x6d4>)
 800943e:	789b      	ldrb	r3, [r3, #2]
 8009440:	2b19      	cmp	r3, #25
 8009442:	d121      	bne.n	8009488 <DateTask+0x568>
							{
								Date.Date=0x20;
 8009444:	4b6b      	ldr	r3, [pc, #428]	; (80095f4 <DateTask+0x6d4>)
 8009446:	2220      	movs	r2, #32
 8009448:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x00);
 800944a:	2000      	movs	r0, #0
 800944c:	f7fa ff8d 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Date>>4)&0x0F) );
 8009450:	4b68      	ldr	r3, [pc, #416]	; (80095f4 <DateTask+0x6d4>)
 8009452:	789b      	ldrb	r3, [r3, #2]
 8009454:	091b      	lsrs	r3, r3, #4
 8009456:	b2db      	uxtb	r3, r3
 8009458:	b25b      	sxtb	r3, r3
 800945a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800945e:	b25b      	sxtb	r3, r3
 8009460:	b2db      	uxtb	r3, r3
 8009462:	4618      	mov	r0, r3
 8009464:	f7fa ff92 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Date&0x0F) );
 8009468:	4b62      	ldr	r3, [pc, #392]	; (80095f4 <DateTask+0x6d4>)
 800946a:	789b      	ldrb	r3, [r3, #2]
 800946c:	b25b      	sxtb	r3, r3
 800946e:	f003 030f 	and.w	r3, r3, #15
 8009472:	b25b      	sxtb	r3, r3
 8009474:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009478:	b25b      	sxtb	r3, r3
 800947a:	b2db      	uxtb	r3, r3
 800947c:	4618      	mov	r0, r3
 800947e:	f7fa ff85 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x01);
 8009482:	2001      	movs	r0, #1
 8009484:	f7fa ff71 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Date.Date==0x29)
 8009488:	4b5a      	ldr	r3, [pc, #360]	; (80095f4 <DateTask+0x6d4>)
 800948a:	789b      	ldrb	r3, [r3, #2]
 800948c:	2b29      	cmp	r3, #41	; 0x29
 800948e:	d121      	bne.n	80094d4 <DateTask+0x5b4>
							{
								Date.Date=0x30;
 8009490:	4b58      	ldr	r3, [pc, #352]	; (80095f4 <DateTask+0x6d4>)
 8009492:	2230      	movs	r2, #48	; 0x30
 8009494:	709a      	strb	r2, [r3, #2]
								wh0802_set_ddram_address(0x00);
 8009496:	2000      	movs	r0, #0
 8009498:	f7fa ff67 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Date>>4)&0x0F) );
 800949c:	4b55      	ldr	r3, [pc, #340]	; (80095f4 <DateTask+0x6d4>)
 800949e:	789b      	ldrb	r3, [r3, #2]
 80094a0:	091b      	lsrs	r3, r3, #4
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	b25b      	sxtb	r3, r3
 80094a6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80094aa:	b25b      	sxtb	r3, r3
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fa ff6c 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Date&0x0F) );
 80094b4:	4b4f      	ldr	r3, [pc, #316]	; (80095f4 <DateTask+0x6d4>)
 80094b6:	789b      	ldrb	r3, [r3, #2]
 80094b8:	b25b      	sxtb	r3, r3
 80094ba:	f003 030f 	and.w	r3, r3, #15
 80094be:	b25b      	sxtb	r3, r3
 80094c0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80094c4:	b25b      	sxtb	r3, r3
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fa ff5f 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x01);
 80094ce:	2001      	movs	r0, #1
 80094d0:	f7fa ff4b 	bl	800436a <wh0802_set_ddram_address>
							}
						}
					}
				}
				if(ddram==0x04)
 80094d4:	4b48      	ldr	r3, [pc, #288]	; (80095f8 <DateTask+0x6d8>)
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	2b04      	cmp	r3, #4
 80094da:	d155      	bne.n	8009588 <DateTask+0x668>
				{
					if(Date.Month<0x12)
 80094dc:	4b45      	ldr	r3, [pc, #276]	; (80095f4 <DateTask+0x6d4>)
 80094de:	785b      	ldrb	r3, [r3, #1]
 80094e0:	2b11      	cmp	r3, #17
 80094e2:	d851      	bhi.n	8009588 <DateTask+0x668>
					{
						if((Date.Month&0x0F)<0x09)
 80094e4:	4b43      	ldr	r3, [pc, #268]	; (80095f4 <DateTask+0x6d4>)
 80094e6:	785b      	ldrb	r3, [r3, #1]
 80094e8:	f003 030f 	and.w	r3, r3, #15
 80094ec:	2b08      	cmp	r3, #8
 80094ee:	dc25      	bgt.n	800953c <DateTask+0x61c>
						{
							Date.Month++;
 80094f0:	4b40      	ldr	r3, [pc, #256]	; (80095f4 <DateTask+0x6d4>)
 80094f2:	785b      	ldrb	r3, [r3, #1]
 80094f4:	3301      	adds	r3, #1
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	4b3e      	ldr	r3, [pc, #248]	; (80095f4 <DateTask+0x6d4>)
 80094fa:	705a      	strb	r2, [r3, #1]
							wh0802_set_ddram_address(0x03);
 80094fc:	2003      	movs	r0, #3
 80094fe:	f7fa ff34 	bl	800436a <wh0802_set_ddram_address>
							wh0802_write_data_to_ram( 0x30| ((Date.Month>>4)&0x0F) );
 8009502:	4b3c      	ldr	r3, [pc, #240]	; (80095f4 <DateTask+0x6d4>)
 8009504:	785b      	ldrb	r3, [r3, #1]
 8009506:	091b      	lsrs	r3, r3, #4
 8009508:	b2db      	uxtb	r3, r3
 800950a:	b25b      	sxtb	r3, r3
 800950c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009510:	b25b      	sxtb	r3, r3
 8009512:	b2db      	uxtb	r3, r3
 8009514:	4618      	mov	r0, r3
 8009516:	f7fa ff39 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_write_data_to_ram( 0x30| (Date.Month&0x0F) );
 800951a:	4b36      	ldr	r3, [pc, #216]	; (80095f4 <DateTask+0x6d4>)
 800951c:	785b      	ldrb	r3, [r3, #1]
 800951e:	b25b      	sxtb	r3, r3
 8009520:	f003 030f 	and.w	r3, r3, #15
 8009524:	b25b      	sxtb	r3, r3
 8009526:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800952a:	b25b      	sxtb	r3, r3
 800952c:	b2db      	uxtb	r3, r3
 800952e:	4618      	mov	r0, r3
 8009530:	f7fa ff2c 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_set_ddram_address(0x04);
 8009534:	2004      	movs	r0, #4
 8009536:	f7fa ff18 	bl	800436a <wh0802_set_ddram_address>
 800953a:	e025      	b.n	8009588 <DateTask+0x668>
						}
						else
						{
							if(Date.Month==0x09)
 800953c:	4b2d      	ldr	r3, [pc, #180]	; (80095f4 <DateTask+0x6d4>)
 800953e:	785b      	ldrb	r3, [r3, #1]
 8009540:	2b09      	cmp	r3, #9
 8009542:	d121      	bne.n	8009588 <DateTask+0x668>
							{
								Date.Month=0x10;
 8009544:	4b2b      	ldr	r3, [pc, #172]	; (80095f4 <DateTask+0x6d4>)
 8009546:	2210      	movs	r2, #16
 8009548:	705a      	strb	r2, [r3, #1]
								wh0802_set_ddram_address(0x03);
 800954a:	2003      	movs	r0, #3
 800954c:	f7fa ff0d 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Month>>4)&0x0F) );
 8009550:	4b28      	ldr	r3, [pc, #160]	; (80095f4 <DateTask+0x6d4>)
 8009552:	785b      	ldrb	r3, [r3, #1]
 8009554:	091b      	lsrs	r3, r3, #4
 8009556:	b2db      	uxtb	r3, r3
 8009558:	b25b      	sxtb	r3, r3
 800955a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800955e:	b25b      	sxtb	r3, r3
 8009560:	b2db      	uxtb	r3, r3
 8009562:	4618      	mov	r0, r3
 8009564:	f7fa ff12 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Month&0x0F) );
 8009568:	4b22      	ldr	r3, [pc, #136]	; (80095f4 <DateTask+0x6d4>)
 800956a:	785b      	ldrb	r3, [r3, #1]
 800956c:	b25b      	sxtb	r3, r3
 800956e:	f003 030f 	and.w	r3, r3, #15
 8009572:	b25b      	sxtb	r3, r3
 8009574:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009578:	b25b      	sxtb	r3, r3
 800957a:	b2db      	uxtb	r3, r3
 800957c:	4618      	mov	r0, r3
 800957e:	f7fa ff05 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x04);
 8009582:	2004      	movs	r0, #4
 8009584:	f7fa fef1 	bl	800436a <wh0802_set_ddram_address>
							}
						}
					}
				}
				if(ddram==0x07)
 8009588:	4b1b      	ldr	r3, [pc, #108]	; (80095f8 <DateTask+0x6d8>)
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	2b07      	cmp	r3, #7
 800958e:	f040 80a7 	bne.w	80096e0 <DateTask+0x7c0>
				{
					if(Date.Year<0x36)
 8009592:	4b18      	ldr	r3, [pc, #96]	; (80095f4 <DateTask+0x6d4>)
 8009594:	78db      	ldrb	r3, [r3, #3]
 8009596:	2b35      	cmp	r3, #53	; 0x35
 8009598:	f200 80a2 	bhi.w	80096e0 <DateTask+0x7c0>
					{
						if((Date.Year&0x0F)<0x09)
 800959c:	4b15      	ldr	r3, [pc, #84]	; (80095f4 <DateTask+0x6d4>)
 800959e:	78db      	ldrb	r3, [r3, #3]
 80095a0:	f003 030f 	and.w	r3, r3, #15
 80095a4:	2b08      	cmp	r3, #8
 80095a6:	dc29      	bgt.n	80095fc <DateTask+0x6dc>
						{
							Date.Year++;
 80095a8:	4b12      	ldr	r3, [pc, #72]	; (80095f4 <DateTask+0x6d4>)
 80095aa:	78db      	ldrb	r3, [r3, #3]
 80095ac:	3301      	adds	r3, #1
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	4b10      	ldr	r3, [pc, #64]	; (80095f4 <DateTask+0x6d4>)
 80095b2:	70da      	strb	r2, [r3, #3]
							wh0802_set_ddram_address(0x06);
 80095b4:	2006      	movs	r0, #6
 80095b6:	f7fa fed8 	bl	800436a <wh0802_set_ddram_address>
							wh0802_write_data_to_ram( 0x30| ((Date.Year>>4)&0x0F) );
 80095ba:	4b0e      	ldr	r3, [pc, #56]	; (80095f4 <DateTask+0x6d4>)
 80095bc:	78db      	ldrb	r3, [r3, #3]
 80095be:	091b      	lsrs	r3, r3, #4
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	b25b      	sxtb	r3, r3
 80095c4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80095c8:	b25b      	sxtb	r3, r3
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fa fedd 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_write_data_to_ram( 0x30| (Date.Year&0x0F) );
 80095d2:	4b08      	ldr	r3, [pc, #32]	; (80095f4 <DateTask+0x6d4>)
 80095d4:	78db      	ldrb	r3, [r3, #3]
 80095d6:	b25b      	sxtb	r3, r3
 80095d8:	f003 030f 	and.w	r3, r3, #15
 80095dc:	b25b      	sxtb	r3, r3
 80095de:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80095e2:	b25b      	sxtb	r3, r3
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7fa fed0 	bl	800438c <wh0802_write_data_to_ram>
							wh0802_set_ddram_address(0x07);
 80095ec:	2007      	movs	r0, #7
 80095ee:	f7fa febc 	bl	800436a <wh0802_set_ddram_address>
 80095f2:	e075      	b.n	80096e0 <DateTask+0x7c0>
 80095f4:	20002c08 	.word	0x20002c08
 80095f8:	20002860 	.word	0x20002860
						}
						else
						{
							if(Date.Year==0x09)
 80095fc:	4b44      	ldr	r3, [pc, #272]	; (8009710 <DateTask+0x7f0>)
 80095fe:	78db      	ldrb	r3, [r3, #3]
 8009600:	2b09      	cmp	r3, #9
 8009602:	d121      	bne.n	8009648 <DateTask+0x728>
							{
								Date.Year=0x10;
 8009604:	4b42      	ldr	r3, [pc, #264]	; (8009710 <DateTask+0x7f0>)
 8009606:	2210      	movs	r2, #16
 8009608:	70da      	strb	r2, [r3, #3]
								wh0802_set_ddram_address(0x06);
 800960a:	2006      	movs	r0, #6
 800960c:	f7fa fead 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Year>>4)&0x0F) );
 8009610:	4b3f      	ldr	r3, [pc, #252]	; (8009710 <DateTask+0x7f0>)
 8009612:	78db      	ldrb	r3, [r3, #3]
 8009614:	091b      	lsrs	r3, r3, #4
 8009616:	b2db      	uxtb	r3, r3
 8009618:	b25b      	sxtb	r3, r3
 800961a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800961e:	b25b      	sxtb	r3, r3
 8009620:	b2db      	uxtb	r3, r3
 8009622:	4618      	mov	r0, r3
 8009624:	f7fa feb2 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Year&0x0F) );
 8009628:	4b39      	ldr	r3, [pc, #228]	; (8009710 <DateTask+0x7f0>)
 800962a:	78db      	ldrb	r3, [r3, #3]
 800962c:	b25b      	sxtb	r3, r3
 800962e:	f003 030f 	and.w	r3, r3, #15
 8009632:	b25b      	sxtb	r3, r3
 8009634:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009638:	b25b      	sxtb	r3, r3
 800963a:	b2db      	uxtb	r3, r3
 800963c:	4618      	mov	r0, r3
 800963e:	f7fa fea5 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 8009642:	2007      	movs	r0, #7
 8009644:	f7fa fe91 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Date.Year==0x19)
 8009648:	4b31      	ldr	r3, [pc, #196]	; (8009710 <DateTask+0x7f0>)
 800964a:	78db      	ldrb	r3, [r3, #3]
 800964c:	2b19      	cmp	r3, #25
 800964e:	d121      	bne.n	8009694 <DateTask+0x774>
							{
								Date.Year=0x20;
 8009650:	4b2f      	ldr	r3, [pc, #188]	; (8009710 <DateTask+0x7f0>)
 8009652:	2220      	movs	r2, #32
 8009654:	70da      	strb	r2, [r3, #3]
								wh0802_set_ddram_address(0x06);
 8009656:	2006      	movs	r0, #6
 8009658:	f7fa fe87 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Year>>4)&0x0F) );
 800965c:	4b2c      	ldr	r3, [pc, #176]	; (8009710 <DateTask+0x7f0>)
 800965e:	78db      	ldrb	r3, [r3, #3]
 8009660:	091b      	lsrs	r3, r3, #4
 8009662:	b2db      	uxtb	r3, r3
 8009664:	b25b      	sxtb	r3, r3
 8009666:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800966a:	b25b      	sxtb	r3, r3
 800966c:	b2db      	uxtb	r3, r3
 800966e:	4618      	mov	r0, r3
 8009670:	f7fa fe8c 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Year&0x0F) );
 8009674:	4b26      	ldr	r3, [pc, #152]	; (8009710 <DateTask+0x7f0>)
 8009676:	78db      	ldrb	r3, [r3, #3]
 8009678:	b25b      	sxtb	r3, r3
 800967a:	f003 030f 	and.w	r3, r3, #15
 800967e:	b25b      	sxtb	r3, r3
 8009680:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8009684:	b25b      	sxtb	r3, r3
 8009686:	b2db      	uxtb	r3, r3
 8009688:	4618      	mov	r0, r3
 800968a:	f7fa fe7f 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 800968e:	2007      	movs	r0, #7
 8009690:	f7fa fe6b 	bl	800436a <wh0802_set_ddram_address>
							}
							if(Date.Year==0x29)
 8009694:	4b1e      	ldr	r3, [pc, #120]	; (8009710 <DateTask+0x7f0>)
 8009696:	78db      	ldrb	r3, [r3, #3]
 8009698:	2b29      	cmp	r3, #41	; 0x29
 800969a:	d121      	bne.n	80096e0 <DateTask+0x7c0>
							{
								Date.Year=0x30;
 800969c:	4b1c      	ldr	r3, [pc, #112]	; (8009710 <DateTask+0x7f0>)
 800969e:	2230      	movs	r2, #48	; 0x30
 80096a0:	70da      	strb	r2, [r3, #3]
								wh0802_set_ddram_address(0x06);
 80096a2:	2006      	movs	r0, #6
 80096a4:	f7fa fe61 	bl	800436a <wh0802_set_ddram_address>
								wh0802_write_data_to_ram( 0x30| ((Date.Year>>4)&0x0F) );
 80096a8:	4b19      	ldr	r3, [pc, #100]	; (8009710 <DateTask+0x7f0>)
 80096aa:	78db      	ldrb	r3, [r3, #3]
 80096ac:	091b      	lsrs	r3, r3, #4
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	b25b      	sxtb	r3, r3
 80096b2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80096b6:	b25b      	sxtb	r3, r3
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fa fe66 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_write_data_to_ram( 0x30| (Date.Year&0x0F) );
 80096c0:	4b13      	ldr	r3, [pc, #76]	; (8009710 <DateTask+0x7f0>)
 80096c2:	78db      	ldrb	r3, [r3, #3]
 80096c4:	b25b      	sxtb	r3, r3
 80096c6:	f003 030f 	and.w	r3, r3, #15
 80096ca:	b25b      	sxtb	r3, r3
 80096cc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80096d0:	b25b      	sxtb	r3, r3
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fa fe59 	bl	800438c <wh0802_write_data_to_ram>
								wh0802_set_ddram_address(0x07);
 80096da:	2007      	movs	r0, #7
 80096dc:	f7fa fe45 	bl	800436a <wh0802_set_ddram_address>
							}
						}
					}
				}
			}
			if(event2.value.v==BUTTON6_PRESSED)
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	2b06      	cmp	r3, #6
 80096e4:	f47f ac25 	bne.w	8008f32 <DateTask+0x12>
			{
				if((ddram==0x01||ddram==0x04))
 80096e8:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <DateTask+0x7f4>)
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d003      	beq.n	80096f8 <DateTask+0x7d8>
 80096f0:	4b08      	ldr	r3, [pc, #32]	; (8009714 <DateTask+0x7f4>)
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b04      	cmp	r3, #4
 80096f6:	d105      	bne.n	8009704 <DateTask+0x7e4>
				{
					ddram=ddram+0x03;
 80096f8:	4b06      	ldr	r3, [pc, #24]	; (8009714 <DateTask+0x7f4>)
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	3303      	adds	r3, #3
 80096fe:	b2da      	uxtb	r2, r3
 8009700:	4b04      	ldr	r3, [pc, #16]	; (8009714 <DateTask+0x7f4>)
 8009702:	701a      	strb	r2, [r3, #0]
				}
				wh0802_set_ddram_address(ddram);
 8009704:	4b03      	ldr	r3, [pc, #12]	; (8009714 <DateTask+0x7f4>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	4618      	mov	r0, r3
 800970a:	f7fa fe2e 	bl	800436a <wh0802_set_ddram_address>
		event2 = osMessageGet(pos_Queue, 100);
 800970e:	e410      	b.n	8008f32 <DateTask+0x12>
 8009710:	20002c08 	.word	0x20002c08
 8009714:	20002860 	.word	0x20002860

08009718 <TimeDisplayTask>:

}

// Обработчик задачи установки времени на дисплее
void TimeDisplayTask(void const * argument)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
	osEvent event3;
	osThreadSuspend(TimeDisplayTaskHandle); // Приостанавливаем задачу
 8009720:	4b44      	ldr	r3, [pc, #272]	; (8009834 <TimeDisplayTask+0x11c>)
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4618      	mov	r0, r3
 8009726:	f7fb f977 	bl	8004a18 <osThreadSuspend>

	for(;;)
	{
		event3 = osMessageGet(pos_Queue, 100);
 800972a:	4b43      	ldr	r3, [pc, #268]	; (8009838 <TimeDisplayTask+0x120>)
 800972c:	6819      	ldr	r1, [r3, #0]
 800972e:	f107 030c 	add.w	r3, r7, #12
 8009732:	2264      	movs	r2, #100	; 0x64
 8009734:	4618      	mov	r0, r3
 8009736:	f7fb f8fb 	bl	8004930 <osMessageGet>
		if (event3.status == osEventMessage)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2b10      	cmp	r3, #16
 800973e:	d1f4      	bne.n	800972a <TimeDisplayTask+0x12>
		{
			if(event3.value.v==BUTTON2_PRESSED)
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	2b02      	cmp	r3, #2
 8009744:	d11a      	bne.n	800977c <TimeDisplayTask+0x64>
			{
				LED8_OFF;
 8009746:	2200      	movs	r2, #0
 8009748:	2180      	movs	r1, #128	; 0x80
 800974a:	483c      	ldr	r0, [pc, #240]	; (800983c <TimeDisplayTask+0x124>)
 800974c:	f7f8 f8df 	bl	800190e <HAL_GPIO_WritePin>
				wh0802_display_control(DISPLAY_ON, CURSOR_OFF, BLINKING_OFF);
 8009750:	2200      	movs	r2, #0
 8009752:	2100      	movs	r1, #0
 8009754:	2004      	movs	r0, #4
 8009756:	f7fa fdd2 	bl	80042fe <wh0802_display_control>
				osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 800975a:	4b39      	ldr	r3, [pc, #228]	; (8009840 <TimeDisplayTask+0x128>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f241 3188 	movw	r1, #5000	; 0x1388
 8009762:	4618      	mov	r0, r3
 8009764:	f7fa ffa4 	bl	80046b0 <osTimerStart>
				osThreadResume(DisplayHandle);
 8009768:	4b36      	ldr	r3, [pc, #216]	; (8009844 <TimeDisplayTask+0x12c>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4618      	mov	r0, r3
 800976e:	f7fb f95f 	bl	8004a30 <osThreadResume>
				osThreadSuspend(TimeDisplayTaskHandle);
 8009772:	4b30      	ldr	r3, [pc, #192]	; (8009834 <TimeDisplayTask+0x11c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4618      	mov	r0, r3
 8009778:	f7fb f94e 	bl	8004a18 <osThreadSuspend>
			}
			if(event3.value.v==BUTTON3_PRESSED)
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	2b03      	cmp	r3, #3
 8009780:	d129      	bne.n	80097d6 <TimeDisplayTask+0xbe>
			{
				if(desktop_time_state==DESKTOP_TIME_ON)
 8009782:	4b31      	ldr	r3, [pc, #196]	; (8009848 <TimeDisplayTask+0x130>)
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d114      	bne.n	80097b4 <TimeDisplayTask+0x9c>
				{
					desktop_time_state = DESKTOP_TIME_OFF;
 800978a:	4b2f      	ldr	r3, [pc, #188]	; (8009848 <TimeDisplayTask+0x130>)
 800978c:	2200      	movs	r2, #0
 800978e:	701a      	strb	r2, [r3, #0]
					wh0802_clear_display();
 8009790:	f7fa fd96 	bl	80042c0 <wh0802_clear_display>
					wh0802_set_ddram_address(0x00);
 8009794:	2000      	movs	r0, #0
 8009796:	f7fa fde8 	bl	800436a <wh0802_set_ddram_address>
					wh0802_write_data_to_ram('O');
 800979a:	204f      	movs	r0, #79	; 0x4f
 800979c:	f7fa fdf6 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_write_data_to_ram('F');
 80097a0:	2046      	movs	r0, #70	; 0x46
 80097a2:	f7fa fdf3 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_write_data_to_ram('F');
 80097a6:	2046      	movs	r0, #70	; 0x46
 80097a8:	f7fa fdf0 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_set_ddram_address(0x00);
 80097ac:	2000      	movs	r0, #0
 80097ae:	f7fa fddc 	bl	800436a <wh0802_set_ddram_address>
 80097b2:	e010      	b.n	80097d6 <TimeDisplayTask+0xbe>
				}
				else
				{
					desktop_time_state = DESKTOP_TIME_ON;
 80097b4:	4b24      	ldr	r3, [pc, #144]	; (8009848 <TimeDisplayTask+0x130>)
 80097b6:	2201      	movs	r2, #1
 80097b8:	701a      	strb	r2, [r3, #0]
					wh0802_clear_display();
 80097ba:	f7fa fd81 	bl	80042c0 <wh0802_clear_display>
					wh0802_set_ddram_address(0x00);
 80097be:	2000      	movs	r0, #0
 80097c0:	f7fa fdd3 	bl	800436a <wh0802_set_ddram_address>
					wh0802_write_data_to_ram('O');
 80097c4:	204f      	movs	r0, #79	; 0x4f
 80097c6:	f7fa fde1 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_write_data_to_ram('N');
 80097ca:	204e      	movs	r0, #78	; 0x4e
 80097cc:	f7fa fdde 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_set_ddram_address(0x00);
 80097d0:	2000      	movs	r0, #0
 80097d2:	f7fa fdca 	bl	800436a <wh0802_set_ddram_address>
				}
			}
			if(event3.value.v==BUTTON5_PRESSED)
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	2b05      	cmp	r3, #5
 80097da:	d1a6      	bne.n	800972a <TimeDisplayTask+0x12>
			{
				if(desktop_time_state==DESKTOP_TIME_ON)
 80097dc:	4b1a      	ldr	r3, [pc, #104]	; (8009848 <TimeDisplayTask+0x130>)
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d114      	bne.n	800980e <TimeDisplayTask+0xf6>
				{
					desktop_time_state = DESKTOP_TIME_OFF;
 80097e4:	4b18      	ldr	r3, [pc, #96]	; (8009848 <TimeDisplayTask+0x130>)
 80097e6:	2200      	movs	r2, #0
 80097e8:	701a      	strb	r2, [r3, #0]
					wh0802_clear_display();
 80097ea:	f7fa fd69 	bl	80042c0 <wh0802_clear_display>
					wh0802_set_ddram_address(0x00);
 80097ee:	2000      	movs	r0, #0
 80097f0:	f7fa fdbb 	bl	800436a <wh0802_set_ddram_address>
					wh0802_write_data_to_ram('O');
 80097f4:	204f      	movs	r0, #79	; 0x4f
 80097f6:	f7fa fdc9 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_write_data_to_ram('F');
 80097fa:	2046      	movs	r0, #70	; 0x46
 80097fc:	f7fa fdc6 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_write_data_to_ram('F');
 8009800:	2046      	movs	r0, #70	; 0x46
 8009802:	f7fa fdc3 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_set_ddram_address(0x00);
 8009806:	2000      	movs	r0, #0
 8009808:	f7fa fdaf 	bl	800436a <wh0802_set_ddram_address>
 800980c:	e78d      	b.n	800972a <TimeDisplayTask+0x12>
				}
				else
				{
					desktop_time_state = DESKTOP_TIME_ON;
 800980e:	4b0e      	ldr	r3, [pc, #56]	; (8009848 <TimeDisplayTask+0x130>)
 8009810:	2201      	movs	r2, #1
 8009812:	701a      	strb	r2, [r3, #0]
					wh0802_clear_display();
 8009814:	f7fa fd54 	bl	80042c0 <wh0802_clear_display>
					wh0802_set_ddram_address(0x00);
 8009818:	2000      	movs	r0, #0
 800981a:	f7fa fda6 	bl	800436a <wh0802_set_ddram_address>
					wh0802_write_data_to_ram('O');
 800981e:	204f      	movs	r0, #79	; 0x4f
 8009820:	f7fa fdb4 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_write_data_to_ram('N');
 8009824:	204e      	movs	r0, #78	; 0x4e
 8009826:	f7fa fdb1 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_set_ddram_address(0x00);
 800982a:	2000      	movs	r0, #0
 800982c:	f7fa fd9d 	bl	800436a <wh0802_set_ddram_address>
		event3 = osMessageGet(pos_Queue, 100);
 8009830:	e77b      	b.n	800972a <TimeDisplayTask+0x12>
 8009832:	bf00      	nop
 8009834:	20002958 	.word	0x20002958
 8009838:	200028b4 	.word	0x200028b4
 800983c:	40010800 	.word	0x40010800
 8009840:	200028b0 	.word	0x200028b0
 8009844:	2000295c 	.word	0x2000295c
 8009848:	20000010 	.word	0x20000010

0800984c <DateDisplayTask>:
	}
}

// Обработчик задачи установки даты на дисплее
void DateDisplayTask(void const * argument)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
	osEvent event4;
	osThreadSuspend(DateDisplayTaskHandle); // Приостанавливаем задачу
 8009854:	4b44      	ldr	r3, [pc, #272]	; (8009968 <DateDisplayTask+0x11c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4618      	mov	r0, r3
 800985a:	f7fb f8dd 	bl	8004a18 <osThreadSuspend>

	for(;;)
	{
		event4 = osMessageGet(pos_Queue, 100);
 800985e:	4b43      	ldr	r3, [pc, #268]	; (800996c <DateDisplayTask+0x120>)
 8009860:	6819      	ldr	r1, [r3, #0]
 8009862:	f107 030c 	add.w	r3, r7, #12
 8009866:	2264      	movs	r2, #100	; 0x64
 8009868:	4618      	mov	r0, r3
 800986a:	f7fb f861 	bl	8004930 <osMessageGet>
		if (event4.status == osEventMessage)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2b10      	cmp	r3, #16
 8009872:	d1f4      	bne.n	800985e <DateDisplayTask+0x12>
		{
			if(event4.value.v==BUTTON2_PRESSED)
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	2b02      	cmp	r3, #2
 8009878:	d11a      	bne.n	80098b0 <DateDisplayTask+0x64>
			{
				LED8_OFF;
 800987a:	2200      	movs	r2, #0
 800987c:	2180      	movs	r1, #128	; 0x80
 800987e:	483c      	ldr	r0, [pc, #240]	; (8009970 <DateDisplayTask+0x124>)
 8009880:	f7f8 f845 	bl	800190e <HAL_GPIO_WritePin>
				wh0802_display_control(DISPLAY_ON, CURSOR_OFF, BLINKING_OFF);
 8009884:	2200      	movs	r2, #0
 8009886:	2100      	movs	r1, #0
 8009888:	2004      	movs	r0, #4
 800988a:	f7fa fd38 	bl	80042fe <wh0802_display_control>
				osTimerStart(DisplayTimerHandle,DISPLAY_TIMER);
 800988e:	4b39      	ldr	r3, [pc, #228]	; (8009974 <DateDisplayTask+0x128>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f241 3188 	movw	r1, #5000	; 0x1388
 8009896:	4618      	mov	r0, r3
 8009898:	f7fa ff0a 	bl	80046b0 <osTimerStart>
				osThreadResume(DisplayHandle);
 800989c:	4b36      	ldr	r3, [pc, #216]	; (8009978 <DateDisplayTask+0x12c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fb f8c5 	bl	8004a30 <osThreadResume>
				osThreadSuspend(DateDisplayTaskHandle);
 80098a6:	4b30      	ldr	r3, [pc, #192]	; (8009968 <DateDisplayTask+0x11c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fb f8b4 	bl	8004a18 <osThreadSuspend>
			}
			if(event4.value.v==BUTTON3_PRESSED)
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	2b03      	cmp	r3, #3
 80098b4:	d129      	bne.n	800990a <DateDisplayTask+0xbe>
			{
				if(desktop_date_state==DESKTOP_DATE_ON)
 80098b6:	4b31      	ldr	r3, [pc, #196]	; (800997c <DateDisplayTask+0x130>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d114      	bne.n	80098e8 <DateDisplayTask+0x9c>
				{
					desktop_date_state = DESKTOP_DATE_OFF;
 80098be:	4b2f      	ldr	r3, [pc, #188]	; (800997c <DateDisplayTask+0x130>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	701a      	strb	r2, [r3, #0]
					wh0802_clear_display();
 80098c4:	f7fa fcfc 	bl	80042c0 <wh0802_clear_display>
					wh0802_set_ddram_address(0x00);
 80098c8:	2000      	movs	r0, #0
 80098ca:	f7fa fd4e 	bl	800436a <wh0802_set_ddram_address>
					wh0802_write_data_to_ram('O');
 80098ce:	204f      	movs	r0, #79	; 0x4f
 80098d0:	f7fa fd5c 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_write_data_to_ram('F');
 80098d4:	2046      	movs	r0, #70	; 0x46
 80098d6:	f7fa fd59 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_write_data_to_ram('F');
 80098da:	2046      	movs	r0, #70	; 0x46
 80098dc:	f7fa fd56 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_set_ddram_address(0x00);
 80098e0:	2000      	movs	r0, #0
 80098e2:	f7fa fd42 	bl	800436a <wh0802_set_ddram_address>
 80098e6:	e010      	b.n	800990a <DateDisplayTask+0xbe>
				}
				else
				{
					desktop_date_state = DESKTOP_DATE_ON;
 80098e8:	4b24      	ldr	r3, [pc, #144]	; (800997c <DateDisplayTask+0x130>)
 80098ea:	2201      	movs	r2, #1
 80098ec:	701a      	strb	r2, [r3, #0]
					wh0802_clear_display();
 80098ee:	f7fa fce7 	bl	80042c0 <wh0802_clear_display>
					wh0802_set_ddram_address(0x00);
 80098f2:	2000      	movs	r0, #0
 80098f4:	f7fa fd39 	bl	800436a <wh0802_set_ddram_address>
					wh0802_write_data_to_ram('O');
 80098f8:	204f      	movs	r0, #79	; 0x4f
 80098fa:	f7fa fd47 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_write_data_to_ram('N');
 80098fe:	204e      	movs	r0, #78	; 0x4e
 8009900:	f7fa fd44 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_set_ddram_address(0x00);
 8009904:	2000      	movs	r0, #0
 8009906:	f7fa fd30 	bl	800436a <wh0802_set_ddram_address>
				}
			}
			if(event4.value.v==BUTTON5_PRESSED)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	2b05      	cmp	r3, #5
 800990e:	d1a6      	bne.n	800985e <DateDisplayTask+0x12>
			{
				if(desktop_date_state==DESKTOP_DATE_ON)
 8009910:	4b1a      	ldr	r3, [pc, #104]	; (800997c <DateDisplayTask+0x130>)
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d114      	bne.n	8009942 <DateDisplayTask+0xf6>
				{
					desktop_date_state = DESKTOP_DATE_OFF;
 8009918:	4b18      	ldr	r3, [pc, #96]	; (800997c <DateDisplayTask+0x130>)
 800991a:	2200      	movs	r2, #0
 800991c:	701a      	strb	r2, [r3, #0]
					wh0802_clear_display();
 800991e:	f7fa fccf 	bl	80042c0 <wh0802_clear_display>
					wh0802_set_ddram_address(0x00);
 8009922:	2000      	movs	r0, #0
 8009924:	f7fa fd21 	bl	800436a <wh0802_set_ddram_address>
					wh0802_write_data_to_ram('O');
 8009928:	204f      	movs	r0, #79	; 0x4f
 800992a:	f7fa fd2f 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_write_data_to_ram('F');
 800992e:	2046      	movs	r0, #70	; 0x46
 8009930:	f7fa fd2c 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_write_data_to_ram('F');
 8009934:	2046      	movs	r0, #70	; 0x46
 8009936:	f7fa fd29 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_set_ddram_address(0x00);
 800993a:	2000      	movs	r0, #0
 800993c:	f7fa fd15 	bl	800436a <wh0802_set_ddram_address>
 8009940:	e78d      	b.n	800985e <DateDisplayTask+0x12>
				}
				else
				{
					desktop_date_state = DESKTOP_DATE_ON;
 8009942:	4b0e      	ldr	r3, [pc, #56]	; (800997c <DateDisplayTask+0x130>)
 8009944:	2201      	movs	r2, #1
 8009946:	701a      	strb	r2, [r3, #0]
					wh0802_clear_display();
 8009948:	f7fa fcba 	bl	80042c0 <wh0802_clear_display>
					wh0802_set_ddram_address(0x00);
 800994c:	2000      	movs	r0, #0
 800994e:	f7fa fd0c 	bl	800436a <wh0802_set_ddram_address>
					wh0802_write_data_to_ram('O');
 8009952:	204f      	movs	r0, #79	; 0x4f
 8009954:	f7fa fd1a 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_write_data_to_ram('N');
 8009958:	204e      	movs	r0, #78	; 0x4e
 800995a:	f7fa fd17 	bl	800438c <wh0802_write_data_to_ram>
					wh0802_set_ddram_address(0x00);
 800995e:	2000      	movs	r0, #0
 8009960:	f7fa fd03 	bl	800436a <wh0802_set_ddram_address>
		event4 = osMessageGet(pos_Queue, 100);
 8009964:	e77b      	b.n	800985e <DateDisplayTask+0x12>
 8009966:	bf00      	nop
 8009968:	20002960 	.word	0x20002960
 800996c:	200028b4 	.word	0x200028b4
 8009970:	40010800 	.word	0x40010800
 8009974:	200028b0 	.word	0x200028b0
 8009978:	2000295c 	.word	0x2000295c
 800997c:	20000011 	.word	0x20000011

08009980 <DisplayTimer>:
	}
}

// Обработчик таймера возврата рабочего стола
void DisplayTimer(void const * argument)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
	LED8_OFF;
 8009988:	2200      	movs	r2, #0
 800998a:	2180      	movs	r1, #128	; 0x80
 800998c:	4809      	ldr	r0, [pc, #36]	; (80099b4 <DisplayTimer+0x34>)
 800998e:	f7f7 ffbe 	bl	800190e <HAL_GPIO_WritePin>
	Desktop = DESKTOP_ON;
 8009992:	4b09      	ldr	r3, [pc, #36]	; (80099b8 <DisplayTimer+0x38>)
 8009994:	2201      	movs	r2, #1
 8009996:	701a      	strb	r2, [r3, #0]
	PositionState = 0;
 8009998:	4b08      	ldr	r3, [pc, #32]	; (80099bc <DisplayTimer+0x3c>)
 800999a:	2200      	movs	r2, #0
 800999c:	701a      	strb	r2, [r3, #0]
	osThreadResume(TimeMenuHandle);
 800999e:	4b08      	ldr	r3, [pc, #32]	; (80099c0 <DisplayTimer+0x40>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fb f844 	bl	8004a30 <osThreadResume>
	wh0802_clear_display();
 80099a8:	f7fa fc8a 	bl	80042c0 <wh0802_clear_display>
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	40010800 	.word	0x40010800
 80099b8:	20002a05 	.word	0x20002a05
 80099bc:	20002a04 	.word	0x20002a04
 80099c0:	20002964 	.word	0x20002964

080099c4 <Keyboard>:
extern uint8_t read_buf[20];


// Задача для обработки клавиатуры
void Keyboard(void const * argument)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
	KeyBoardID = osThreadGetId();
 80099cc:	f7fa fe20 	bl	8004610 <osThreadGetId>
 80099d0:	4603      	mov	r3, r0
 80099d2:	4aaf      	ldr	r2, [pc, #700]	; (8009c90 <Keyboard+0x2cc>)
 80099d4:	6013      	str	r3, [r2, #0]
	
	for(;;)
	{
	 if(BUTTON1_READ==GPIO_PIN_RESET)
 80099d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80099da:	48ae      	ldr	r0, [pc, #696]	; (8009c94 <Keyboard+0x2d0>)
 80099dc:	f7f7 ff80 	bl	80018e0 <HAL_GPIO_ReadPin>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d146      	bne.n	8009a74 <Keyboard+0xb0>
		{
			if(button_state1<2) //проверяем счетчик времени нажатия кнопки
 80099e6:	4bac      	ldr	r3, [pc, #688]	; (8009c98 <Keyboard+0x2d4>)
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d805      	bhi.n	80099fa <Keyboard+0x36>
			{
				button_state1++;
 80099ee:	4baa      	ldr	r3, [pc, #680]	; (8009c98 <Keyboard+0x2d4>)
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	3301      	adds	r3, #1
 80099f4:	b2da      	uxtb	r2, r3
 80099f6:	4ba8      	ldr	r3, [pc, #672]	; (8009c98 <Keyboard+0x2d4>)
 80099f8:	701a      	strb	r2, [r3, #0]
			}
			
			if(button_state1==1)
 80099fa:	4ba7      	ldr	r3, [pc, #668]	; (8009c98 <Keyboard+0x2d4>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d142      	bne.n	8009a88 <Keyboard+0xc4>
			{
				osMessagePut(pos_Queue, BUTTON1_PRESSED, 100);
 8009a02:	4ba6      	ldr	r3, [pc, #664]	; (8009c9c <Keyboard+0x2d8>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2264      	movs	r2, #100	; 0x64
 8009a08:	2101      	movs	r1, #1
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7fa ff50 	bl	80048b0 <osMessagePut>
				//dma_buf[0]='a';
				//dma_buf[1]='t';

				dma_buf[0]='A';
 8009a10:	4ba3      	ldr	r3, [pc, #652]	; (8009ca0 <Keyboard+0x2dc>)
 8009a12:	2241      	movs	r2, #65	; 0x41
 8009a14:	701a      	strb	r2, [r3, #0]
				dma_buf[1]='T';
 8009a16:	4ba2      	ldr	r3, [pc, #648]	; (8009ca0 <Keyboard+0x2dc>)
 8009a18:	2254      	movs	r2, #84	; 0x54
 8009a1a:	705a      	strb	r2, [r3, #1]
				dma_buf[2]='+';
 8009a1c:	4ba0      	ldr	r3, [pc, #640]	; (8009ca0 <Keyboard+0x2dc>)
 8009a1e:	222b      	movs	r2, #43	; 0x2b
 8009a20:	709a      	strb	r2, [r3, #2]
				dma_buf[3]='C';
 8009a22:	4b9f      	ldr	r3, [pc, #636]	; (8009ca0 <Keyboard+0x2dc>)
 8009a24:	2243      	movs	r2, #67	; 0x43
 8009a26:	70da      	strb	r2, [r3, #3]
				dma_buf[4]='W';
 8009a28:	4b9d      	ldr	r3, [pc, #628]	; (8009ca0 <Keyboard+0x2dc>)
 8009a2a:	2257      	movs	r2, #87	; 0x57
 8009a2c:	711a      	strb	r2, [r3, #4]
				dma_buf[5]='M';
 8009a2e:	4b9c      	ldr	r3, [pc, #624]	; (8009ca0 <Keyboard+0x2dc>)
 8009a30:	224d      	movs	r2, #77	; 0x4d
 8009a32:	715a      	strb	r2, [r3, #5]
				dma_buf[6]='O';
 8009a34:	4b9a      	ldr	r3, [pc, #616]	; (8009ca0 <Keyboard+0x2dc>)
 8009a36:	224f      	movs	r2, #79	; 0x4f
 8009a38:	719a      	strb	r2, [r3, #6]
				dma_buf[7]='D';
 8009a3a:	4b99      	ldr	r3, [pc, #612]	; (8009ca0 <Keyboard+0x2dc>)
 8009a3c:	2244      	movs	r2, #68	; 0x44
 8009a3e:	71da      	strb	r2, [r3, #7]
				dma_buf[8]='E';
 8009a40:	4b97      	ldr	r3, [pc, #604]	; (8009ca0 <Keyboard+0x2dc>)
 8009a42:	2245      	movs	r2, #69	; 0x45
 8009a44:	721a      	strb	r2, [r3, #8]
				dma_buf[9]='=';
 8009a46:	4b96      	ldr	r3, [pc, #600]	; (8009ca0 <Keyboard+0x2dc>)
 8009a48:	223d      	movs	r2, #61	; 0x3d
 8009a4a:	725a      	strb	r2, [r3, #9]
				dma_buf[10]='1';
 8009a4c:	4b94      	ldr	r3, [pc, #592]	; (8009ca0 <Keyboard+0x2dc>)
 8009a4e:	2231      	movs	r2, #49	; 0x31
 8009a50:	729a      	strb	r2, [r3, #10]
				dma_buf[11]='\r';
 8009a52:	4b93      	ldr	r3, [pc, #588]	; (8009ca0 <Keyboard+0x2dc>)
 8009a54:	220d      	movs	r2, #13
 8009a56:	72da      	strb	r2, [r3, #11]
				dma_buf[12]='\n';
 8009a58:	4b91      	ldr	r3, [pc, #580]	; (8009ca0 <Keyboard+0x2dc>)
 8009a5a:	220a      	movs	r2, #10
 8009a5c:	731a      	strb	r2, [r3, #12]

				HAL_UART_Transmit_DMA(&huart2, dma_buf, 13);
 8009a5e:	220d      	movs	r2, #13
 8009a60:	498f      	ldr	r1, [pc, #572]	; (8009ca0 <Keyboard+0x2dc>)
 8009a62:	4890      	ldr	r0, [pc, #576]	; (8009ca4 <Keyboard+0x2e0>)
 8009a64:	f7f9 fd86 	bl	8003574 <HAL_UART_Transmit_DMA>
				HAL_UART_Receive_DMA(&huart2, read_buf, 11);
 8009a68:	220b      	movs	r2, #11
 8009a6a:	498f      	ldr	r1, [pc, #572]	; (8009ca8 <Keyboard+0x2e4>)
 8009a6c:	488d      	ldr	r0, [pc, #564]	; (8009ca4 <Keyboard+0x2e0>)
 8009a6e:	f7f9 fded 	bl	800364c <HAL_UART_Receive_DMA>
 8009a72:	e009      	b.n	8009a88 <Keyboard+0xc4>
			}
		}
	 else
		{
			if(button_state1>0)
 8009a74:	4b88      	ldr	r3, [pc, #544]	; (8009c98 <Keyboard+0x2d4>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d005      	beq.n	8009a88 <Keyboard+0xc4>
			{
				button_state1--;
 8009a7c:	4b86      	ldr	r3, [pc, #536]	; (8009c98 <Keyboard+0x2d4>)
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	b2da      	uxtb	r2, r3
 8009a84:	4b84      	ldr	r3, [pc, #528]	; (8009c98 <Keyboard+0x2d4>)
 8009a86:	701a      	strb	r2, [r3, #0]
			}
		}
	 if(BUTTON2_READ==GPIO_PIN_RESET)
 8009a88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a8c:	4881      	ldr	r0, [pc, #516]	; (8009c94 <Keyboard+0x2d0>)
 8009a8e:	f7f7 ff27 	bl	80018e0 <HAL_GPIO_ReadPin>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f040 8083 	bne.w	8009ba0 <Keyboard+0x1dc>
		{
			if(button_state2<2) //проверяем счетчик времени нажатия кнопки
 8009a9a:	4b84      	ldr	r3, [pc, #528]	; (8009cac <Keyboard+0x2e8>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d805      	bhi.n	8009aae <Keyboard+0xea>
			{
				button_state2++;
 8009aa2:	4b82      	ldr	r3, [pc, #520]	; (8009cac <Keyboard+0x2e8>)
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	4b80      	ldr	r3, [pc, #512]	; (8009cac <Keyboard+0x2e8>)
 8009aac:	701a      	strb	r2, [r3, #0]
			}
			
			if(button_state2==1)
 8009aae:	4b7f      	ldr	r3, [pc, #508]	; (8009cac <Keyboard+0x2e8>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d17e      	bne.n	8009bb4 <Keyboard+0x1f0>
			{
				osMessagePut(pos_Queue, BUTTON2_PRESSED, 100);
 8009ab6:	4b79      	ldr	r3, [pc, #484]	; (8009c9c <Keyboard+0x2d8>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2264      	movs	r2, #100	; 0x64
 8009abc:	2102      	movs	r1, #2
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fa fef6 	bl	80048b0 <osMessagePut>



				dma_buf[0]='A';
 8009ac4:	4b76      	ldr	r3, [pc, #472]	; (8009ca0 <Keyboard+0x2dc>)
 8009ac6:	2241      	movs	r2, #65	; 0x41
 8009ac8:	701a      	strb	r2, [r3, #0]
				dma_buf[1]='T';
 8009aca:	4b75      	ldr	r3, [pc, #468]	; (8009ca0 <Keyboard+0x2dc>)
 8009acc:	2254      	movs	r2, #84	; 0x54
 8009ace:	705a      	strb	r2, [r3, #1]
				dma_buf[2]='+';
 8009ad0:	4b73      	ldr	r3, [pc, #460]	; (8009ca0 <Keyboard+0x2dc>)
 8009ad2:	222b      	movs	r2, #43	; 0x2b
 8009ad4:	709a      	strb	r2, [r3, #2]
				dma_buf[3]='C';
 8009ad6:	4b72      	ldr	r3, [pc, #456]	; (8009ca0 <Keyboard+0x2dc>)
 8009ad8:	2243      	movs	r2, #67	; 0x43
 8009ada:	70da      	strb	r2, [r3, #3]
				dma_buf[4]='W';
 8009adc:	4b70      	ldr	r3, [pc, #448]	; (8009ca0 <Keyboard+0x2dc>)
 8009ade:	2257      	movs	r2, #87	; 0x57
 8009ae0:	711a      	strb	r2, [r3, #4]
				dma_buf[5]='J';
 8009ae2:	4b6f      	ldr	r3, [pc, #444]	; (8009ca0 <Keyboard+0x2dc>)
 8009ae4:	224a      	movs	r2, #74	; 0x4a
 8009ae6:	715a      	strb	r2, [r3, #5]
				dma_buf[6]='A';
 8009ae8:	4b6d      	ldr	r3, [pc, #436]	; (8009ca0 <Keyboard+0x2dc>)
 8009aea:	2241      	movs	r2, #65	; 0x41
 8009aec:	719a      	strb	r2, [r3, #6]
				dma_buf[7]='P';
 8009aee:	4b6c      	ldr	r3, [pc, #432]	; (8009ca0 <Keyboard+0x2dc>)
 8009af0:	2250      	movs	r2, #80	; 0x50
 8009af2:	71da      	strb	r2, [r3, #7]
				dma_buf[8]='=';
 8009af4:	4b6a      	ldr	r3, [pc, #424]	; (8009ca0 <Keyboard+0x2dc>)
 8009af6:	223d      	movs	r2, #61	; 0x3d
 8009af8:	721a      	strb	r2, [r3, #8]
				dma_buf[9]='"';
 8009afa:	4b69      	ldr	r3, [pc, #420]	; (8009ca0 <Keyboard+0x2dc>)
 8009afc:	2222      	movs	r2, #34	; 0x22
 8009afe:	725a      	strb	r2, [r3, #9]
				dma_buf[10]='O';
 8009b00:	4b67      	ldr	r3, [pc, #412]	; (8009ca0 <Keyboard+0x2dc>)
 8009b02:	224f      	movs	r2, #79	; 0x4f
 8009b04:	729a      	strb	r2, [r3, #10]
				dma_buf[11]='n';
 8009b06:	4b66      	ldr	r3, [pc, #408]	; (8009ca0 <Keyboard+0x2dc>)
 8009b08:	226e      	movs	r2, #110	; 0x6e
 8009b0a:	72da      	strb	r2, [r3, #11]
				dma_buf[12]='e';
 8009b0c:	4b64      	ldr	r3, [pc, #400]	; (8009ca0 <Keyboard+0x2dc>)
 8009b0e:	2265      	movs	r2, #101	; 0x65
 8009b10:	731a      	strb	r2, [r3, #12]
				dma_buf[13]='P';
 8009b12:	4b63      	ldr	r3, [pc, #396]	; (8009ca0 <Keyboard+0x2dc>)
 8009b14:	2250      	movs	r2, #80	; 0x50
 8009b16:	735a      	strb	r2, [r3, #13]
				dma_buf[14]='l';
 8009b18:	4b61      	ldr	r3, [pc, #388]	; (8009ca0 <Keyboard+0x2dc>)
 8009b1a:	226c      	movs	r2, #108	; 0x6c
 8009b1c:	739a      	strb	r2, [r3, #14]
				dma_buf[15]='u';
 8009b1e:	4b60      	ldr	r3, [pc, #384]	; (8009ca0 <Keyboard+0x2dc>)
 8009b20:	2275      	movs	r2, #117	; 0x75
 8009b22:	73da      	strb	r2, [r3, #15]
				dma_buf[16]='s';
 8009b24:	4b5e      	ldr	r3, [pc, #376]	; (8009ca0 <Keyboard+0x2dc>)
 8009b26:	2273      	movs	r2, #115	; 0x73
 8009b28:	741a      	strb	r2, [r3, #16]
				dma_buf[17]=' ';
 8009b2a:	4b5d      	ldr	r3, [pc, #372]	; (8009ca0 <Keyboard+0x2dc>)
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	745a      	strb	r2, [r3, #17]
				dma_buf[18]='5';
 8009b30:	4b5b      	ldr	r3, [pc, #364]	; (8009ca0 <Keyboard+0x2dc>)
 8009b32:	2235      	movs	r2, #53	; 0x35
 8009b34:	749a      	strb	r2, [r3, #18]
				dma_buf[19]='T';
 8009b36:	4b5a      	ldr	r3, [pc, #360]	; (8009ca0 <Keyboard+0x2dc>)
 8009b38:	2254      	movs	r2, #84	; 0x54
 8009b3a:	74da      	strb	r2, [r3, #19]
				dma_buf[20]='"';
 8009b3c:	4b58      	ldr	r3, [pc, #352]	; (8009ca0 <Keyboard+0x2dc>)
 8009b3e:	2222      	movs	r2, #34	; 0x22
 8009b40:	751a      	strb	r2, [r3, #20]
				dma_buf[21]=',';
 8009b42:	4b57      	ldr	r3, [pc, #348]	; (8009ca0 <Keyboard+0x2dc>)
 8009b44:	222c      	movs	r2, #44	; 0x2c
 8009b46:	755a      	strb	r2, [r3, #21]
				dma_buf[22]='"';
 8009b48:	4b55      	ldr	r3, [pc, #340]	; (8009ca0 <Keyboard+0x2dc>)
 8009b4a:	2222      	movs	r2, #34	; 0x22
 8009b4c:	759a      	strb	r2, [r3, #22]
				dma_buf[23]='1';
 8009b4e:	4b54      	ldr	r3, [pc, #336]	; (8009ca0 <Keyboard+0x2dc>)
 8009b50:	2231      	movs	r2, #49	; 0x31
 8009b52:	75da      	strb	r2, [r3, #23]
				dma_buf[24]='1';
 8009b54:	4b52      	ldr	r3, [pc, #328]	; (8009ca0 <Keyboard+0x2dc>)
 8009b56:	2231      	movs	r2, #49	; 0x31
 8009b58:	761a      	strb	r2, [r3, #24]
				dma_buf[25]='1';
 8009b5a:	4b51      	ldr	r3, [pc, #324]	; (8009ca0 <Keyboard+0x2dc>)
 8009b5c:	2231      	movs	r2, #49	; 0x31
 8009b5e:	765a      	strb	r2, [r3, #25]
				dma_buf[26]='1';
 8009b60:	4b4f      	ldr	r3, [pc, #316]	; (8009ca0 <Keyboard+0x2dc>)
 8009b62:	2231      	movs	r2, #49	; 0x31
 8009b64:	769a      	strb	r2, [r3, #26]
				dma_buf[27]='1';
 8009b66:	4b4e      	ldr	r3, [pc, #312]	; (8009ca0 <Keyboard+0x2dc>)
 8009b68:	2231      	movs	r2, #49	; 0x31
 8009b6a:	76da      	strb	r2, [r3, #27]
				dma_buf[28]='1';
 8009b6c:	4b4c      	ldr	r3, [pc, #304]	; (8009ca0 <Keyboard+0x2dc>)
 8009b6e:	2231      	movs	r2, #49	; 0x31
 8009b70:	771a      	strb	r2, [r3, #28]
				dma_buf[29]='1';
 8009b72:	4b4b      	ldr	r3, [pc, #300]	; (8009ca0 <Keyboard+0x2dc>)
 8009b74:	2231      	movs	r2, #49	; 0x31
 8009b76:	775a      	strb	r2, [r3, #29]
				dma_buf[30]='1';
 8009b78:	4b49      	ldr	r3, [pc, #292]	; (8009ca0 <Keyboard+0x2dc>)
 8009b7a:	2231      	movs	r2, #49	; 0x31
 8009b7c:	779a      	strb	r2, [r3, #30]
				dma_buf[31]='"';
 8009b7e:	4b48      	ldr	r3, [pc, #288]	; (8009ca0 <Keyboard+0x2dc>)
 8009b80:	2222      	movs	r2, #34	; 0x22
 8009b82:	77da      	strb	r2, [r3, #31]
				dma_buf[32]='\r';
 8009b84:	4b46      	ldr	r3, [pc, #280]	; (8009ca0 <Keyboard+0x2dc>)
 8009b86:	220d      	movs	r2, #13
 8009b88:	f883 2020 	strb.w	r2, [r3, #32]
				dma_buf[33]='\n';
 8009b8c:	4b44      	ldr	r3, [pc, #272]	; (8009ca0 <Keyboard+0x2dc>)
 8009b8e:	220a      	movs	r2, #10
 8009b90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

				HAL_UART_Transmit_DMA(&huart2, dma_buf, 34);
 8009b94:	2222      	movs	r2, #34	; 0x22
 8009b96:	4942      	ldr	r1, [pc, #264]	; (8009ca0 <Keyboard+0x2dc>)
 8009b98:	4842      	ldr	r0, [pc, #264]	; (8009ca4 <Keyboard+0x2e0>)
 8009b9a:	f7f9 fceb 	bl	8003574 <HAL_UART_Transmit_DMA>
 8009b9e:	e009      	b.n	8009bb4 <Keyboard+0x1f0>

			}
		}
	 else
		{
			if(button_state2>0)
 8009ba0:	4b42      	ldr	r3, [pc, #264]	; (8009cac <Keyboard+0x2e8>)
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d005      	beq.n	8009bb4 <Keyboard+0x1f0>
			{
				button_state2--;
 8009ba8:	4b40      	ldr	r3, [pc, #256]	; (8009cac <Keyboard+0x2e8>)
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	4b3e      	ldr	r3, [pc, #248]	; (8009cac <Keyboard+0x2e8>)
 8009bb2:	701a      	strb	r2, [r3, #0]
			}
		}
	 if(BUTTON3_READ==GPIO_PIN_RESET) // проверяем состояние нажатия кнопки 3
 8009bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009bb8:	483d      	ldr	r0, [pc, #244]	; (8009cb0 <Keyboard+0x2ec>)
 8009bba:	f7f7 fe91 	bl	80018e0 <HAL_GPIO_ReadPin>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d115      	bne.n	8009bf0 <Keyboard+0x22c>
		{
			if(button_state3<2) //проверяем счетчик времени нажатия кнопки
 8009bc4:	4b3b      	ldr	r3, [pc, #236]	; (8009cb4 <Keyboard+0x2f0>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d805      	bhi.n	8009bd8 <Keyboard+0x214>
			{
				button_state3++;
 8009bcc:	4b39      	ldr	r3, [pc, #228]	; (8009cb4 <Keyboard+0x2f0>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	b2da      	uxtb	r2, r3
 8009bd4:	4b37      	ldr	r3, [pc, #220]	; (8009cb4 <Keyboard+0x2f0>)
 8009bd6:	701a      	strb	r2, [r3, #0]
			}
			
			if(button_state3==1)
 8009bd8:	4b36      	ldr	r3, [pc, #216]	; (8009cb4 <Keyboard+0x2f0>)
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d111      	bne.n	8009c04 <Keyboard+0x240>
			{
				osMessagePut(pos_Queue, BUTTON3_PRESSED, 100);
 8009be0:	4b2e      	ldr	r3, [pc, #184]	; (8009c9c <Keyboard+0x2d8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2264      	movs	r2, #100	; 0x64
 8009be6:	2103      	movs	r1, #3
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fa fe61 	bl	80048b0 <osMessagePut>
 8009bee:	e009      	b.n	8009c04 <Keyboard+0x240>
			}
			
		}
	 else
		{
			if(button_state3>0)
 8009bf0:	4b30      	ldr	r3, [pc, #192]	; (8009cb4 <Keyboard+0x2f0>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d005      	beq.n	8009c04 <Keyboard+0x240>
			{
				button_state3--;
 8009bf8:	4b2e      	ldr	r3, [pc, #184]	; (8009cb4 <Keyboard+0x2f0>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	3b01      	subs	r3, #1
 8009bfe:	b2da      	uxtb	r2, r3
 8009c00:	4b2c      	ldr	r3, [pc, #176]	; (8009cb4 <Keyboard+0x2f0>)
 8009c02:	701a      	strb	r2, [r3, #0]
			}
		}
	 if(BUTTON4_READ==GPIO_PIN_RESET)
 8009c04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009c08:	4822      	ldr	r0, [pc, #136]	; (8009c94 <Keyboard+0x2d0>)
 8009c0a:	f7f7 fe69 	bl	80018e0 <HAL_GPIO_ReadPin>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d115      	bne.n	8009c40 <Keyboard+0x27c>
	 {
		if(button_state4<2) //проверяем счетчик времени нажатия кнопки
 8009c14:	4b28      	ldr	r3, [pc, #160]	; (8009cb8 <Keyboard+0x2f4>)
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d805      	bhi.n	8009c28 <Keyboard+0x264>
			{
				button_state4++;
 8009c1c:	4b26      	ldr	r3, [pc, #152]	; (8009cb8 <Keyboard+0x2f4>)
 8009c1e:	781b      	ldrb	r3, [r3, #0]
 8009c20:	3301      	adds	r3, #1
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	4b24      	ldr	r3, [pc, #144]	; (8009cb8 <Keyboard+0x2f4>)
 8009c26:	701a      	strb	r2, [r3, #0]
			}
			
			if(button_state4==1)
 8009c28:	4b23      	ldr	r3, [pc, #140]	; (8009cb8 <Keyboard+0x2f4>)
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d111      	bne.n	8009c54 <Keyboard+0x290>
			{
				osMessagePut(pos_Queue, BUTTON4_PRESSED, 100);
 8009c30:	4b1a      	ldr	r3, [pc, #104]	; (8009c9c <Keyboard+0x2d8>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2264      	movs	r2, #100	; 0x64
 8009c36:	2104      	movs	r1, #4
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7fa fe39 	bl	80048b0 <osMessagePut>
 8009c3e:	e009      	b.n	8009c54 <Keyboard+0x290>
				//osTimerStart(DisplayTimerHandle,10000);
			} 
	 }
	 else
		{
			if(button_state4>0)
 8009c40:	4b1d      	ldr	r3, [pc, #116]	; (8009cb8 <Keyboard+0x2f4>)
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d005      	beq.n	8009c54 <Keyboard+0x290>
			{
				button_state4--;
 8009c48:	4b1b      	ldr	r3, [pc, #108]	; (8009cb8 <Keyboard+0x2f4>)
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	4b19      	ldr	r3, [pc, #100]	; (8009cb8 <Keyboard+0x2f4>)
 8009c52:	701a      	strb	r2, [r3, #0]
			}
		}
	 if(BUTTON5_READ==GPIO_PIN_RESET) 
 8009c54:	2101      	movs	r1, #1
 8009c56:	4819      	ldr	r0, [pc, #100]	; (8009cbc <Keyboard+0x2f8>)
 8009c58:	f7f7 fe42 	bl	80018e0 <HAL_GPIO_ReadPin>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d130      	bne.n	8009cc4 <Keyboard+0x300>
		{
			if(button_state5<2) //проверяем счетчик времени нажатия кнопки
 8009c62:	4b17      	ldr	r3, [pc, #92]	; (8009cc0 <Keyboard+0x2fc>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d805      	bhi.n	8009c76 <Keyboard+0x2b2>
			{
				button_state5++;
 8009c6a:	4b15      	ldr	r3, [pc, #84]	; (8009cc0 <Keyboard+0x2fc>)
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	3301      	adds	r3, #1
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	4b13      	ldr	r3, [pc, #76]	; (8009cc0 <Keyboard+0x2fc>)
 8009c74:	701a      	strb	r2, [r3, #0]
			}
			
			if(button_state5==1)
 8009c76:	4b12      	ldr	r3, [pc, #72]	; (8009cc0 <Keyboard+0x2fc>)
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d12c      	bne.n	8009cd8 <Keyboard+0x314>
			{
				osMessagePut(pos_Queue, BUTTON5_PRESSED, 100);
 8009c7e:	4b07      	ldr	r3, [pc, #28]	; (8009c9c <Keyboard+0x2d8>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2264      	movs	r2, #100	; 0x64
 8009c84:	2105      	movs	r1, #5
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fa fe12 	bl	80048b0 <osMessagePut>
 8009c8c:	e024      	b.n	8009cd8 <Keyboard+0x314>
 8009c8e:	bf00      	nop
 8009c90:	20002c28 	.word	0x20002c28
 8009c94:	40010800 	.word	0x40010800
 8009c98:	20002861 	.word	0x20002861
 8009c9c:	200028b4 	.word	0x200028b4
 8009ca0:	20002c14 	.word	0x20002c14
 8009ca4:	20002968 	.word	0x20002968
 8009ca8:	20002c2c 	.word	0x20002c2c
 8009cac:	20002862 	.word	0x20002862
 8009cb0:	40011000 	.word	0x40011000
 8009cb4:	20002863 	.word	0x20002863
 8009cb8:	20002864 	.word	0x20002864
 8009cbc:	40010c00 	.word	0x40010c00
 8009cc0:	20002865 	.word	0x20002865
				//osTimerStart(DisplayTimerHandle,10000);
			}
		}
	 else
		{
			if(button_state5>0)
 8009cc4:	4b1a      	ldr	r3, [pc, #104]	; (8009d30 <Keyboard+0x36c>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d005      	beq.n	8009cd8 <Keyboard+0x314>
			{
				button_state5--;
 8009ccc:	4b18      	ldr	r3, [pc, #96]	; (8009d30 <Keyboard+0x36c>)
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	b2da      	uxtb	r2, r3
 8009cd4:	4b16      	ldr	r3, [pc, #88]	; (8009d30 <Keyboard+0x36c>)
 8009cd6:	701a      	strb	r2, [r3, #0]
			}
		}
	 if(BUTTON6_READ==GPIO_PIN_RESET)
 8009cd8:	2110      	movs	r1, #16
 8009cda:	4816      	ldr	r0, [pc, #88]	; (8009d34 <Keyboard+0x370>)
 8009cdc:	f7f7 fe00 	bl	80018e0 <HAL_GPIO_ReadPin>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d115      	bne.n	8009d12 <Keyboard+0x34e>
	 {
		 if(button_state6<2) //проверяем счетчик времени нажатия кнопки
 8009ce6:	4b14      	ldr	r3, [pc, #80]	; (8009d38 <Keyboard+0x374>)
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d805      	bhi.n	8009cfa <Keyboard+0x336>
			{
				button_state6++;
 8009cee:	4b12      	ldr	r3, [pc, #72]	; (8009d38 <Keyboard+0x374>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	b2da      	uxtb	r2, r3
 8009cf6:	4b10      	ldr	r3, [pc, #64]	; (8009d38 <Keyboard+0x374>)
 8009cf8:	701a      	strb	r2, [r3, #0]
			}
			
			if(button_state6==1)
 8009cfa:	4b0f      	ldr	r3, [pc, #60]	; (8009d38 <Keyboard+0x374>)
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d111      	bne.n	8009d26 <Keyboard+0x362>
			{
				osMessagePut(pos_Queue, BUTTON6_PRESSED, 100);
 8009d02:	4b0e      	ldr	r3, [pc, #56]	; (8009d3c <Keyboard+0x378>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2264      	movs	r2, #100	; 0x64
 8009d08:	2106      	movs	r1, #6
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fa fdd0 	bl	80048b0 <osMessagePut>
 8009d10:	e009      	b.n	8009d26 <Keyboard+0x362>
				//osTimerStart(DisplayTimerHandle,10000);
			} 
	 }
	 else
		{
			if(button_state6>0)
 8009d12:	4b09      	ldr	r3, [pc, #36]	; (8009d38 <Keyboard+0x374>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d005      	beq.n	8009d26 <Keyboard+0x362>
			{
				button_state6--;
 8009d1a:	4b07      	ldr	r3, [pc, #28]	; (8009d38 <Keyboard+0x374>)
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	3b01      	subs	r3, #1
 8009d20:	b2da      	uxtb	r2, r3
 8009d22:	4b05      	ldr	r3, [pc, #20]	; (8009d38 <Keyboard+0x374>)
 8009d24:	701a      	strb	r2, [r3, #0]
			}
		}
		
    osDelay(50);
 8009d26:	2032      	movs	r0, #50	; 0x32
 8009d28:	f7fa fc79 	bl	800461e <osDelay>
	 if(BUTTON1_READ==GPIO_PIN_RESET)
 8009d2c:	e653      	b.n	80099d6 <Keyboard+0x12>
 8009d2e:	bf00      	nop
 8009d30:	20002865 	.word	0x20002865
 8009d34:	40010c00 	.word	0x40010c00
 8009d38:	20002866 	.word	0x20002866
 8009d3c:	200028b4 	.word	0x200028b4

08009d40 <WifiTask>:
uint8_t read_buf[20];


// Обработчик задачи Wifi
void WifiTask(void const * argument)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
	
	osThreadSuspend(WifiTaskHandle); // Приостанавливаем задачу
 8009d48:	4b0a      	ldr	r3, [pc, #40]	; (8009d74 <WifiTask+0x34>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fa fe63 	bl	8004a18 <osThreadSuspend>
	//wh0802_write_data_to_ram(*&read_buf[4]);

	
	for(;;)
	{
		osThreadSuspend(TimeMenuHandle);
 8009d52:	4b09      	ldr	r3, [pc, #36]	; (8009d78 <WifiTask+0x38>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fa fe5e 	bl	8004a18 <osThreadSuspend>
		wh0802_write_to_display(0x00, read_buf, CLEAR_ON);
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	4907      	ldr	r1, [pc, #28]	; (8009d7c <WifiTask+0x3c>)
 8009d60:	2000      	movs	r0, #0
 8009d62:	f7fa fb65 	bl	8004430 <wh0802_write_to_display>
		osThreadSuspend(WifiTaskHandle);
 8009d66:	4b03      	ldr	r3, [pc, #12]	; (8009d74 <WifiTask+0x34>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fa fe54 	bl	8004a18 <osThreadSuspend>
		osThreadSuspend(TimeMenuHandle);
 8009d70:	e7ef      	b.n	8009d52 <WifiTask+0x12>
 8009d72:	bf00      	nop
 8009d74:	200029b4 	.word	0x200029b4
 8009d78:	20002964 	.word	0x20002964
 8009d7c:	20002c2c 	.word	0x20002c2c

08009d80 <__libc_init_array>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	2600      	movs	r6, #0
 8009d84:	4d0c      	ldr	r5, [pc, #48]	; (8009db8 <__libc_init_array+0x38>)
 8009d86:	4c0d      	ldr	r4, [pc, #52]	; (8009dbc <__libc_init_array+0x3c>)
 8009d88:	1b64      	subs	r4, r4, r5
 8009d8a:	10a4      	asrs	r4, r4, #2
 8009d8c:	42a6      	cmp	r6, r4
 8009d8e:	d109      	bne.n	8009da4 <__libc_init_array+0x24>
 8009d90:	f000 f830 	bl	8009df4 <_init>
 8009d94:	2600      	movs	r6, #0
 8009d96:	4d0a      	ldr	r5, [pc, #40]	; (8009dc0 <__libc_init_array+0x40>)
 8009d98:	4c0a      	ldr	r4, [pc, #40]	; (8009dc4 <__libc_init_array+0x44>)
 8009d9a:	1b64      	subs	r4, r4, r5
 8009d9c:	10a4      	asrs	r4, r4, #2
 8009d9e:	42a6      	cmp	r6, r4
 8009da0:	d105      	bne.n	8009dae <__libc_init_array+0x2e>
 8009da2:	bd70      	pop	{r4, r5, r6, pc}
 8009da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009da8:	4798      	blx	r3
 8009daa:	3601      	adds	r6, #1
 8009dac:	e7ee      	b.n	8009d8c <__libc_init_array+0xc>
 8009dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009db2:	4798      	blx	r3
 8009db4:	3601      	adds	r6, #1
 8009db6:	e7f2      	b.n	8009d9e <__libc_init_array+0x1e>
 8009db8:	0800a054 	.word	0x0800a054
 8009dbc:	0800a054 	.word	0x0800a054
 8009dc0:	0800a054 	.word	0x0800a054
 8009dc4:	0800a058 	.word	0x0800a058

08009dc8 <memcpy>:
 8009dc8:	440a      	add	r2, r1
 8009dca:	4291      	cmp	r1, r2
 8009dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dd0:	d100      	bne.n	8009dd4 <memcpy+0xc>
 8009dd2:	4770      	bx	lr
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dda:	4291      	cmp	r1, r2
 8009ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009de0:	d1f9      	bne.n	8009dd6 <memcpy+0xe>
 8009de2:	bd10      	pop	{r4, pc}

08009de4 <memset>:
 8009de4:	4603      	mov	r3, r0
 8009de6:	4402      	add	r2, r0
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d100      	bne.n	8009dee <memset+0xa>
 8009dec:	4770      	bx	lr
 8009dee:	f803 1b01 	strb.w	r1, [r3], #1
 8009df2:	e7f9      	b.n	8009de8 <memset+0x4>

08009df4 <_init>:
 8009df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df6:	bf00      	nop
 8009df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dfa:	bc08      	pop	{r3}
 8009dfc:	469e      	mov	lr, r3
 8009dfe:	4770      	bx	lr

08009e00 <_fini>:
 8009e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e02:	bf00      	nop
 8009e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e06:	bc08      	pop	{r3}
 8009e08:	469e      	mov	lr, r3
 8009e0a:	4770      	bx	lr
